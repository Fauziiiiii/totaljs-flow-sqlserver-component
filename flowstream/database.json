{
	"variables": {},
	"fInw4XC1cR61f": {
		"id": "fInw4XC1cR61f",
		"name": "Components",
		"author": "",
		"version": "",
		"icon": "ti ti-code-branch",
		"reference": "",
		"group": "",
		"url": "https://",
		"cloning": true,
		"color": "",
		"readme": "",
		"memory": 0,
		"proxypath": "",
		"variables": {},
		"dtcreated": "2024-08-05T03:06:26.968Z",
		"asfiles": false,
		"worker": "fork",
		"origin": "http://localhost:8000",
		"paused": true,
		"sandbox": false,
		"components": {
			"trigger": "<script total>\n\n\texports.id = 'trigger';\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '4';\n\texports.icon = 'ti ti-start';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false, prompt: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar regprompt = /\\{prompt\\}/g;\n\n\t\tinstance.trigger = function(msg) {\n\n\t\t\tvar random = !config.prompt && config.random;\n\t\t\tvar val = config.data;\n\t\t\tvar prompt = msg.value || '';\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = random ? U.random() : val.replace(regprompt, prompt).parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? Buffer.from(U.random_string()) : Buffer.from(val.replace(regprompt, prompt), 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = random ? NOW.add('-' + U.random(500, 10) + ' seconds') : val.replace(regprompt, prompt).parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? {} : (new Function('return ' + val.replace(regprompt, prompt)))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tvar tmp = random ? '' : val.replace(regprompt, prompt);\n\t\t\t\t\tval = random ? U.random() % 2 === 0 : tmp === 'true' || tmp === 'on' || tmp === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = random ? U.random_string(20) : val.replace(regprompt, prompt);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"mt10 m\">\n\t\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.prompt\" config=\"type:checkbox\">Prompt</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"disabled\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"block hidden m mt10\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.promptlabel\" config=\"placeholder:Enter a value\"><b>Prompt label</b></ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<ui-bind path=\"?\" config=\"hide:value.hide && !value.prompt\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"help hidden\">The prompt value will be assigned to the <code>{prompt}</code> keyword in the code.</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button name=\"run\">Run</button>\n\t</div>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\t\texports.click = function(el) {\n\t\t\tif (exports.config.prompt) {\n\t\t\t\tvar opt = {};\n\t\t\t\topt.name = exports.config.promptlabel || 'Enter a value';\n\t\t\t\topt.value = '';\n\t\t\t\topt.callback = function(val) {\n\t\t\t\t\texports.trigger({ value: val });\n\t\t\t\t};\n\t\t\t\tSETTER('prompt/show', opt);\n\t\t\t} else\n\t\t\t\texports.trigger();\n\t\t};\n\t});\n</script>",
			"crontab": "<script total>\n\n\texports.id = 'crontab';\n\texports.name = 'Crontab';\n\texports.icon = 'ti ti-clock';\n\texports.author = 'Peter Å irka / Total.js';\n\texports.version = '1';\n\texports.group = 'Triggers';\n\texports.config = { random: true, type: 'now', data: '', timers: ['0 9 * * *'], restart: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar timers = null;\n\t\tvar days = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n\t\tvar func = {};\n\n\t\tfunc.cronexec = function(output, date) {\n\n\t\t\tvar m = date.getMinutes();\n\t\t\tvar h = date.getHours();\n\t\t\tvar d = date.getDate();\n\t\t\tvar M = date.getMonth() + 1;\n\t\t\tvar day = date.getDay();\n\t\t\tvar is = true;\n\t\t\tvar values = [m, h, d, M, day];\n\n\t\t\tfor (var i = 0; i < output.length; i++) {\n\n\t\t\t\tvar val = values[i];\n\t\t\t\tvar m = output[i];\n\n\t\t\t\tif (m.type === 'equal') {\n\t\t\t\t\tif (m.value !== val) {\n\t\t\t\t\t\tis = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (m.type === 'every') {\n\t\t\t\t\tif (m.value % val !== 0) {\n\t\t\t\t\t\tis = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (m.type === 'in') {\n\t\t\t\t\tif (!m.value.includes(val)) {\n\t\t\t\t\t\tis = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t} else if (m.type === 'between') {\n\t\t\t\t\tif (val < m.value[0] || val > m.value[1]) {\n\t\t\t\t\t\tis = false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn is;\n\t\t};\n\n\t\tfunc.cronmake = function(line) {\n\n\t\t\t// */15 = every 15\n\t\t\t// 1-2  = BETWEEN\n\t\t\t// 1,2  = IN\n\n\t\t\tvar days = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n\t\t\tvar arr = line.toLowerCase().replace(/[a-z]+/g, text => days.indexOf(text.substring(0, 2))).split(/\\s|\\t/).trim();\n\t\t\tvar output = [];\n\n\t\t\tfor (var m of arr) {\n\n\t\t\t\tvar obj = {};\n\t\t\t\tvar tmp = null;\n\n\t\t\t\tif (m === '*') {\n\t\t\t\t\tobj.type = '*';\n\t\t\t\t} else if (m.indexOf('/') !== -1) {\n\t\t\t\t\ttmp = m.split('/');\n\t\t\t\t\tobj.type = 'every';\n\t\t\t\t\tfor (let i = 0; i < tmp.length; i++) {\n\t\t\t\t\t\tif (tmp[i] !== '*')\n\t\t\t\t\t\t\ttmp[i] = +tmp[i];\n\t\t\t\t\t}\n\t\t\t\t\tobj.value = tmp;\n\t\t\t\t} else if (m.indexOf(',') !== -1) {\n\t\t\t\t\ttmp = m.split(',');\n\t\t\t\t\tobj.type = 'in';\n\t\t\t\t\tfor (let i = 0; i < tmp.length; i++)\n\t\t\t\t\t\ttmp[i] = +tmp[i];\n\t\t\t\t\tobj.value = tmp;\n\t\t\t\t} else if (m.indexOf('-') !== -1) {\n\t\t\t\t\ttmp = m.split('-');\n\t\t\t\t\tobj.type = 'between';\n\t\t\t\t\tfor (let i = 0; i < tmp.length; i++)\n\t\t\t\t\t\ttmp[i] = +tmp[i];\n\t\t\t\t\tobj.value = tmp;\n\t\t\t\t} else {\n\t\t\t\t\tobj.type = 'equal';\n\t\t\t\t\tobj.value = +m;\n\t\t\t\t}\n\n\t\t\t\toutput.push(obj);\n\t\t\t}\n\n\t\t\treturn function(date) {\n\t\t\t\treturn func.cronexec(output, date);\n\t\t\t};\n\t\t};\n\n\t\tinstance.vary = instance.configure = function() {\n\t\t\ttimers = [];\n\t\t\tfor (var m of config.timers)\n\t\t\t\ttimers.push(func.cronmake(instance.replace(m)));\n\t\t};\n\n\t\tvar send = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'now':\n\t\t\t\t\tval = new Date();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10) + ' seconds') : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.newmessage(val).send('output');\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tsend();\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tvar dt = config.offset ? new Date(NOW.getTime() - (config.offset * 60 * 1000)) : NOW;\n\t\t\tfor (var m of timers) {\n\t\t\t\tif (m(dt)) {\n\t\t\t\t\tsend();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t\tconfig.restart && setInterval(send, 5000);\n\n\t};\n\n</script>\n\n<readme>\nThe component can make a trigger in the specific time and date.\n\n## Cron string: `* * * * *`\n\nMeaning of each `*` explained bellow, in order from left to right:\n\n- minute `0 - 59`\n- hour `0 - 23`\n- day of month `1 - 31`\n- month `1 - 12`\n- day of week `0 - 6` and `0` is Sunday\n\n```\n0 16 * * *      -> trigger every day at 16:00\n20 19 * * *     -> every day at 19:20 and 19:40\n* * * * *       -> trigger every minute\n0 20 * * 1      -> every monday at 20:00\n```\n</readme>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS-settings input { font-family: Menlo, Consolas, monospace; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASS-settings\">\n\n\t\t<ui-component name=\"textboxlist\" path=\"?.timers\" config=\"maxlength:50;required:1;placeholder:* 1 * * *\" class=\"m\">Timers</ui-component>\n\n\t\t<div class=\"help monospace\">\n\t\t\t<div>* * * * *</div>\n\t\t\t<div>1MINUTE 2HOUR 3DAY 4MONTH 5DAYOFWEEK</div>\n\t\t</div>\n\n\t\t<div class=\"help\"><a href=\"https://crontab.guru/examples.html\" target=\"_blank\" class=\"link\"><i class=\"ti ti-flask mr5\"></i>Examples</a></div>\n\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t<hr />\n\n\t\t<div class=\"grid-4\">\n\t\t\t<div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.offset\" config=\"type:number;format:\" default=\"NOW.getTimezoneOffset()\">Time zone offset</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"help m\">Must be defined in minutes. The backend time is in UTC format.<br />Your current time zone offset is: <ui-bind path=\"NOW\" config=\"text:value.getTimezoneOffset()\" class=\"b\"></ui-bind> minutes</div>\n\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"ti ti-comment\"></i>Data sending</label>\n\t\t</div>\n\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,now|Current date and time,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"help\">Choose an output type</div>\n\n\t\t<ui-bind path=\"?.type\" config=\"show:value!=='now'\" class=\"block\">\n\t\t\t<div class=\"mt10 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.random\" config=\"hide\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t</ui-bind>\n\t\t</ui-bind>\n\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<footer>Count of timers: <ui-bind path=\"CONFIG.timers\" config=\"text:value ? value.length : 0\" class=\"b\"></ui-bind></footer>\n</body>",
			"minutely": "<script total>\n\n\texports.id = 'minutely';\n\texports.name = 'Minutely';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'ti ti-clock';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'now', data: '' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar counter;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'now':\n\t\t\t\t\tval = NOW;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'counter':\n\t\t\t\t\tval = counter;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.service = function(count) {\n\t\t\tcounter = count;\n\t\t\tinstance.trigger();\n\t\t};\n\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:now|Current date,counter|Counter,string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1;innerlabel:1\">Type</ui-component>\n\t\t<ui-bind path=\"?.type\" config=\"show:value!=='counter'&&value!=='now'\" class=\"hidden\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.random\" config=\"hide\" class=\"hidden\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1\">Data</ui-component>\n\t\t\t</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in every minute.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t</div>\n</body>",
			"exec": "<script total>\n\n\texports.id = 'exec';\n\texports.name = 'Exec';\n\texports.group = 'Triggers';\n\texports.version = '1';\n\texports.icon = 'ti ti-sliders-v';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component is extraordinary because it must be executed directly from the source code via the `flowstream.exec()` method. The component triggers received data into the Flow.\n\n```js\nvar opt = {};\nopt.id = 'ID_OF_EXEC_INSTANCE';\nopt.data = { custom: 'data' };\nopt.callback = function(err, msg) {\n\t// msg.uid;\n\t// msg.ref;\n\t// msg.repo {Object}\n\t// msg.data {Object}\n\t// msg.cloned {Number} how many times was the message cloned?\n\t// msg.duration {Number} in milliseconds\n};\n\n// optional:\n// opt.vars = {};    --> custom variables\n// opt.repo = {};    --> custom repository data and this data will be returned in the callback\n// opt.uid;          --> for storing some unique ID\n// opt.ref;          --> for storing some reference ID\nflowinstance.exec(opt);\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"notify": "<script total>\n\n\texports.id = 'notify';\n\texports.name = 'Notify';\n\texports.group = 'Triggers';\n\texports.icon = 'ti ti-map-pin';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { method: 'all', send: 'all' };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\t\tinstance.notify = function(data) {\n\t\t\tif (config.method === 'all' || config.method === data.method && instance.id === data.id) {\n\n\t\t\t\tvar cookie = data.headers.cookie || '';\n\t\t\t\tvar arr = cookie.split(';');\n\n\t\t\t\tdata.cookies = {};\n\n\t\t\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\t\t\tvar line = arr[i].trim();\n\t\t\t\t\tvar index = line.indexOf('=');\n\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\tdata.cookies[line.substring(0, index)] = decodeURIComponent(line.substring(index + 1));\n\t\t\t\t}\n\n\t\t\t\tif (config.send !== 'all')\n\t\t\t\t\tdata = data[config.send];\n\n\t\t\t\tinstance.send('output', data);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component captures data on the `/notify/` endpoint.\n\n__Output data__:\n\n```js\n{\n\t\"method\": String,\n\t\"query\": Object,\n\t\"body\": Object,\n\t\"headers\": Object,\n\t\"cookies\": Object,\n\t\"url\": String,\n\t\"ip\": String\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { padding: 5px 8px; font-size: 11px; color: #777; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"dirsource:all|All supported HTTP methods,GET|GET,POST|POST\" class=\"m\">HTTP Method</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"dirsource:all|Everything,query|Query arguments,body|Payload,headers|Headers,cookies|Cookies\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><span class=\"exec mr5 pointer\" data-exec=\"tmpnotifycopy\"><i class=\"ti ti-copy\"></i></span>Endpoint:</div>\n\t\t<ui-bind path=\"flow.head\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<a href=\"{{ value.proxyurl }}/notify/{{ value.id }}-UID/\" target=\"_blank\">/notify/{{ value.id }}-UID/</a>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tW.tmpnotifycopy = function(el) {\n\t\tvar url = el.closest('footer').find('a').attr('href');\n\t\tSETTER('clipboard/copy', url);\n\t\tSETTER('notifybar/success', 'Copied');\n\t};\n</script>",
			"timer": "<script total>\n\n\texports.id = 'timer';\n\texports.name = 'Timer';\n\texports.group = 'Triggers';\n\texports.version = '2';\n\texports.icon = 'ti ti-clock';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', interval: 5000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar interval;\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar val;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = config.random ? U.random() : config.data.parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? Buffer.from(U.random_string()) : Buffer.from(config.data, 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = config.random ? NOW.add('-' + U.random(500, 10)) : config.data.parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = config.random ? {} : (new Function('return ' + config.data))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tval = config.random ? U.random() % 2 === 0 : config.data === 'true' || config.data === 'on' || config.data === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = config.random ? U.random_string(20) : config.data;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t\tif (config.interval)\n\t\t\t\tinterval = setInterval(() => instance.trigger(), config.interval);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = null;\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<script>\n\tFUNC.ftimer_exec = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.interval\" config=\"type:number;required:1;format:\">Interval</ui-component>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t</div>\n\t\t<ui-bind path=\"?.random\" config=\"hide\" class=\"hidden block\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1\">Data</ui-component>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow in the specified interval.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.ftimer_exec\">Run</button>\n\t\t<div class=\"help\">Interval: <ui-bind path=\"CONFIG.interval\" config=\"text;empty\"></ui-bind> ms</div>\n\t</div>\n</body>",
			"date": "<script total>\n\n\texports.id = 'date';\n\texports.name = 'Date';\n\texports.group = 'Triggers';\n\texports.icon = 'ti ti-calendar';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Trigger' }];\n\texports.outputs = [{ id: 'output', name: 'Date/Time' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar makedate = function() {\n\t\t\tvar dt = new Date();\n\t\t\treturn config.format ? dt.format(config.format) : dt;\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.send('output', makedate());\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.send('output', makedate());\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component will return a Date/Time object (raw or formatted) according to its configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.format\" config=\"placeholder:yyyy-MM-dd HH\\:mm\\:ss\">Date format</ui-component>\n\t\t<div class=\"help\">Empty value will return current <code>datetime</code> object.</div>\n\t\t<hr />\n\t\t<p>\n\t\t\td - day e.g. 1<br>\n\t\t\tdd - day e.g. 01<br>\n\t\t\tddd - day (named). MO<br>\n\t\t\tdddd - day (named). Monday<br>\n\t\t\tM - month e.g. 1<br>\n\t\t\tMM - month e.g. 01<br>\n\t\t\tMMM - month (named). Jan<br>\n\t\t\tMMMM - month (named). January<br>\n\t\t\tyy - year e.g. 16<br>\n\t\t\tyyyy - year e.g. 2016<br>\n\t\t\tw - week number e.g. 1<br>\n\t\t\tww - week number e.g. 01<br>\n\t\t\tH - hour e.g. 1<br>\n\t\t\tHH - hour e.g. 01<br>\n\t\t\tm - minute e.g. 1<br>\n\t\t\tmm - minute e.g. 01<br>\n\t\t\ts - second e.g. 1<br>\n\t\t\tss - second e.g. 01<br>\n\t\t\ta - AM/PM\n\t\t</p>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Run</button>\n\t</div>\n\t<footer is=\"is-footer\" path=\"CONFIG.format\" config=\"text;show\"></footer>\n</body>",
			"request": "<script total>\n\n\texports.id = 'request';\n\texports.name = 'HTTP Request';\n\texports.group = 'Common';\n\texports.version = '7';\n\texports.icon = 'ti ti-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, secret: '', nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tvar secret = config.secret ? $.variables(config.secret, true) : null;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (secret && opt.body) {\n\t\t\t\topt.body = U.encrypt_data(opt.body, secret);\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers['X-Encryption'] = 'a';\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (secret && response.headers['x-encryption'])\n\t\t\t\t\tbody = U.decrypt_data(body, secret);\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.indexOf(';', 7);\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 5px 10px 10px; }\n\t.CLASS .status span { padding: 1px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<ui-bind path=\"CONFIG\" config=\"template;show:value.url\" class=\"block status\">\n\t\t<script type=\"text/html\">\n\t\t\t<div class=\"monospace hellip\" title=\"{{ value.url }}\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t</script>\n\t</ui-bind>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH;required:1\">Method</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1\"><b>URL address</b></ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number;format:\">Timeout</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-clock\"></i><ui-bind path=\"?.timeout\" config=\"text:((value||0)/1000).floor(2)+' sec.'\"></ui-bind><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number\">Max. size</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-calculator\"></i><ui-bind path=\"?.limit\" config=\"text:(value||0).filesize()\"></ui-bind><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.serialize\" config=\"dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:None;dirempty:None\" class=\"m\">Data serialization</ui-component>\n\t\t<ui-component name=\"keyvalue\" path=\"?.headers\" config=\"placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</ui-component>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<ui-component name=\"keyvalue\" path=\"?.cookies\" config=\"placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</ui-component>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.parse\" config=\"type:checkbox\">Parse Response to Object</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.dnscache\" config=\"type:checkbox\">Enable DNS cache</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.insecure\" config=\"type:checkbox\">Allow insecure connection</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.xhr\" config=\"type:checkbox\">Add XHR header</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.secret\" config=\"camouflage:1;icon:ti ti-totaljs\">Total.js Encryption/Decryption secret</ui-component>\n\t</div>\n</settings>",
			"troute": "<script total>\n\n\texports.id = 'troute';\n\texports.name = 'Route';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-exchange';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, user: 0, send: 'all', reader: '-' };\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.close = function() {\n\t\t\tprev && prev.remove();\n\t\t\tprev = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [];\n\n\t\t\t\tconfig.timeout && flags.push(F.is5 ? ('<' + Math.ceil(config.timeout / 1000) + 's') : config.timeout);\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tflags.push('<' + Math.ceil(config.limit / 1024) + 'MB');\n\n\t\t\t\tconfig.upload && flags.push((F.is5 ? '@' : '') + 'upload');\n\n\t\t\t\tvar action = function($) {\n\n\t\t\t\t\tvar ctrl = F.is5 ? $ : this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\t// Parse cookies\n\t\t\t\t\tvar cookies = {};\n\t\t\t\t\tvar cookie = ctrl.headers.cookie;\n\n\t\t\t\t\tif (cookie) {\n\t\t\t\t\t\tlet arr = cookie.split(';');\n\t\t\t\t\t\tfor (let c of arr) {\n\t\t\t\t\t\t\tlet line = c.trim();\n\t\t\t\t\t\t\tlet index = line.indexOf('=');\n\t\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\t\tcookies[line.substring(0, index)] = line.substring(index + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar query = ctrl.query;\n\t\t\t\t\tvar body = ctrl.body;\n\t\t\t\t\tvar params = ctrl.params;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\tdata = ctrl.user;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cookies':\n\t\t\t\t\t\t\tdata = cookies;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: body, query: query, user: ctrl.user, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: params, ip: ctrl.ip, split: ctrl.split, cookies: cookies, ua: ctrl.ua };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\n\t\t\t\t\tif (config.upload && config.reader && config.reader !== '-') {\n\t\t\t\t\t\tctrl.files.wait(function(file, next) {\n\t\t\t\t\t\t\tfile.read(function(err, buffer) {\n\t\t\t\t\t\t\t\tvar type = config.reader;\n\t\t\t\t\t\t\t\tif (type === 'datauri')\n\t\t\t\t\t\t\t\t\ttype = 'base64';\n\t\t\t\t\t\t\t\tfile.data = type === 'buffer' ? buffer : buffer.toString(type);\n\t\t\t\t\t\t\t\tif (config.reader === 'datauri')\n\t\t\t\t\t\t\t\t\tfile.data = 'data:' + file.type + ';base64,' + file.data;\n\t\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, () => msg.send('output', data));\n\t\t\t\t\t} else\n\t\t\t\t\t\tmsg.send('output', data);\n\n\t\t\t\t};\n\n\t\t\t\tvar auth = config.user == 1 ? '+' : config.user == 2 ? '-' : '';\n\t\t\t\tvar url = config.url.replace(/#/g, instance.main.id);\n\t\t\t\tprev = F.is5 ? ROUTE(auth + config.method + ' ' + url + (config.action && config.method === 'API' ? (' ' + config.action) : '') + ' ' + flags.join(' '), action) : ROUTE(auth + config.method + ' ' + instance.replace(url) + (config.action && config.method === 'API' ? (' ' + config.action) : ''), action, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n__Output data__:\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number, data:Buffer|String }] // optional\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-bind path=\"flow.head.worker\" config=\"hide:!value || flow.head.origin.length < flow.head.proxyurl.length\" class=\"block\">\n\t\t\t<div class=\"message message-error\"><b><i class=\"ti ti-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t</ui-bind>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE,API|API\">Method</ui-component>\n\t\t\t\t<div class=\"help\">HTTP method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"monospace:1;required:1\">Relative URL address</ui-component>\n\t\t\t\t<div class=\"help\">A relative path to: <ui-bind path=\"flow.head.proxyurl\" config=\"text:value?value:window.location.origin\"></ui-bind><br />It supports wildcard <code>/something/*</code> or dynamic arguments <code>/products/{category}/</code>.<br /><code>#</code> will be replaced with a FlowStream <code>id</code> identifier.</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<hr class=\"nmt\" />\n\n\t\t<ui-bind path=\"?.method\" config=\"show:value === 'API'\" class=\"block hidden m padding bg-smoke radius\">\n\t\t\t<ui-component name=\"input\" path=\"?.action\" config=\"monospace:1;required:1;placeholder:+users_read/{id}\">API Action</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-component name=\"input\" path=\"?.upload\" config=\"type:checkbox\" class=\"m\"><b>Allow uploading files (form data)</b></ui-component>\n\t\t<ui-bind path=\"?.upload\" config=\"enabled\">\n\t\t\t<ui-component name=\"input\" path=\"?.reader\" config=\"dirsource:-|Keep as files,buffer|Buffer,utf8|UTF-8,ascii|ASCII,datauri|Data URI,base64|Base64,hex|Hex\">Read files to</ui-component>\n\t\t</ui-bind>\n\t\t<hr />\n\n\t\t<div class=\"ui-input-label mt10\">Continue as:</div>\n\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t<span>Authorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t<span>Unauthorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t<span>Both</span>\n\t\t\t</div>\n\t\t</ui-component>\n\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"required:1;type:number;format:\">Timeout</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;ricon:!kB;align:1;format:\">Request limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers,cookies|Cookies,user|User\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; color: #999; }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer class=\"monospace\"></footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar template = Tangular.compile('{{ if value.user == 1 }}<i class=\"ti ti-lock red mr10\"></i>{{ else if value.user == 2 }}<i class=\"ti ti-unlock blue mr10\"></i>{{ fi }}<span class=\"method\">{{ value.method }}</span> <a href=\"{{ value.link }}\" target=\"_blank\">{{ value.url }}</a>{{ if value.method === \\'API\\' }} {{ value.action }}{{ fi }}');\n\n\t\tvar reload = function() {\n\t\t\tvar model = CLONE(exports.config);\n\t\t\tmodel.link = model.url = model.url.replace(/#/g, flow.head.id);\n\n\t\t\tif (flow.head.proxypath)\n\t\t\t\tmodel.link = flow.head.origin + (flow.head.proxypath + model.link).replace(/\\/{2,}/g, '/');\n\t\t\telse\n\t\t\t\tmodel.link = flow.head.origin + model.link;\n\n\t\t\texports.element.find('footer').html(template({ value: model }));\n\t\t};\n\n\t\texports.configure = reload;\n\t\treload();\n\t});\n</script>",
			"stringoperations": "<script total>\n\n\texports.id = 'stringoperations';\n\texports.name = 'String Operations';\n\texports.icon = 'ti ti-font';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = { operation: 'lowercase' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar output;\n\t\t\tswitch(config.operation) {\n\t\t\t\tcase 'lowercase':\n\t\t\t\t\toutput = data.toLowerCase();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'uppercase':\n\t\t\t\t\toutput = data.toUpperCase();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\toutput = data.capitalize();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'slug':\n\t\t\t\t\toutput = data.slug();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'deburr':\n\t\t\t\t\toutput = data.toASCII();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'reverse':\n\t\t\t\t\toutput = data.split('').reverse().join('');\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spaces':\n\t\t\t\t\toutput = data.replace(/|s/g, '');\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'trim':\n\t\t\t\t\toutput = data.trim();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (!config.operation)\n\t\t\t\tconfig.operation = 'lowercase';\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis components can apply string operation to your components.\n\n- input: `String`\n- output: `String`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.operation\" config=\"type:select;dirsource:capitalize|Capitalize,lowercase|Lower Case,uppercase|Upper Case,slug|Slug,deburr|Remove diacritic,reverse|Reverse,spaces|Remove spaces\">Operation</ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; font-weight: bold; }\n\t.CLASS footer span { float: right; }\n\t.CLASS footer span i { font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.operation\" config=\"show\" class=\"block\">\n\t\t\tOperation: <span class=\"blue\"><ui-bind path=\"CONFIG.operation\" config=\"text:value.charAt(0).toUpperCase() + value.slice(1)\"></ui-bind></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"print": "<script total>\n\n\texports.id = 'print';\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '5';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = '<Buffer ' + data.toString('hex').substring(0, 10) + '...';\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tif (output) {\n\t\t\t\toutput = JSON.stringify(output, serializer);\n\t\t\t\tinstance.status(output, 200);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-bind { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .json { white-space: pre; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"html pre:Thelpers.jsonformat(JSON.stringify(JSON.parse(value), null, '\\t'));show:value && value.length > 0\" class=\"hidden selectable block\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"ti ti-window\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(JSON.parse(laststatus), null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
			"totp": "<script total>\n\n\texports.id = 'totp';\n\texports.name = 'TOTP';\n\texports.icon = 'ti ti-lock';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Security';\n\texports.config = { issuer: 'Total.js', type: 'totp', time: 30 };\n\texports.inputs = [{ id: 'generate', name: 'Generate' }, { id: 'verify', name: 'Verify' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\t// Base32 methods are updated code from \"Base32.js\" library\n\t\t// Source: https://github.com/mikepb/base32.js\n\t\tfunction charmap(alphabet) {\n\t\t\tvar mappings = {};\n\t\t\tvar chars = alphabet.split('');\n\t\t\tfor (var i = 0; i < chars.length; i++) {\n\t\t\t\tvar c = chars[i];\n\t\t\t\tif (!(c in mappings))\n\t\t\t\t\tmappings[c] = i;\n\t\t\t}\n\t\t\treturn mappings;\n\t\t}\n\n\t\tvar CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ234567';\n\t\tvar CHARMAP = charmap(CHARS);\n\n\t\tCHARMAP[0] = 14;\n\t\tCHARMAP[1] = 8;\n\n\t\tfunction base32encode(arr) {\n\t\t\tvar buf = [];\n\t\t\tvar shift = 3;\n\t\t\tvar carry = 0;\n\n\t\t\tfor (var i = 0; i < arr.length; i++) {\n\n\t\t\t\tvar byte = arr[i];\n\t\t\t\tvar symbol = carry | (byte >> shift);\n\t\t\t\tbuf.push(CHARS[symbol & 0x1f]);\n\t\t\t\tif (shift > 5) {\n\t\t\t\t\tshift -= 5;\n\t\t\t\t\tsymbol = byte >> shift;\n\t\t\t\t\tbuf.push(CHARS[symbol & 0x1f]);\n\t\t\t\t}\n\t\t\t\tshift = 5 - shift;\n\t\t\t\tcarry = byte << shift;\n\t\t\t\tshift = 8 - shift;\n\t\t\t}\n\n\t\t\tif (shift !== 3) {\n\t\t\t\tbuf.push(CHARS[carry & 0x1f]);\n\t\t\t\tshift = 3;\n\t\t\t\tcarry = 0;\n\t\t\t}\n\n\t\t\treturn buf.join('');\n\t\t}\n\n\t\tfunction base32decode(val) {\n\n\t\t\tvar buf = [];\n\t\t\tvar arr = val.toUpperCase().split('');\n\t\t\tvar shift = 8;\n\t\t\tvar carry = 0;\n\n\t\t\tfor (var i = 0; i < arr.length; i++) {\n\t\t\t\tvar c = arr[i];\n\t\t\t\tif (c === '=')\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar symbol = CHARMAP[c] & 0xff;\n\t\t\t\tshift -= 5;\n\n\t\t\t\tif (shift > 0) {\n\t\t\t\t\tcarry |= symbol << shift;\n\t\t\t\t} else if (shift < 0) {\n\t\t\t\t\tbuf.push(carry | (symbol >> -shift));\n\t\t\t\t\tshift += 8;\n\t\t\t\t\tcarry = (symbol << shift) & 0xff;\n\t\t\t\t} else {\n\t\t\t\t\tbuf.push(carry | symbol);\n\t\t\t\t\tshift = 8;\n\t\t\t\t\tcarry = 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (shift !== 8 && carry !== 0) {\n\t\t\t\tbuf.push(carry);\n\t\t\t\tshift = 8;\n\t\t\t\tcarry = 0;\n\t\t\t}\n\n\t\t\treturn Buffer.from(buf);\n\t\t}\n\n\t\t// Inspired from \"Speakeasy\" library\n\t\t// Source: https://github.com/speakeasyjs/speakeasy\n\t\tfunction hotp(key, counter) {\n\n\t\t\tvar buffer = Buffer.from(base32decode(key), 'base32');\n\t\t\tvar buffersize = 20;\n\t\t\tvar digits = 6;\n\n\t\t\tkey = Buffer.from(Array(Math.ceil(buffersize / buffer.length) + 1).join(buffer.toString('hex')), 'hex').slice(0, buffersize);\n\n\t\t\tvar buf = Buffer.alloc(8);\n\t\t\tvar tmp = counter || 0;\n\n\t\t\tfor (var i = 0; i < 8; i++) {\n\t\t\t\t// mask 0xff over number to get last 8\n\t\t\t\tbuf[7 - i] = tmp & 0xff;\n\t\t\t\t// shift 8 and get ready to loop over the next batch of 8\n\t\t\t\ttmp = tmp >> 8;\n\t\t\t}\n\n\t\t\tvar hmac = F.Crypto.createHmac('sha1', key);\n\t\t\thmac.update(buf);\n\t\t\tvar digest = hmac.digest();\n\n\t\t\t// compute HOTP offset\n\t\t\tvar offset = digest[digest.length - 1] & 0xf;\n\n\t\t\t// calculate binary code (RFC4226 5.4)\n\t\t\tvar code = (digest[offset] & 0x7f) << 24 |\n\t\t\t(digest[offset + 1] & 0xff) << 16 |\n\t\t\t(digest[offset + 2] & 0xff) << 8 |\n\t\t\t(digest[offset + 3] & 0xff);\n\n\t\t\t// left-pad code\n\t\t\tcode = new Array(digits + 1).join('0') + code.toString(10);\n\n\t\t\t// return length number off digits\n\t\t\treturn code.substr(-digits);\n\t\t}\n\n\t\tfunction hotpverify(key, token, counter, win, totp) {\n\n\t\t\tif (!win)\n\t\t\t\twin = 5;\n\n\t\t\tif (!counter)\n\t\t\t\tcounter = 0;\n\n\t\t\ttoken += '';\n\n\t\t\tvar loopstart = totp ? counter - win : counter;\n\t\t\tvar inc = 0;\n\n\t\t\t// Now loop through from C (C - W in case of TOTP)\n\t\t\t// to C + W to determine if there is a correct code\n\t\t\tfor (var i = loopstart; i <= counter + win; ++i) {\n\t\t\t\tinc = i;\n\t\t\t\tif (hotp(key, inc) === token) {\n\t\t\t\t\t// We have found a matching code, trigger callback\n\t\t\t\t\t// and pass offset\n\t\t\t\t\treturn { delta: i - counter };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If we get to here then no codes have matched, return null\n\t\t\treturn null;\n\t\t}\n\n\t\tinstance.message_generate = function($) {\n\n\t\t\tvar bytes = F.Crypto.randomBytes(20);\n\t\t\tvar set = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXTZabcdefghiklmnopqrstuvwxyz';\n\t\t\tvar builder = [];\n\n\t\t\tfor (var i = 0; i < bytes.length; i++)\n\t\t\t\tbuilder.push(set[Math.floor(bytes[i] / 255.0 * (set.length - 1))]);\n\n\t\t\tvar secret = base32encode(Buffer.from(builder.join('').toUpperCase())).toString().replace(/=/g, '');\n\t\t\tvar user = (typeof($.data) === 'string' ? $.data : $.data.user) || 'Account';\n\t\t\tvar data = {};\n\t\t\tdata.secret = secret;\n\t\t\tdata.url = 'otpauth://' + config.type + '/' + user +'?secret=' + data.secret + '&issuer=' + encodeURIComponent(config.issuer || '');\n\t\t\tdata.qrcode = 'https://api.qrserver.com/v1/create-qr-code/?color=000000&bgcolor=FFFFFF&data=' + encodeURIComponent(data.url) + '&qzone=0&margin=0&size=200x200&ecc=L';\n\t\t\t$.send('output', data);\n\t\t};\n\n\t\tinstance.message_verify = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar now = Date.now();\n\t\t\tvar counter = Math.floor((now / 1000) / config.time);\n\t\t\tvar secret = data.secret || data.key;\n\t\t\tvar token = (data.token || data.code || data.pin || '0').replace(/\\s/g, '');\n\t\t\tvar tmp = secret ? hotpverify(secret, token, counter, 1, true) : null;\n\t\t\tvar output = {};\n\t\t\toutput.success = tmp != null && tmp.delta >= 0;\n\t\t\t$.send('output', output);\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\n## Time-Based One-Time Password Algorithm\n\nThis component can generate a secret and verifies the code (generated via Authenticator app) as a one-time password for 2FA authorization.\n\n- recommended mobile apps: __Google Authenticator__ or __Microsoft Authenticator__\n\n---\n\n__How does it work?__\n\nFirst, a user must generate a secret via`generate` input in the authenticator app. Then, for verification of the one-time generated password, you need to use the second input `verify,` which needs user secrets.\n\n### `generate` input/output\n\n__Input data__:\n\n- `user {String}` email or user/account name without special characters\n\n__Output data `object` with__:\n\n- `secret {String}` a generated secret which you must store for the specific user\n- `url {String}` an optimized url address for tokenization\n- `qrcode {String}` a link to the picture with QR code\n\n### `verify` input/outputs\n\n__Input data `object` with__:\n\n- `secret {String}`\n\n__Output data `object` with__:\n\n- `success {Boolean}` determines if the password is valid or not\n\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px 8px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.issuer\" config=\"required:1;innerlabel:1;placeholder:Enter a value\">Issuer</ui-component>\n\t\t\t\t<div class=\"help\">Your project or organization name</div>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div class=\"grid-2\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.time\" config=\"required:1;type:number;innerlabel:1;placeholder:Enter a value\">Time</ui-component>\n\t\t\t\t\t\t<div class=\"help\">Code validity in seconds</div>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\">\n\t\t\t\t\t<span>Issuer</span>\n\t\t\t\t\t<div>{{ value.issuer }}</div>\n\t\t\t\t</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"confirmationcode": "<script total>\n\n\texports.id = 'confirmationcode';\n\texports.name = 'Confirmation code';\n\texports.icon = 'ti ti-barcode';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Security';\n\texports.config = { count: 3, type: 'pin', length: 4, expire: '5 minutes', lock: '', limit: 1 };\n\texports.inputs = [{ id: 'create', name: 'Create' }, { id: 'verify', name: 'Verify' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar codes = {};\n\t\tvar timeout = null;\n\n\t\tvar refreshforce = function() {\n\t\t\ttimeout = null;\n\t\t\tinstance.status({ count: Object.keys(codes).length });\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(refreshforce, 500);\n\t\t};\n\n\t\tinstance.message_create = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar val = null;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'pin':\n\t\t\t\t\tval = U.random_number(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'token':\n\t\t\t\t\tval = GUID(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = U.random_number(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\tval = U.random_string(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'guid':\n\t\t\t\t\tval = GUID();\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar id = typeof(data) === 'string' ? data : data.id;\n\t\t\tvar tmp = codes[id];\n\t\t\tvar msg = {};\n\t\t\tvar now = NOW = new Date();\n\n\t\t\tmsg.success = true;\n\n\t\t\tif (tmp && tmp.locked && tmp.locked > NOW) {\n\t\t\t\tif (tmp.limit <= 0) {\n\t\t\t\t\tmsg.success = tmp.count > 0;\n\n\t\t\t\t\tif (msg.success)\n\t\t\t\t\t\ttmp.value = msg.value = val;\n\n\t\t\t\t\tmsg.slots = tmp.count;\n\t\t\t\t\tmsg.error = 'locked';\n\t\t\t\t\tmsg.limit = tmp.limit;\n\t\t\t\t} else {\n\t\t\t\t\ttmp.limit--;\n\t\t\t\t\ttmp.value = msg.value = val;\n\t\t\t\t\ttmp.slots = msg.slots = tmp.count;\n\t\t\t\t\ttmp.expire = now.add(config.expire);\n\t\t\t\t\tmsg.limit = tmp.limit;\n\t\t\t\t\ttmp.param = data.param;\n\t\t\t\t}\n\t\t\t\t$.send('output', msg);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmsg.value = val;\n\t\t\tmsg.slots = config.count;\n\t\t\tmsg.limit = config.limit;\n\n\t\t\tcodes[id] = { value: val, expire: now.add(config.expire), count: config.count, locked: config.lock ? now.add(config.lock) : null, limit: config.limit, param: data.param };\n\t\t\t$.send('output', msg);\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.message_verify = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar id = data.id;\n\t\t\tvar value = data.value || data.token || data.code || data.pin;\n\t\t\tvar tmp = codes[id];\n\t\t\tvar output = {};\n\n\t\t\toutput.success = false;\n\t\t\toutput.slots = 0;\n\n\t\t\tif (tmp) {\n\n\t\t\t\tif (tmp.value === value) {\n\t\t\t\t\tdelete codes[id];\n\t\t\t\t\toutput.success = true;\n\t\t\t\t\toutput.slots = tmp.count;\n\t\t\t\t\toutput.param = tmp.param;\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\trefresh();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttmp.count--;\n\n\t\t\t\toutput.slots = tmp.count;\n\t\t\t\toutput.error = 'invalid';\n\n\t\t\t\tif (!tmp.count) {\n\t\t\t\t\tdelete codes[id];\n\t\t\t\t\trefresh();\n\t\t\t\t}\n\n\t\t\t\t$.send('output', output);\n\t\t\t} else {\n\t\t\t\toutput.error = 'blocked';\n\t\t\t\t$.send('output', output);\n\t\t\t}\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tvar is = false;\n\t\t\tfor (var key in codes) {\n\t\t\t\tvar item = codes[key];\n\t\t\t\tif (item.expire < NOW) {\n\t\t\t\t\tdelete codes[key];\n\t\t\t\t\tis = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tis && refresh();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar locked = config.lock ? NOW.add(config.lock) : null;\n\n\t\t\tfor (var key in codes) {\n\t\t\t\tvar item = codes[key];\n\t\t\t\titem.locked = locked;\n\t\t\t}\n\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can help you with generating confirmation codes. Keep data structure for inputs according to the documentation below.\n\n### `create` input/output\n\n__Create input__:\n\n- `id {String}` identifier (email, phone number, identifier, etc.)\n- `param {String}` a custom parameter\n\n__Create output__:\n\n- `success {Boolean}` determines if the code is verified or not accroding to its identifier\n- `value {String}` a pin/code/token\n- `param {String}` a custom parameter (it sends only if the value is true)\n- `error {String}` (optional) a simple error identifier, it can contain:\n\t- `locked` the identifier is locked by the previous call\n\n### `verify` input/output\n\n__Verify input__:\n\n- `id {String}` identifier (email, phone number, identifier, etc.)\n- `value {String}` a pin/code/token\n\n__Verify output__:\n\n- `success {Boolean}` determines if the code is verified or not accroding to its identifier\n- `slots {Number}` free slots/attempts\n- `error {String}` (optional) a simple error identifier, it can contain:\n\t- `invalid` the code is invalid\n\t- `404` identifier not found\n\n---\n\n### Settings\n\n- __Lock__ prevents overwriting of the code according to the identifier\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:#confirmcodetypes;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div class=\"grid-2\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.length\" config=\"type:number;min:1;max:500;format:\">Length</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.count\" config=\"type:number;format:\">Count of attempts</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"grid-4\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.expire\" config=\"align:1;placeholder:5 minutes;required:1\">Expiration</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.lock\" config=\"align:1;placeholder:5 minutes\">Lock</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number;format:\">Max. calls per lock</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px 8px; font-size: 12px; }\n\t.CLASS footer > div:first-child { margin-bottom: 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>Pending: <ui-bind path=\"STATUS.count\" config=\"text;empty\" class=\"b\"></ui-bind></div>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\"><span>Type</span><div class=\"right b\">{{ value.type | cl('confirmcodetypes') }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Length</span><div class=\"right\">{{ value.length }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Expiration</span><div class=\"right\">{{ value.expire }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Lock</span><div class=\"right\">{{ value.lock | empty }}</div></div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tDEF.cl.confirmcodetypes = [{ id: 'pin', name: 'PIN' }, { id: 'guid', name: 'Guid' }, { id: 'token', name: 'Token' }, { id: 'number', name: 'Number' }, { id: 'string', name: 'String' }];\n</script>",
			"tresponse": "<script total>\n\n\texports.id = 'tresponse';\n\texports.name = 'Response';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-bullhorn';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'auto', code: 200, path: 'response' };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\texports.outputs = [{ id: 'output', name: 'Log' }];\n\texports.kind = 'output';\n\n\texports.make = function(instance, config) {\n\n\t\tvar nested = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tvar value = config.path ? (nested ? U.get(config.path, $.data) : $.data[config.path]) : $.data;\n\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\tif (value instanceof Array && value.length && value[0].error) {\n\t\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\t\tctrl.response.status = 400;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tctrl.status = 400;\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\tctrl.binary(typeof(value) === 'string' ? Buffer.from(value, 'utf8') : value, config.ctype);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\tctrl.invalid(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.html(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/html');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'xml':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.xml(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/xml');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', value);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tnested = config.path && config.path.includes('.') ? true : false;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond to an HTTP request.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;dirsource:auto|Auto,json|JSON,success|Success,error|Error,empty|Empty response,plain|Plain text,html|HTML,xml|XML,buffer|Buffer\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.type\" config=\"disabled:value === 'auto'\" class=\"m block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;align:1\">Path for reading value</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-bind path=\"?.type\" config=\"show:value==='buffer'\" class=\"m block hidden\">\n\t\t\t<div class=\"padding bg-smoke radius\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.ctype\" config=\"required:1;placeholder:text/html\">Content type</ui-component>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header ui-bind { font-family: var(--monospace); color: #FFF; margin-left: 4px; font-size: 12px; }\n\t.CLASS header ui-bind code { border-radius: var(--radius) 0 0 var(--radius); padding: 2px 3px; }\n\t.CLASS header ui-bind span { background-color: gray; border-radius: 0 var(--radius) var(--radius) 0; padding: 2px 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<code style=\"background:{{ if value.code >= 400 }}#E73323{{ else }}#4285F4{{ fi }}\">{{ value.code }}</code><span>{{ value.type }}</span>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n</body>",
			"sms": "<script total>\n\n\texports.id = 'sms';\n\texports.name = 'SMS';\n\texports.group = 'Total.js API';\n\texports.version = '1';\n\texports.icon = 'ti ti-tablet';\n\texports.author = 'Total.js';\n\texports.config = { token: '', to: '', from: '', body: '', isdata: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar cfg = $.variables(config, $.data);\n\t\t\tvar msg = {};\n\t\t\tmsg.to = cfg.to;\n\t\t\tmsg.from = cfg.from;\n\n\t\t\tvar data = cfg.isdata ? $.data : cfg.body;\n\n\t\t\tif (cfg.isdata) {\n\t\t\t\tif (cfg.path)\n\t\t\t\t\tdata = cfg.path.includes('.') ? U.get(data, cfg.path) : data[cfg.path];\n\t\t\t}\n\n\t\t\tmsg.body = data ? data.toString().toASCII() : '';\n\t\t\t$.destroy();\n\n\t\t\tif (msg.body) {\n\t\t\t\tvar api = API('TotalAPI', 'sms', msg).callback(err => instance.status({ response: err ? err.toString() : '' }));\n\t\t\t\tapi.options.token = cfg.token;\n\t\t\t} else\n\t\t\t\tinstance.status({ response: 'Invalid message' });\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { color: red; border-top: 1px solid #E0E0E0; padding-top: 8px; margin-top: 8px; }\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component sends a SMS message.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:*\">Total API token</ui-component>\n\t\t<div class=\"help\">Supports dynamic variables in the form <code>{key}</code>. Generate your token on <a href=\"https://platform.totaljs.com/?open=api\" target=\"_blank\">https://platform.totaljs.com</a> - Total.js API Services.</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.from\" config=\"required:1;monospace:1\">From</ui-component>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code>.</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.to\" config=\"required:1;monospace:1\">To</ui-component>\n\t\t\t\t<div class=\"help\"><b>International format</b>. Supports dynamic variables in the form <code>{key}</code>.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.isdata\" config=\"type:checkbox\" class=\"b mt5\">Send incoming message data only</ui-component>\n\t</div>\n\t<ui-bind path=\"?.isdata\" config=\"hide\" class=\"hidden\">\n\t\t<hr class=\"nmt nmb\" />\n\t\t<div class=\"padding\">\n\t\t\t<ui-component name=\"input\" path=\"?.body\" config=\"maxlength:500;required:1\">Message</ui-component>\n\t\t\t<div class=\"help m\">Supports dynamic variables in the form <code>{key}</code>.</div>\n\t\t</div>\n\t</ui-bind>\n\t<ui-bind path=\"?.isdata\" config=\"show\" class=\"hidden\">\n\t\t<div class=\"padding npt\">\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"maxlength:500;placeholder:e.g. message\">Path for reading message</ui-component>\n\t\t</div>\n\t</ui-bind>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!$CONFIG\" config=\"template\" class=\"block\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div><span class=\"gray\">From:</span> {{ value.from }}</div>\n\t\t\t\t<div><span class=\"gray\">To:</span> {{ value.to }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t\t<ui-bind path=\"!$STATUS.response\" config=\"text;show\" class=\"error hidden block\"></ui-bind>\n\t</footer>\n</body>",
			"logger": "<script total>\n\n\texports.id = 'logger';\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '2';\n\texports.icon = 'ti ti-search';\n\texports.author = 'Total.js';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.schema = instance.main.$schema.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || instance.href() || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:*\">Total API token</ui-component>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.app\">App name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.reference\">Reference</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\">URL address</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-component name=\"input\" path=\"?.message\" config=\"required:1;maxlength:200\">Message</ui-component>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS.response\" config=\"text;show\" class=\"error hidden\"></ui-bind>\n\t</footer>\n</body>",
			"code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, name: 'Code', code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n\nTo send data to the default output use `send(somedata);`\nTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n- first output--> `send(somedata)` or `$.send('output', somedata)`\n- second output --> `$.send('output2', somedata)`\n- ...\n- 5th output --> `$.send('output5', somedata)`\n- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-10 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.name\">Name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.outputs\" config=\"type:number;format:\">Number of outputs</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></ui-component>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\tTOUCH(function(exports, init) {\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar count = exports.instance.config.outputs;\n\t\t\t\tfor (let i = 1; i <= count; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + (i === 1 ? '' : i), name: (count === 1 ? 'Output' : 'Output #' + i) });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"youridentifier": "<script total>\n\n\t// exports.id = 'youridentifier';\n\texports.name = 'UpperCase';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Custom';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\t// when the component is created\n\texports.make = function(instance, config) {\n\n\t\t// handler when new message is exist\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif(!data){\n\t\t\t\t$.send('error', 'Invalid input: Expected a string')\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(typeof(data) !== 'string'){\n\t\t\t\t$.send('error', 'Input must be string')\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$.send('output', data.toUpperCase());\n\t\t\t// or $.send('error', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\t// handler when settings is updated or changed\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component put a string to upper case\n</readme>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.redraw = function() {\n\t\t\t// Flow design has been redrawn\n\t\t\tconsole.log(name, 'redraw');\n\t\t};\n\n\t\texports.move = function() {\n\t\t\t// Instance has changed position\n\t\t\tconsole.log(name, 'move');\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>",
			"cliqm28c89": "<script total>\n\n\texports.name = 'String Method';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.version = '1.2';\n\texports.group = 'Custom';\n\texports.config = { method: 'lower' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\t// when the component is created\n\texports.make = function(instance, config) {\n\n\n\t\t// handler when new message is exist\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif(!data){\n\t\t\t\t$.send('error', 'Invalid input: Expected a string')\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(typeof(data) !== 'string'){\n\t\t\t\t$.send('error', 'Input must be string')\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch(config.method){\n\t\t\t\tcase 'lower':\n\t\t\t\t\t$.send('output', data.toLowerCase());\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'upper':\n\t\t\t\t\t$.send('output', data.toUpperCase());\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'slug':\n\t\t\t\t\t$.send('output', data.slug());\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'search':\n\t\t\t\t\t$.send('output', data.toSearch());\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\t// handler when settings is updated or changed\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t\tinstance.status({ method: config.method });\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component put a string to upper case\n</readme>\n\n<settings>\n\t<div class=\"grid-2\">\n\t\t<div class=\"padding\">\n\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"placeholder:Choose a method;dirsource:upper|Uppercase,lower|Lower,slug|Slug,search|Search\" class=\"m\">Method</ui-component>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\tfooter {\n\t\tpadding: 10px 8px;\n\t}\n\n\tfooter span b {\n\t\tcolor: blue;\n\t}\n</style>\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<span> <b>Method:</b>\n\t\t\t<ui-bind path=\"STATUS.method\" config=\"text:value.toUpperCase()\"></ui-bind>\n\t\t</span>\n\t</footer>\n</body>",
			"dataparser": "<script total>\n\n\texports.id = 'dataparser';\n\texports.name = 'Data parser';\n\texports.icon = 'ti ti-compress';\n\texports.group = 'Transformations';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { type: '1', convert: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar streamer = null;\n\t\tvar reg = /,|;/;\n\n\t\tvar newmessage = function(data) {\n\n\t\t\tif (config.convert) {\n\t\t\t\tif (config.type === '1') {\n\t\t\t\t\tvar m = data.match(reg);\n\t\t\t\t\tdata = data.parseCSV(m ? m[0] : ',');\n\t\t\t\t} else\n\t\t\t\t\tdata = data.parseXML(true);\n\t\t\t}\n\n\t\t\tinstance.newmessage(data).send('output');\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (typeof(data) === 'string')\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\n\t\t\t$.destroy();\n\t\t\tdata && streamer && streamer(data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tswitch (config.type) {\n\t\t\t\tcase '1':\n\t\t\t\t\tstreamer = U.streamer('\\n', newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '2':\n\t\t\t\t\tstreamer = U.streamer(config.beg, config.end, newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstreamer = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component can parse newline data or begin/end phrases in the buffer or string. In addition, it can help with parsing XML or CSV files.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"choose\" path=\"?.type__selector:div\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\">\n\t\t\t\t<i class=\"ti ti-arrow-down ti-sync\"></i>\n\t\t\t\t<span>CSV</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\">\n\t\t\t\t<i class=\"ti ti-code\"></i>\n\t\t\t\t<span>XML</span>\n\t\t\t</div>\n\t\t</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.convert\" config=\"type:checkbox\">Convert parsed value to the object</ui-component>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<ui-bind path=\"?.type\" config=\"show:value==='2'\" class=\"padding hidden block\">\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"ti ti-cog\"></i>Advanced settings</label>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.beg\" config=\"required:1;placeholder:&lt;PRODUCT&gt;\">Begin phrase</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.end\" config=\"required:1;placeholder:&lt;/PRODUCT&gt;\">End phrase</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</ui-bind>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; text-align: center; }\n\t.CLASS footer ui-bind { font-family: var(--monospace); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div>{{ if value.type === '1' }}New line{{ else }}<span>{{ value.beg }}</span> - <span>{{ value.end }}</span>{{ fi }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"tschema": "<script total>\n\n\texports.id = 'tschema';\n\texports.name = 'Data schema';\n\texports.icon = 'ti ti-check-circle';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { schema: '*name:String, *email:Email', partial: false, strerr: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar schema;\n\n\t\tinstance.message = function($) {\n\t\t\tvar output = schema.transform($.data, config.partial);\n\t\t\tif (output.error)\n\t\t\t\t$.send('error', config.strerr ? output.error.toString() : output.error);\n\t\t\telse\n\t\t\t\t$.send('output', output.response);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tschema = config.schema.toJSONSchema();\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component `Schema` can very quickly check incoming data according to the defined schema.\n\n__Supported types__:\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.schema\" config=\"placeholder:name\\:Name, *email\\:Email\">Schema</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.schema\" config=\"text\" class=\"block monospacce\"></ui-bind>\n\t</footer>\n</body>",
			"datasorter": "<script total>\n\n\texports.id = 'datasorter';\n\texports.name = 'Data sorter';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-vector';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn(instance, $);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.status(e + '');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t}\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\ttry {\n\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data,data=$.data,refs=$.refs,repo=$.repo;' + builder.join('') + '$.send(\\'error\\');');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t\tinstance.status('');\n\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\n\t\t};\n\n\t\t// Due to redrawing of outputs\n\t\tsetTimeout(instance => instance && instance.configure(), 1500, instance);\n\t};\n\n</script>\n\n<readme>\nThe component sorts data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n\t.CLASS footer > ui-bind { padding: 10px; font-size: 12px; }\n\t.CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n\t.CLASS-settings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASS-settings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASS-settings\">\n\t\t<ui-component name=\"listform\" path=\"?.conditions\" config=\"autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"item\"><i class=\"ti ti-arrow-right\"></i>{{ name }}</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1;innerlabel:1__''\" class=\"m\">Name</ui-component>\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.if\" config=\"required:1;innerlabel:1;monospace:1\" default=\"'value != null'\">Condition</ui-component>\n\t\t\t\t\t<div class=\"help m\"><i class=\"ti ti-exclamation-triangle\"></i><code>value</code> represents a message data and <code>refs</code> represents references. Example: <code>value.age > 18</code></div>\n\t\t\t\t\t<ui-component name=\"validate\" path=\"?\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"ti ti-file-code\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</ui-component>\n\t\t\t\t</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Create rule</button></div>\n\t\t\t</script>\n\n\t\t</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS\" config=\"text;show\" class=\"red\"></ui-bind>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar items = exports.config.conditions;\n\t\t\t\tfor (var i = 0; i < items.length; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + i, name: items[i].name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"model": "<script total>\n\n\texports.id = 'model';\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'ti ti-file';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\tval = val.parseDate();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!(val instanceof Date) || isNaN(val))\n\t\t\t\t\t\t\tval = null;\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tif (val) {\n\n\t\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Model name</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"hellip\"><span class=\"edit label\" data-edit=\"exec:tmprestmodel.label;required:1\">{{ m.label }}</span><span class=\"monospace edit key\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</span></div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name .label { background-color: #000; outline: 0; padding: 2px 3px; color: #FFF; }\n\t.CLASS-settings figure .name .key { font-weight: bold; margin-left: 5px; outline: 0; }\n\t.CLASS-settings figure .name > div:first-child { outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .name .label { background-color: #FFF; color: #000; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"ti ti-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), label: 'Name', name: 'propname', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.label = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.label = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- {0} `{1} {{2}}`'.format(m.label, m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>",
			"taskaction": "<script total>\n\texports.id = 'taskaction';\n\texports.name = 'Task Query';\n\texports.group = 'Actions';\n\texports.version = '1.0';\n\texports.icon = 'ti ti-send';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.config = {\n\t\taction: 'add',\n\t\ttaskId: '',\n\t\ttitle: '',\n\t\tdescription: '',\n\t\tstatus: '',\n\t\tpriority: '',\n\t\terror_output: false,\n\t\tautoresponse: true ,\n\t\tpath: 'response'\n\t};\n\texports.outputs = [\n\t\t{ id: 'output', name: 'Output' },\n\t\t{ id: 'error', name: 'Error Output', schema: true }\n\t];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n    instance.message = function($){\n\n        var data = $.data;\n        var output = {};\n        var error = null;\n        var parameter = parseInt(data.params.id);\n\n\t\t// Helper function to send success response\n\t\tfunction sendResponse(response) {\n\t\t\tif ($.refs.controller && config.autoresponse) {\n\t\t\t\t$.refs.controller.json(response);\n\t\t\t}\n\t\t\t$.send('output', response);\n\t\t}\n\n        // Perform actions based on the selected action type\n        switch (config.action) {\n            case 'add':\n                output = {\n                    action: 'add',\n                    task: data\n                };\n                break;\n            case 'update':\n                output = {\n                    action: 'update',\n                    taskId: parameter,\n                    task: data.body\n                };\n                break;\n            case 'delete':\n                output = {\n                    action: 'delete',\n                    taskId: parameter,\n                    message: `Success deleting task with ID ${parameter}`\n                };\n                break;\n            default:\n                error = 'Invalid action selected';\n                break;\n        }\n\n        // If there is an error, send it to both the error output and HTTP response (if applicable)\n        if (error) {\n            if ($.controller) {\n                $.controller.json({ error: error });\n            }\n            instance.send('error', { error: error });\n            return;\n        }\n\n        // Send the output to the flowchart output\n        sendResponse(output);\n    }\n\n    instance.configure = function() {\n        // Setup default action jika tidak ada\n        if (!config.action)\n            config.action = 'add';\n    };\n\n    instance.configure();\n};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 10px; }\n\t.CLASS button { width: 100%; height: 30px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.action\" config=\"dirsource:add|Add Task,update|Update Task,delete|Delete Task;required:1\">Action</ui-component>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'update' || value === 'delete'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.taskId\" config=\"type:text;placeholder:Enter Task ID;required:1\">Task ID</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'add' || value === 'update'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.title\" config=\"type:text;placeholder:Enter Task Title\">Title</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.description\" config=\"type:text;placeholder:Enter Task Description\">Description</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.status\" config=\"type:text;placeholder:Enter Task Status\">Status</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.priority\" config=\"type:text;placeholder:Enter Task Priority\">Priority</ui-component>\n\t\t</ui-bind>\n\n\t\t<!-- Tambahkan setting untuk autoresponse -->\n\t\t<ui-component name=\"checkbox\" path=\"?.autoresponse\" config=\"title:Enable Auto HTTP Response\">Auto HTTP Response</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThis component performs actions on tasks, such as adding, updating, and deleting, with error handling and validation. Now supports auto HTTP response when enabled.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>\n"
		},
		"design": {
			"ilzgfigsc": {
				"id": "ilzgfigsc",
				"config": {
					"random": false,
					"type": "string",
					"data": "Hello World!!",
					"restart": false,
					"prompt": false
				},
				"x": 16.5,
				"y": 103.5,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "ilzgfl3tp",
							"index": "input"
						},
						{
							"id": "ilzgfokan",
							"index": "input",
							"color": "#E8357E"
						},
						{
							"id": "ilzgfqqmd",
							"index": "create",
							"color": "#73197B"
						}
					]
				}
			},
			"ilzgfii8u": {
				"id": "ilzgfii8u",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 531.9444580078125,
				"y": 24.913196563720703,
				"component": "print",
				"connections": {}
			},
			"ilzgfl3tp": {
				"id": "ilzgfl3tp",
				"config": {
					"operation": "lowercase"
				},
				"x": 324,
				"y": 35,
				"component": "stringoperations",
				"connections": {
					"output": [
						{
							"id": "ilzgfii8u",
							"index": "input"
						}
					]
				}
			},
			"ilzgfokan": {
				"id": "ilzgfokan",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 117.91665649414062,
				"y": 312.9166831970215,
				"component": "print",
				"connections": {}
			},
			"ilzgfqqmd": {
				"id": "ilzgfqqmd",
				"config": {
					"count": 3,
					"type": "pin",
					"length": 4,
					"expire": "5 minutes",
					"lock": "",
					"limit": 1
				},
				"x": 311.5,
				"y": 210.5,
				"component": "confirmationcode",
				"connections": {
					"output": [
						{
							"id": "ilzggkato",
							"index": "input"
						},
						{
							"id": "ilzggjtw9",
							"index": "input"
						}
					]
				}
			},
			"ilzggjtw9": {
				"id": "ilzggjtw9",
				"config": {
					"token": "",
					"type": "info",
					"message": "",
					"reference": "",
					"url": ""
				},
				"x": 687.953125,
				"y": 178.9375,
				"component": "logger",
				"connections": {}
			},
			"ilzggkato": {
				"id": "ilzggkato",
				"config": {
					"token": "",
					"to": "",
					"from": "",
					"body": "",
					"isdata": false
				},
				"x": 706.953125,
				"y": 309.953125,
				"component": "sms",
				"connections": {}
			},
			"ilzggqn2r": {
				"id": "ilzggqn2r",
				"config": {
					"outputs": 3,
					"name": "Proses Login",
					"code": "switch(data.cmd) {\n\tcase 'admin':\n\t\tif(data.username == 'owner') {\n\t\t\t$.send('output', { value: 'Berhasil Login!', data: 'Anda login sebagai Admin Owner'})\n\t\t\tbreak;\n\t\t}else if(data.username == 'kasir'){\n\t\t\t$.send('output', { value: 'Berhasil Login!', data: 'Anda login sebagai Admin Kasir'})\n\t\t\tbreak;\n\t\t}else{\n\t\t\t$.send('output3', { value: 'Login Gagal!', data: 'Username anda tidak terdaftar'})\n\t\t\tbreak;\n\t\t}\n\t\t// $.send('output', data);\n\t\t// break;\n\tcase 'pelanggan':\n\t\tif(data.username == 'pelanggan') {\n\t\t\t$.send('output2', { value: 'Berhasil Login!', data: 'Anda login sebagai Pelanggan'})\n\t\t\tbreak;\n\t\t}else{\n\t\t\t$.send('output3', { value: 'Login Gagal!', data: 'Username anda tidak terdaftar'})\n\t\t\tbreak;\n\t\t}\n\t\t// $.send('output2', data);\n\t\t// break;\n}\n\n// $.send('output', { value: 'New Message', data: data });"
				},
				"x": 255,
				"y": 610,
				"component": "code",
				"connections": {
					"output": [
						{
							"id": "ilzggu6ej",
							"index": "input"
						}
					],
					"output2": [
						{
							"id": "ilzghb7ug",
							"index": "input"
						}
					],
					"output3": [
						{
							"id": "ilzgi4mrl",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					},
					{
						"id": "output2",
						"name": "Output #2"
					},
					{
						"id": "output3",
						"name": "Output #3"
					}
				]
			},
			"ilzggu4ao": {
				"id": "ilzggu4ao",
				"config": {
					"random": false,
					"type": "object",
					"data": "{ \n\tcmd: 'admin',\n\tusername: 'owneruiuuiu'\n}",
					"restart": false,
					"prompt": false
				},
				"x": 15.000000000000002,
				"y": 608,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "ilzggqn2r",
							"index": "input"
						}
					]
				}
			},
			"ilzggu6ej": {
				"id": "ilzggu6ej",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 515,
				"y": 538,
				"component": "print",
				"connections": {}
			},
			"ilzghb7ug": {
				"id": "ilzghb7ug",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 509,
				"y": 658,
				"component": "print",
				"connections": {}
			},
			"ilzgi4mrl": {
				"id": "ilzgi4mrl",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 488,
				"y": 780,
				"component": "print",
				"connections": {}
			},
			"ilzgica8i": {
				"id": "ilzgica8i",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false,
					"prompt": false
				},
				"x": 910.5,
				"y": 84.5,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "ilzgicdxe",
							"index": "input"
						}
					]
				}
			},
			"ilzgicdxe": {
				"id": "ilzgicdxe",
				"config": {
					"outputs": 2,
					"name": "Code",
					"code": "// instance {FlowStreamInstance};\n// $ {FlowStreamMessage};\n// vars {Object};\n// repo {Object};\n// data {String/Number/Boolean/Date/Buffer/Object};\n// $.send('output', data); // or simply send(data); which uses the first output\n// $.destroy();\n// $.throw(err);\n\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\n\n// $.send('output', data);\n$.destroy();"
				},
				"x": 1160.5,
				"y": 86.5,
				"component": "code",
				"connections": {
					"output2": [
						{
							"id": "ilzgicwff",
							"index": "input"
						}
					],
					"output": [
						{
							"id": "ilzgictzc",
							"index": "input"
						},
						{
							"id": "ilzgicosj",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					},
					{
						"id": "output2",
						"name": "Output #2"
					}
				]
			},
			"ilzgicosj": {
				"id": "ilzgicosj",
				"config": {
					"outputs": 2,
					"name": "Code",
					"code": "// instance {FlowStreamInstance};\n// $ {FlowStreamMessage};\n// vars {Object};\n// repo {Object};\n// data {String/Number/Boolean/Date/Buffer/Object};\n// $.send('output', data); // or simply send(data); which uses the first output\n// $.destroy();\n// $.throw(err);\n\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\n\n// $.send('output', data);\n$.destroy();"
				},
				"x": 1389.5,
				"y": 28.5,
				"component": "code",
				"connections": {
					"output": [
						{
							"id": "ilzgictzc",
							"index": "input"
						}
					],
					"output2": [
						{
							"id": "ilzgicwff",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output",
						"name": "Output #1"
					},
					{
						"id": "output2",
						"name": "Output #2"
					}
				]
			},
			"ilzgictzc": {
				"id": "ilzgictzc",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1649.5,
				"y": 110.5,
				"component": "print",
				"connections": {}
			},
			"ilzgicwff": {
				"id": "ilzgicwff",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1648.5,
				"y": 198.5,
				"component": "print",
				"connections": {}
			},
			"ilzglygq0": {
				"id": "ilzglygq0",
				"config": {
					"method": "lower"
				},
				"x": 1285.9375915527344,
				"y": 416.9270896911621,
				"component": "youridentifier",
				"connections": {
					"output": [
						{
							"id": "ilzglyrx2",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzglytjo",
							"index": "input"
						}
					]
				}
			},
			"ilzglyosd": {
				"id": "ilzglyosd",
				"config": {
					"random": false,
					"type": "string",
					"data": "lllll",
					"restart": false,
					"prompt": false
				},
				"x": 1050.9549255371094,
				"y": 429.93056869506836,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "ilzglygq0",
							"index": "input"
						}
					]
				}
			},
			"ilzglyrx2": {
				"id": "ilzglyrx2",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1584.9653930664062,
				"y": 383.9409942626953,
				"component": "print",
				"connections": {}
			},
			"ilzglytjo": {
				"id": "ilzglytjo",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1602.9341430664062,
				"y": 526.9618225097656,
				"component": "print",
				"connections": {}
			},
			"ilzgmlnrl": {
				"id": "ilzgmlnrl",
				"config": {
					"method": "slug"
				},
				"x": 1292.986138254404,
				"y": 642.9861450195312,
				"component": "cliqm28c89",
				"connections": {
					"output": [
						{
							"id": "ilzgn0ehg",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzgn0k17",
							"index": "input"
						}
					]
				}
			},
			"ilzgn05my": {
				"id": "ilzgn05my",
				"config": {
					"random": false,
					"type": "string",
					"data": "hai fauzi fadillah",
					"restart": false,
					"prompt": false
				},
				"x": 1061.9618835449219,
				"y": 602.9340515136719,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "ilzgmlnrl",
							"index": "input"
						}
					]
				}
			},
			"ilzgn0ehg": {
				"id": "ilzgn0ehg",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1585.9375915527344,
				"y": 665.954891204834,
				"component": "print",
				"connections": {}
			},
			"ilzgn0k17": {
				"id": "ilzgn0k17",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1546.979248046875,
				"y": 812.9688110351562,
				"component": "print",
				"connections": {}
			},
			"im0dnu7bi": {
				"id": "im0dnu7bi",
				"config": {
					"conditions": [
						{
							"if": "value != null",
							"name": "dasdasd"
						},
						{
							"if": "value != null",
							"name": "zcbwefdf"
						}
					]
				},
				"x": 509.9652947485447,
				"y": 988.9583435058594,
				"component": "datasorter",
				"connections": {},
				"outputs": [
					{
						"id": "output0",
						"name": "dasdasd"
					},
					{
						"id": "output1",
						"name": "zcbwefdf"
					},
					{
						"id": "error",
						"name": "404"
					}
				]
			},
			"im0dx1gmv": {
				"id": "im0dx1gmv",
				"config": {
					"name": "Model",
					"path": "",
					"schema": [],
					"rewrite": true
				},
				"x": 829.9826592504978,
				"y": 988.9757080078125,
				"component": "model",
				"connections": {}
			},
			"im0n6wq1p": {
				"id": "im0n6wq1p",
				"config": {
					"action": "update",
					"taskId": "213132",
					"title": "Finish project report",
					"description": "Complete the final report for the project and submit it.",
					"status": "nggak jadi",
					"priority": "low",
					"error_output": false,
					"autoresponse": true,
					"path": "response",
					"datasource": ""
				},
				"x": 281,
				"y": 1167,
				"component": "taskaction",
				"connections": {}
			}
		},
		"sources": {},
		"size": 133466,
		"variables2": {},
		"directory": "C:\\DAD Project\\ToDoListWebsite\\flow\\flowstream\\"
	},
	"fInzUs51cs61f": {
		"id": "fInzUs51cs61f",
		"name": "Test API",
		"author": "",
		"version": "",
		"icon": "ti ti-microchip",
		"reference": "",
		"group": "",
		"url": "https://",
		"cloning": true,
		"color": "",
		"readme": "",
		"memory": 0,
		"proxypath": "/api/",
		"variables": {},
		"dtcreated": "2024-08-06T01:46:50.811Z",
		"asfiles": false,
		"worker": "fork",
		"origin": "http://localhost:8000",
		"paused": true,
		"dtupdated": "2024-08-06T02:34:44.846Z",
		"sandbox": false,
		"components": {
			"print": "<script total>\n\n\texports.id = 'print';\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '5';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = '<Buffer ' + data.toString('hex').substring(0, 10) + '...';\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tif (output) {\n\t\t\t\toutput = JSON.stringify(output, serializer);\n\t\t\t\tinstance.status(output, 200);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-bind { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .json { white-space: pre; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"html pre:Thelpers.jsonformat(JSON.stringify(JSON.parse(value), null, '\\t'));show:value && value.length > 0\" class=\"hidden selectable block\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"ti ti-window\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(JSON.parse(laststatus), null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
			"read": "<script total>\n\n\texports.id = 'read';\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'ti ti-filter';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [], keep: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item, value) {\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'empty':\n\t\t\t\t\treturn value;\n\t\t\t\tcase 'uid':\n\t\t\t\t\treturn UID();\n\t\t\t\tcase 'guid':\n\t\t\t\t\treturn GUID();\n\t\t\t\tcase 'upper':\n\t\t\t\t\treturn value == null ? '' : value.toString().toUpperCase();\n\t\t\t\tcase 'lower':\n\t\t\t\t\treturn value == null ? '' : value.toString().toLowerCase();\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\treturn value == null ? '' : value.toString().capitalize();\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn U.parseFloat(value);\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof(value) === 'string' ? value : value == null ? '' : value.toString();\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBoolean(value);\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (value instanceof Date)\n\t\t\t\t\t\treturn value;\n\t\t\t\t\treturn value == null ? new Date() : typeof(value) === 'number' ? new Date(value) : value.toString().parseDate();\n\t\t\t\tcase 'tobase64':\n\t\t\t\tcase 'tohex':\n\t\t\t\t\treturn value instanceof Buffer ? value.toString(item.convert.substring(2)) : value == null ? '' : Buffer.from(value).toString(item.convert.substring(2));\n\t\t\t\tcase 'frombase64':\n\t\t\t\tcase 'fromhex':\n\t\t\t\t\treturn typeof(value) === 'string' ? (value.indexOf(':') === -1 ? Buffer.from(value, item.convert.substring(4)) : value.base64ToBuffer()) : null;\n\t\t\t\tcase 'tojson':\n\t\t\t\t\treturn JSON.stringify(value);\n\t\t\t\tcase 'fromjson':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.parseJSON(true) : null;\n\t\t\t\tcase 'ascii':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.toASCII() : value == null ? '' : value.toString().toASCII();\n\t\t\t\tcase 'slug':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.slug() : value == null ? '' : value.toString().slug();\n\t\t\t\tcase 'crc32':\n\t\t\t\tcase 'crc32unsigned':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.hash(item.convert) : value == null ? '' : value.toString().hash(item.convert);\n\t\t\t\tcase 'md5':\n\t\t\t\tcase 'sha1':\n\t\t\t\tcase 'sha256':\n\t\t\t\tcase 'sha512':\n\t\t\t\t\treturn value == null ? '' : F.Crypto.createHash(item.convert).update(value instanceof Buffer ? value : value.toString()).digest('hex');\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tvar obj = {};\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = item.pathfrom.indexOf('.') === -1 ? data[item.pathfrom] : U.get(data, item.pathfrom);\n\n\t\t\t\tif (item.convert && item.convert !== 'empty')\n\t\t\t\t\tval = convert(item, val);\n\n\t\t\t\tif (item.pathto) {\n\t\t\t\t\tif (item.pathto.indexOf('.') === -1)\n\t\t\t\t\t\tobj[item.pathto] = val;\n\t\t\t\t\telse\n\t\t\t\t\t\tU.set(obj, item.pathto, val);\n\t\t\t\t} else {\n\t\t\t\t\tobj = val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.keep) {\n\t\t\t\tfor (let key in obj)\n\t\t\t\t\t$.data[key] = obj[key];\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\t\t\t\tif (config.path && config.rewrite)\n\t\t\t\t\tU.set($.data, config.path, obj);\n\t\t\t\t$.send('output', obj);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component reads specific values according to the configured map.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { width: 20%; line-height: 23px; float: left; padding: 0 5px; cursor: pointer; }\n\t.CLASS-settings figure .path { width: 35%; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; }\n\t.CLASS-settings figure .to div { color: #4285F4; }\n\t.CLASS-settings figure .from div { color: #B9261A; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer is=\"is-footer\" path=\"CONFIG.path\" config=\"show;text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<ui-bind path=\"?.path\" config=\"hide\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.keep\" config=\"type:checkbox\"><b>Keep the message data</b> and transform only specific paths</ui-component>\n\t\t\t\t<hr />\n\t\t\t</ui-bind>\n\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpread.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpread.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path from\">\n\t\t\t\t\t\t\t<span>From</span><div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpread.path;required:1\">{{ m.pathfrom }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path to\">\n\t\t\t\t\t\t\t<span>To</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpread.path;selectall:1\">{{ m.pathto }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpread.convert\">{{ m.convert | tmpreadconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { pathfrom: 'Temperature', pathto: 'temperature', convert: 'empty' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpread;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem['path' + opt.element.attrd('type')] = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'empty', name: 'No convertor' });\n\t\t\t\ttmp.convertors.push({ id: 'upper', name: 'Upper case' });\n\t\t\t\ttmp.convertors.push({ id: 'lower', name: 'Lower case' });\n\t\t\t\ttmp.convertors.push({ id: 'capitalize', name: 'Capitalize case' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'To number' });\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'To string' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'To boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'To date' });\n\t\t\t\ttmp.convertors.push({ id: 'ascii', name: 'Remove diacritics' });\n\t\t\t\ttmp.convertors.push({ id: 'slug', name: 'To slug' });\n\t\t\t\ttmp.convertors.push({ id: 'md5', name: 'To MD5' });\n\t\t\t\ttmp.convertors.push({ id: 'sha1', name: 'To SHA1' });\n\t\t\t\ttmp.convertors.push({ id: 'sha256', name: 'To SHA256' });\n\t\t\t\ttmp.convertors.push({ id: 'sha512', name: 'To SHA512' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32', name: 'To CRC32' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32unsigned', name: 'To CRC32 unsigned' });\n\t\t\t\ttmp.convertors.push({ id: 'tobase64', name: 'To BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'tohex', name: 'To Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'tojson', name: 'To JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'frombase64', name: 'From BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'fromhex', name: 'From Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'fromjson', name: 'From JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'uid', name: 'Generate UI' + 'D' });\n\t\t\t\ttmp.convertors.push({ id: 'guid', name: 'Generate GUI' + 'D' });\n\n\t\t\t\tThelpers.tmpreadconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpread = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"tapirouter": "<script total>\n\n\texports.id = 'tapirouter';\n\texports.name = 'API Router';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: 'response', schema: [{ id: 'o1984', name: 'users_read/{id}' }] };\n\texports.outputs = [];\n\texports.kind = 'action';\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data.payload || $.data.body;\n\t\t\tif (data && typeof(data.schema) === 'string') {\n\n\t\t\t\tvar index;\n\t\t\t\tvar schema = $.refs.schema;\n\n\t\t\t\tif (!schema) {\n\t\t\t\t\tlet tmp = {};\n\t\t\t\t\tlet meta = data.schema;\n\t\t\t\t\tindex = meta.indexOf('?');\n\t\t\t\t\ttmp.query = index === -1 ? '' : meta.substring(index + 1);\n\n\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\tmeta = meta.substring(0, index);\n\n\t\t\t\t\tindex = meta.indexOf('/');\n\t\t\t\t\ttmp.id = index === -1 ? meta : meta.substring(0, index);\n\t\t\t\t\ttmp.params = index === -1 ? EMPTYARRAY : meta.substring(index + 1).split('/').trim();\n\t\t\t\t\t$.refs.schema = tmp;\n\t\t\t\t\tschema = tmp;\n\t\t\t\t}\n\n\t\t\t\tvar meta = compiled[schema.id];\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tif (schema.params.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = schema.params[i];\n\n\t\t\t\t\t\tlet payload = $.data;\n\t\t\t\t\t\tpayload.query = schema.query ? DEF.parsers.urlencoded(schema.query) : {};\n\t\t\t\t\t\tpayload.payload = data.data;\n\t\t\t\t\t\tpayload.params = params;\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.data[config.path] = [{ id: '400', error: 'Invalid schema data' }];\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data[config.path] = [{ id: '404', error: '404' }];\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component routes incoming Total.js API data according to the defined API schema. The component extends input data (query, payload and params) with parsed data.\n\n__Input & Output data__:\n\n```js\n{\n\t// REQUIRED payload:\n\tpayload: {\n\t\tschema: 'schema_name/{param_1}/{param_2}?query=arguments',\n\t\tdata: {} // optional, request payload\n\t},\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed UA\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\nIn the case of  `error`, the input data is extended by the `response` property with an error.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tapirouter.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"ti ti-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"tresponse": "<script total>\n\n\texports.id = 'tresponse';\n\texports.name = 'Response';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-bullhorn';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'auto', code: 200, path: 'response' };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\texports.outputs = [{ id: 'output', name: 'Log' }];\n\texports.kind = 'output';\n\n\texports.make = function(instance, config) {\n\n\t\tvar nested = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tvar value = config.path ? (nested ? U.get(config.path, $.data) : $.data[config.path]) : $.data;\n\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\tif (value instanceof Array && value.length && value[0].error) {\n\t\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\t\tctrl.response.status = 400;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tctrl.status = 400;\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\tctrl.binary(typeof(value) === 'string' ? Buffer.from(value, 'utf8') : value, config.ctype);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\tctrl.invalid(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.html(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/html');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'xml':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.xml(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/xml');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', value);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tnested = config.path && config.path.includes('.') ? true : false;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond to an HTTP request.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;dirsource:auto|Auto,json|JSON,success|Success,error|Error,empty|Empty response,plain|Plain text,html|HTML,xml|XML,buffer|Buffer\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.type\" config=\"disabled:value === 'auto'\" class=\"m block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;align:1\">Path for reading value</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-bind path=\"?.type\" config=\"show:value==='buffer'\" class=\"m block hidden\">\n\t\t\t<div class=\"padding bg-smoke radius\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.ctype\" config=\"required:1;placeholder:text/html\">Content type</ui-component>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header ui-bind { font-family: var(--monospace); color: #FFF; margin-left: 4px; font-size: 12px; }\n\t.CLASS header ui-bind code { border-radius: var(--radius) 0 0 var(--radius); padding: 2px 3px; }\n\t.CLASS header ui-bind span { background-color: gray; border-radius: 0 var(--radius) var(--radius) 0; padding: 2px 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<code style=\"background:{{ if value.code >= 400 }}#E73323{{ else }}#4285F4{{ fi }}\">{{ value.code }}</code><span>{{ value.type }}</span>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n</body>",
			"troute": "<script total>\n\n\texports.id = 'troute';\n\texports.name = 'Route';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-exchange';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, user: 0, send: 'all', reader: '-' };\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.close = function() {\n\t\t\tprev && prev.remove();\n\t\t\tprev = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [];\n\n\t\t\t\tconfig.timeout && flags.push(F.is5 ? ('<' + Math.ceil(config.timeout / 1000) + 's') : config.timeout);\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tflags.push('<' + Math.ceil(config.limit / 1024) + 'MB');\n\n\t\t\t\tconfig.upload && flags.push((F.is5 ? '@' : '') + 'upload');\n\n\t\t\t\tvar action = function($) {\n\n\t\t\t\t\tvar ctrl = F.is5 ? $ : this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\t// Parse cookies\n\t\t\t\t\tvar cookies = {};\n\t\t\t\t\tvar cookie = ctrl.headers.cookie;\n\n\t\t\t\t\tif (cookie) {\n\t\t\t\t\t\tlet arr = cookie.split(';');\n\t\t\t\t\t\tfor (let c of arr) {\n\t\t\t\t\t\t\tlet line = c.trim();\n\t\t\t\t\t\t\tlet index = line.indexOf('=');\n\t\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\t\tcookies[line.substring(0, index)] = line.substring(index + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar query = ctrl.query;\n\t\t\t\t\tvar body = ctrl.body;\n\t\t\t\t\tvar params = ctrl.params;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\tdata = ctrl.user;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cookies':\n\t\t\t\t\t\t\tdata = cookies;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: body, query: query, user: ctrl.user, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: params, ip: ctrl.ip, split: ctrl.split, cookies: cookies, ua: ctrl.ua };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\n\t\t\t\t\tif (config.upload && config.reader && config.reader !== '-') {\n\t\t\t\t\t\tctrl.files.wait(function(file, next) {\n\t\t\t\t\t\t\tfile.read(function(err, buffer) {\n\t\t\t\t\t\t\t\tvar type = config.reader;\n\t\t\t\t\t\t\t\tif (type === 'datauri')\n\t\t\t\t\t\t\t\t\ttype = 'base64';\n\t\t\t\t\t\t\t\tfile.data = type === 'buffer' ? buffer : buffer.toString(type);\n\t\t\t\t\t\t\t\tif (config.reader === 'datauri')\n\t\t\t\t\t\t\t\t\tfile.data = 'data:' + file.type + ';base64,' + file.data;\n\t\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, () => msg.send('output', data));\n\t\t\t\t\t} else\n\t\t\t\t\t\tmsg.send('output', data);\n\n\t\t\t\t};\n\n\t\t\t\tvar auth = config.user == 1 ? '+' : config.user == 2 ? '-' : '';\n\t\t\t\tvar url = config.url.replace(/#/g, instance.main.id);\n\t\t\t\tprev = F.is5 ? ROUTE(auth + config.method + ' ' + url + (config.action && config.method === 'API' ? (' ' + config.action) : '') + ' ' + flags.join(' '), action) : ROUTE(auth + config.method + ' ' + instance.replace(url) + (config.action && config.method === 'API' ? (' ' + config.action) : ''), action, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n__Output data__:\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number, data:Buffer|String }] // optional\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-bind path=\"flow.head.worker\" config=\"hide:!value || flow.head.origin.length < flow.head.proxyurl.length\" class=\"block\">\n\t\t\t<div class=\"message message-error\"><b><i class=\"ti ti-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t</ui-bind>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE,API|API\">Method</ui-component>\n\t\t\t\t<div class=\"help\">HTTP method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"monospace:1;required:1\">Relative URL address</ui-component>\n\t\t\t\t<div class=\"help\">A relative path to: <ui-bind path=\"flow.head.proxyurl\" config=\"text:value?value:window.location.origin\"></ui-bind><br />It supports wildcard <code>/something/*</code> or dynamic arguments <code>/products/{category}/</code>.<br /><code>#</code> will be replaced with a FlowStream <code>id</code> identifier.</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<hr class=\"nmt\" />\n\n\t\t<ui-bind path=\"?.method\" config=\"show:value === 'API'\" class=\"block hidden m padding bg-smoke radius\">\n\t\t\t<ui-component name=\"input\" path=\"?.action\" config=\"monospace:1;required:1;placeholder:+users_read/{id}\">API Action</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-component name=\"input\" path=\"?.upload\" config=\"type:checkbox\" class=\"m\"><b>Allow uploading files (form data)</b></ui-component>\n\t\t<ui-bind path=\"?.upload\" config=\"enabled\">\n\t\t\t<ui-component name=\"input\" path=\"?.reader\" config=\"dirsource:-|Keep as files,buffer|Buffer,utf8|UTF-8,ascii|ASCII,datauri|Data URI,base64|Base64,hex|Hex\">Read files to</ui-component>\n\t\t</ui-bind>\n\t\t<hr />\n\n\t\t<div class=\"ui-input-label mt10\">Continue as:</div>\n\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t<span>Authorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t<span>Unauthorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t<span>Both</span>\n\t\t\t</div>\n\t\t</ui-component>\n\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"required:1;type:number;format:\">Timeout</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;ricon:!kB;align:1;format:\">Request limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers,cookies|Cookies,user|User\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; color: #999; }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer class=\"monospace\"></footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar template = Tangular.compile('{{ if value.user == 1 }}<i class=\"ti ti-lock red mr10\"></i>{{ else if value.user == 2 }}<i class=\"ti ti-unlock blue mr10\"></i>{{ fi }}<span class=\"method\">{{ value.method }}</span> <a href=\"{{ value.link }}\" target=\"_blank\">{{ value.url }}</a>{{ if value.method === \\'API\\' }} {{ value.action }}{{ fi }}');\n\n\t\tvar reload = function() {\n\t\t\tvar model = CLONE(exports.config);\n\t\t\tmodel.link = model.url = model.url.replace(/#/g, flow.head.id);\n\n\t\t\tif (flow.head.proxypath)\n\t\t\t\tmodel.link = flow.head.origin + (flow.head.proxypath + model.link).replace(/\\/{2,}/g, '/');\n\t\t\telse\n\t\t\t\tmodel.link = flow.head.origin + model.link;\n\n\t\t\texports.element.find('footer').html(template({ value: model }));\n\t\t};\n\n\t\texports.configure = reload;\n\t\treload();\n\t});\n</script>",
			"confirmationcode": "<script total>\n\n\texports.id = 'confirmationcode';\n\texports.name = 'Confirmation code';\n\texports.icon = 'ti ti-barcode';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Security';\n\texports.config = { count: 3, type: 'pin', length: 4, expire: '5 minutes', lock: '', limit: 1 };\n\texports.inputs = [{ id: 'create', name: 'Create' }, { id: 'verify', name: 'Verify' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar codes = {};\n\t\tvar timeout = null;\n\n\t\tvar refreshforce = function() {\n\t\t\ttimeout = null;\n\t\t\tinstance.status({ count: Object.keys(codes).length });\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(refreshforce, 500);\n\t\t};\n\n\t\tinstance.message_create = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar val = null;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'pin':\n\t\t\t\t\tval = U.random_number(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'token':\n\t\t\t\t\tval = GUID(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = U.random_number(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\tval = U.random_string(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'guid':\n\t\t\t\t\tval = GUID();\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar id = typeof(data) === 'string' ? data : data.id;\n\t\t\tvar tmp = codes[id];\n\t\t\tvar msg = {};\n\t\t\tvar now = NOW = new Date();\n\n\t\t\tmsg.success = true;\n\n\t\t\tif (tmp && tmp.locked && tmp.locked > NOW) {\n\t\t\t\tif (tmp.limit <= 0) {\n\t\t\t\t\tmsg.success = tmp.count > 0;\n\n\t\t\t\t\tif (msg.success)\n\t\t\t\t\t\ttmp.value = msg.value = val;\n\n\t\t\t\t\tmsg.slots = tmp.count;\n\t\t\t\t\tmsg.error = 'locked';\n\t\t\t\t\tmsg.limit = tmp.limit;\n\t\t\t\t} else {\n\t\t\t\t\ttmp.limit--;\n\t\t\t\t\ttmp.value = msg.value = val;\n\t\t\t\t\ttmp.slots = msg.slots = tmp.count;\n\t\t\t\t\ttmp.expire = now.add(config.expire);\n\t\t\t\t\tmsg.limit = tmp.limit;\n\t\t\t\t\ttmp.param = data.param;\n\t\t\t\t}\n\t\t\t\t$.send('output', msg);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmsg.value = val;\n\t\t\tmsg.slots = config.count;\n\t\t\tmsg.limit = config.limit;\n\n\t\t\tcodes[id] = { value: val, expire: now.add(config.expire), count: config.count, locked: config.lock ? now.add(config.lock) : null, limit: config.limit, param: data.param };\n\t\t\t$.send('output', msg);\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.message_verify = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar id = data.id;\n\t\t\tvar value = data.value || data.token || data.code || data.pin;\n\t\t\tvar tmp = codes[id];\n\t\t\tvar output = {};\n\n\t\t\toutput.success = false;\n\t\t\toutput.slots = 0;\n\n\t\t\tif (tmp) {\n\n\t\t\t\tif (tmp.value === value) {\n\t\t\t\t\tdelete codes[id];\n\t\t\t\t\toutput.success = true;\n\t\t\t\t\toutput.slots = tmp.count;\n\t\t\t\t\toutput.param = tmp.param;\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\trefresh();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttmp.count--;\n\n\t\t\t\toutput.slots = tmp.count;\n\t\t\t\toutput.error = 'invalid';\n\n\t\t\t\tif (!tmp.count) {\n\t\t\t\t\tdelete codes[id];\n\t\t\t\t\trefresh();\n\t\t\t\t}\n\n\t\t\t\t$.send('output', output);\n\t\t\t} else {\n\t\t\t\toutput.error = 'blocked';\n\t\t\t\t$.send('output', output);\n\t\t\t}\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tvar is = false;\n\t\t\tfor (var key in codes) {\n\t\t\t\tvar item = codes[key];\n\t\t\t\tif (item.expire < NOW) {\n\t\t\t\t\tdelete codes[key];\n\t\t\t\t\tis = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tis && refresh();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar locked = config.lock ? NOW.add(config.lock) : null;\n\n\t\t\tfor (var key in codes) {\n\t\t\t\tvar item = codes[key];\n\t\t\t\titem.locked = locked;\n\t\t\t}\n\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can help you with generating confirmation codes. Keep data structure for inputs according to the documentation below.\n\n### `create` input/output\n\n__Create input__:\n\n- `id {String}` identifier (email, phone number, identifier, etc.)\n- `param {String}` a custom parameter\n\n__Create output__:\n\n- `success {Boolean}` determines if the code is verified or not accroding to its identifier\n- `value {String}` a pin/code/token\n- `param {String}` a custom parameter (it sends only if the value is true)\n- `error {String}` (optional) a simple error identifier, it can contain:\n\t- `locked` the identifier is locked by the previous call\n\n### `verify` input/output\n\n__Verify input__:\n\n- `id {String}` identifier (email, phone number, identifier, etc.)\n- `value {String}` a pin/code/token\n\n__Verify output__:\n\n- `success {Boolean}` determines if the code is verified or not accroding to its identifier\n- `slots {Number}` free slots/attempts\n- `error {String}` (optional) a simple error identifier, it can contain:\n\t- `invalid` the code is invalid\n\t- `404` identifier not found\n\n---\n\n### Settings\n\n- __Lock__ prevents overwriting of the code according to the identifier\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:#confirmcodetypes;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div class=\"grid-2\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.length\" config=\"type:number;min:1;max:500;format:\">Length</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.count\" config=\"type:number;format:\">Count of attempts</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"grid-4\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.expire\" config=\"align:1;placeholder:5 minutes;required:1\">Expiration</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.lock\" config=\"align:1;placeholder:5 minutes\">Lock</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number;format:\">Max. calls per lock</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px 8px; font-size: 12px; }\n\t.CLASS footer > div:first-child { margin-bottom: 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>Pending: <ui-bind path=\"STATUS.count\" config=\"text;empty\" class=\"b\"></ui-bind></div>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\"><span>Type</span><div class=\"right b\">{{ value.type | cl('confirmcodetypes') }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Length</span><div class=\"right\">{{ value.length }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Expiration</span><div class=\"right\">{{ value.expire }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Lock</span><div class=\"right\">{{ value.lock | empty }}</div></div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tDEF.cl.confirmcodetypes = [{ id: 'pin', name: 'PIN' }, { id: 'guid', name: 'Guid' }, { id: 'token', name: 'Token' }, { id: 'number', name: 'Number' }, { id: 'string', name: 'String' }];\n</script>",
			"cbg7t434a": "<script total>\n\n\texports.name = 'DB Init';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Databases';\n\texports.config = { connection: '', name: '', pooling: 0, database: 'querybuilderpg' };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\tconfig.connection && NPMINSTALL(config.database, function() {\n\t\t\t\trequire(config.database).init(config.name || 'default', config.connection, config.pooling || null);\n\t\t\t});\n\t\t};\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component can create and give access to datases engines through Total.js [QueryBuilder](https://docs.totaljs.com/total4/pzbr001pr41d/):\n- QueryBuilder (pg)\n- QueryBuilder (mysql)\n- QueryBuilder (sqlite3)\n- QueryBuilder (totaldb)\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<ui-component name=\"input\" path=\"?.name\">Name</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.connection\" config=\"required:1;camouflage:1\">Connection</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.pooling\" config=\"type:Number\">Pooling</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.database\" config=\"dirsource:querybuilderpg|Postgres,querybuildermysql2|MySql 2,querybuildersqlite3|Sqlite3,querybuildertotaldb|Totaldb\">Pooling</ui-component>\n\t\t</div>\n\n\t</div>\n</settings>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"$ICON\" style=\"font-size:50px;color:#5C1DC4\"></i>\n\t\t<div class=\"fs12 mt10\">$NAME</div>\n\t</div>\n</body>",
			"taction": "<script total>\n\n\texports.id = 'taction';\n\texports.name = 'Action';\n\texports.icon = 'ti ti-totaljs';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { partial: false, name: 'Unknown', input: '', query: '', color: '#68B25B', params: '', user: 0, permissions: '', code: '// model\\n// $.query\\n// $.params\\n// $.headers\\n// $.user\\n\\n$.success();', strerr: false, path: 'response', autoresponse: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.install = function(com) {\n\n\t\tMAIN.flowtaction = {};\n\n\t\tconst ARGS = /\\{{1,2}[a-z0-9_.-\\s]+\\}{1,2}/gi;\n\t\tconst Options = function($, config) {\n\n\t\t\tvar t = this;\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data || typeof(data) !== 'object')\n\t\t\t\tdata = {};\n\n\t\t\tt.id = config.name;\n\t\t\tt.error = new ErrorBuilder();\n\t\t\tt.controller = $.refs.controller;\n\t\t\tt.payload = data.payload || data.model || data.body;\n\n\t\t\tif (typeof(t.payload) !== 'object' || !t.payload)\n\t\t\t\tt.payload = {};\n\n\t\t\tt.message = $;\n\t\t\tt.config = config;\n\t\t\tt.user = data.user;\n\t\t\tt.query = data.query || {};\n\t\t\tt.params = data.params || {};\n\t\t\tt.url = data.url;\n\t\t\tt.language = data.language;\n\t\t\tt.headers = data.headers || {};\n\t\t\tt.files = data.files || [];\n\t\t\tt.cookies = data.cookies || {};\n\t\t\tt.ip = data.ip;\n\t\t\tt.ua = data.ua;\n\t\t\tt.request = data;\n\t\t};\n\n\t\tOptions.prototype = {\n\n\t\t\tget value() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tget model() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tset value(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t},\n\n\t\t\tset model(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.audit = function(message, type) {\n\t\t\tF.audit(this, message ? this.variables(message) : '', type);\n\t\t};\n\n\t\tOptions.prototype.success = function(value) {\n\t\t\tvar self = this;\n\n\t\t\tself.request[self.config.path] = { success: true, value: value };\n\n\t\t\tif (self.config.autoresponse) {\n\t\t\t\tvar refs = self.message.refs;\n\t\t\t\tif (refs) {\n\t\t\t\t\trefs.controller.json(self.request[self.config.path]);\n\t\t\t\t\trefs.controller = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tself.message.send('output', self.request);\n\t\t};\n\n\t\tOptions.prototype.cancel = function() {\n\t\t\tvar self = this;\n\t\t\tself.message.destroy();\n\t\t};\n\n\t\tOptions.prototype.successful = function(callback) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, a, b, c) {\n\t\t\t\tif (err)\n\t\t\t\t\tself.invalid(err);\n\t\t\t\telse\n\t\t\t\t\tcallback.call(self, a, b, c);\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.send = Options.prototype.callback = function(value) {\n\n\t\t\tvar self = this;\n\n\t\t\tif (arguments.length == 0) {\n\t\t\t\treturn function(err, response) {\n\t\t\t\t\terr && self.error.push(err);\n\t\t\t\t\tself.callback(response);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet msg = self.message;\n\t\t\tlet refs = msg.refs;\n\t\t\tlet cfg = self.config;\n\n\t\t\tif (self.error.items.length) {\n\t\t\t\tself.request[cfg.path] = cfg.strerr ? self.error.toString() : self.error.output();\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.invalid(self.error);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('error', self.request);\n\n\t\t\t} else {\n\n\t\t\t\tself.request[cfg.path] = value;\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.json(value);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('output', self.request);\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.done = function(arg) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.error.push(err);\n\t\t\t\t\tself.callback(null);\n\t\t\t\t} else\n\t\t\t\t\tself.callback({ success: true, value: arg === true ? response : arg });\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.invalid = function(error, path, index) {\n\t\t\tvar self = this;\n\t\t\tself.error.push(error, path, index);\n\t\t\tself.callback(null);\n\t\t};\n\n\t\tOptions.prototype.cookie = function(name, value, expire, options) {\n\t\t\tvar self = this;\n\t\t\tif (value === undefined)\n\t\t\t\treturn self.cookies[name];\n\n\t\t\tif (value === null)\n\t\t\t\texpire = '-1 day';\n\n\t\t\tif (self.controller) {\n\t\t\t\tself.controller.cookie(name, value, expire, options);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tOptions.prototype.variables = function(str, data) {\n\n\t\t\tif (str.indexOf('{') === -1)\n\t\t\t\treturn str;\n\n\t\t\tvar $ = this;\n\n\t\t\treturn str.replace(ARGS, function(text) {\n\t\t\t\tvar l = text[1] === '{' ? 2 : 1;\n\t\t\t\tvar key = text.substring(l, text.length - l).trim();\n\t\t\t\tvar val = null;\n\t\t\t\tvar five = key.substring(0, 5);\n\t\t\t\tif (five === 'user.') {\n\t\t\t\t\tif ($.user) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.user[key] : U.get($.user, key);\n\t\t\t\t\t}\n\t\t\t\t} else if (five === 'data.') {\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? data[key] : U.get(data, key);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar six = key.substring(0, 6);\n\t\t\t\t\tif (six === 'model.' || six === 'value.') {\n\t\t\t\t\t\tif ($.model) {\n\t\t\t\t\t\t\tkey = key.substring(6);\n\t\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.model[key] : U.get($.model, key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (six === 'query.')\n\t\t\t\t\t\tval = $.query[key.substring(6)];\n\t\t\t\t\telse if (key.substring(0, 7) === 'params.')\n\t\t\t\t\t\tval = $.params[key.substring(7)];\n\t\t\t\t}\n\t\t\t\treturn val == null ? text : val;\n\t\t\t});\n\n\t\t};\n\n\t\tMAIN.flowtaction.Options = Options;\n\t\tMAIN.flowtaction.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t};\n\n\texports.uninstall = function() {\n\t\tdelete MAIN.flowtaction;\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar cfg = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar opt = new MAIN.flowtaction.Options($, cfg);\n\t\t\tif (fn) {\n\n\t\t\t\t// check user\n\t\t\t\tif (cfg.user || cfg.permissions) {\n\n\t\t\t\t\tif ((cfg.user === 2 && opt.user) || (cfg.user === 1 && !opt.user)) {\n\t\t\t\t\t\topt.invalid(401);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cfg.user === 1 && cfg.permissions) {\n\t\t\t\t\t\tlet permissions = cfg.permissions.slice(0);\n\t\t\t\t\t\tpermissions.unshift(opt);\n\t\t\t\t\t\tif (UNAUTHORIZED.apply(global, permissions))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check data\n\t\t\t\tlet tmp;\n\n\t\t\t\tif (cfg.input) {\n\t\t\t\t\ttmp = cfg.input.transform(opt.payload, cfg.partial, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.payload = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.query) {\n\t\t\t\t\topt.error.prefix = 'query.';\n\t\t\t\t\ttmp = cfg.query.transform(opt.query, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.query = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.params) {\n\t\t\t\t\topt.error.prefix = 'params.';\n\t\t\t\t\ttmp = cfg.params.transform(opt.params, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.params = tmp.response;\n\t\t\t\t}\n\n\t\t\t\topt.error.prefix = '';\n\n\t\t\t\ttry {\n\t\t\t\t\tfn(opt, opt.payload);\n\t\t\t\t} catch (e) {\n\t\t\t\t\topt.invalid(e);\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\topt.invalid(501);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tfn = config.code.includes('await ') ? new MAIN.flowtaction.AsyncFunction('$', 'model', 'data', 'value', config.code) : new Function('$', 'model', 'data', 'value', config.code);\n\n\t\t\tcfg = {};\n\t\t\tfor (var key in config) {\n\t\t\t\tif (key !== 'code')\n\t\t\t\t\tcfg[key] = config[key];\n\t\t\t}\n\n\t\t\tcfg = instance.replace(cfg);\n\t\t\tcfg.input = cfg.input ? cfg.input.toJSONSchema() : null;\n\t\t\tcfg.query = cfg.query ? cfg.query.toJSONSchema() : null;\n\t\t\tcfg.params = cfg.params ? cfg.params.toJSONSchema() : null;\n\t\t\tcfg.permissions = cfg.permissions ? cfg.permissions.split(',').trim() : null;\n\n\t\t\tif (cfg.permissions && !cfg.permissions.length)\n\t\t\t\tcfg.permissions = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component creates similar functionality as Total.js Actions.\n\n## Payload\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\n## Custom scripting\n\n- supports `await`\n- supports Total.js global functions\n\n__Properties__:\n\n- `$.model {Object}` or `model` parsed payload\n- `$.query {Object}` parsed URL query arguments\n- `$.params {Object}` parsed URL params\n- `$.cookies {Object}` parsed cookies\n- `$.files [Object]` uploaded files\n- `$.user {Object}` user session (optional)\n- `$.headers {Object}` request headers\n- `$.ip {String}` IP address (optional)\n- `$.language {String}` optional\n- `$.ua {String}` parsed user agent (optional)\n- `$.url {String}` URL endpoint\n- `$.message {Object}` Flow message instance\n- `$.request {Object}` Flow message payload data\n\n__Methods__:\n\n- `$.invalid(error)` responds with an error and ends the action\n- `$.success([value])` responds with `{ success: true, value }` object and ends the action\n- `$.send(value)` responds with `value` object and ends the action\n- `$.cancel()` ends the action without response\n- `$.audit(message, [type])` writes audit\n\n## Supported types\n\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\" style=\"padding-bottom:5px\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\">Action name</ui-component>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.color\" config=\"required:1;type:color\">Color</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div class=\"pull-left\">\n\t\t\t\t<div class=\"ui-input-label\">Allow only:</div>\n\t\t\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t\t\t<span>Authorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t\t\t<span>Unauthorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t\t\t<span>Both</span>\n\t\t\t\t\t</div>\n\t\t\t\t</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"pull-left\" style=\"margin-left:20px\">\n\t\t\t\t<div style=\"height:25px\"></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.autoresponse\" config=\"type:checkbox\">Auto HTTP response</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.input\" config=\"monospace:1;maxlength:100000;placeholder:name\\:Name, *email\\:Email\">Payload schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.query\" config=\"monospace:1;maxlength:100000;placeholder:page\\:Number\">Query arguments schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"padding bg-smoke radius npb\">\n\t\t\t\t<div class=\"grid-3\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.params\" config=\"monospace:1;maxlength:100000;placeholder:*id\\:String\">Params schema</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.permissions\" config=\"monospace:1;maxlength:100000;placeholder:admin, director\">Permissions</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;required:1;placeholder:response\">Path for storing a response</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .content { min-width: 200px; }\n\t.CLASS header { color: #FFF; padding: 5px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px 5px; }\n\t.CLASS .ti { color: #999; }\n\t.CLASS footer > div { padding: 10px 10px 0; }\n\t.CLASS-code .CodeMirror { border: 0; border-left: 1px solid #E0E0E0; border-radius: none; }\n\t.CLASS-code-editor { margin-left: 200px; }\n\t.CLASS-code-info { float: left; width: 200px; padding: 12px; font-size: 12px; }\n\t.CLASS-code-info code { overflow-wrap: break-word; white-space: pre-wrap; display: block; padding: 0 3px; }\n\t.CLASS-code-button { padding: 10px; border-top: 1px solid #E0E0E0; }\n\t.CLASS-code-button button { font-size: 14px; height: 36px; font-weight: bold; }\n\t.CLASS-settings .iconmenu { height: 80px; }\n\t.CLASS-settings .iconmenu > div { height: 76px; }\n\t.CLASS-settings .iconmenu span { padding-top: 8px; }\n\t.CLASS-settings .iconmenu i { padding-top: 16px; }\n\t.ui-dark .CLASS-code .CodeMirror { border-left-color: #404040; }\n\t.ui-dark .CLASS-code-button { border-top-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"background-color:{{ value.color }}\">{{ value.name }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button exec\" data-exec=\"=sourcecode\"><i class=\"ti ti-js\"></i>Script</button></div>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\" class=\"block fs11\" style=\"padding:10px\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ if value.autoresponse }}<div class=\"b\"><i class=\"ti ti-check-square green mr5\"></i>Auto HTTP response</div>{{ fi }}\n\t\t\t\t<div><i class=\"ti ti-check-square mr5\"></i>{{ if value.user === 1 }}Authorized only{{ else if value.user === 2 }}Unauthorized only{{ else }}All allowed{{ fi }}</div>\n\t\t\t\t{{ if value.partial }}<div><i class=\"ti ti-check-square green mr5\"></i>Partial data</div>{{ fi }}\n\t\t\t\t{{ if value.input }}<div><i class=\"ti ti-check-square green mr5\"></i>Payload</div>{{ fi }}\n\t\t\t\t{{ if value.query }}<div><i class=\"ti ti-check-square green mr5\"></i>URL Query arguments</div>{{ fi }}\n\t\t\t\t{{ if value.params }}<div><i class=\"ti ti-check-square green mr5\"></i>Params</div>{{ fi }}\n\t\t\t\t{{ if value.permissions }}<div><i class=\"ti ti-check-square green mr5\"></i>Permissions</div>{{ fi }}\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (!common.codeactions) {\n\t\t\tcommon.codeactions = {};\n\t\t\tW.codeactionssubmit = function(el) {\n\n\t\t\t\tif (BLOCKED('codeaction', 1000))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar winid = ATTRD(el);\n\t\t\t\tvar id = winid.substring(4);\n\t\t\t\tvar code = common.codeactions[winid];\n\t\t\t\tvar instance = flowinstances.instances[id];\n\t\t\t\tvar config = instance.config;\n\t\t\t\tconfig.code = code;\n\t\t\t\tinstance.reconfigure(config);\n\t\t\t};\n\t\t\tW.codeactionsinit = function(com) {\n\t\t\t\tvar save = () => W.codeactionssubmit(com.element);\n\t\t\t\tvar map = { 'Cmd-S': save, 'Ctrl-S': save };\n\t\t\t\tcom.editor.addKeyMap(map);\n\t\t\t};\n\t\t}\n\n\t\texports.renderschema = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar config = exports.config;\n\n\t\t\tvar write = function(name, label) {\n\t\t\t\tif (config[name]) {\n\t\t\t\t\tbuilder.push('<div class=\"b badge badge-gray\" style=\"display:block\">{0}</div>'.format(label));\n\t\t\t\t\tvar val = config[name].replace(/\\,/g, '\\n');\n\t\t\t\t\tbuilder.push('<div class=\"m mt5\"><code>{0}</code></div>'.format(val));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twrite('params', 'Dynamic parameters');\n\t\t\twrite('query', 'URL query arguments');\n\t\t\twrite('input', 'Payload');\n\n\t\t\treturn builder.join('');\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar key = 'code' + exports.id;\n\t\t\tvar win = common.windows.findItem('id', key);\n\t\t\tif (win) {\n\t\t\t\tvar path = '*codeactions.' + key;\n\t\t\t\tvar prev = GET(path);\n\t\t\t\tif (prev !== exports.config.code)\n\t\t\t\t\tSET(path, exports.config.code);\n\t\t\t\twin.element.find('.CLASS-code-info').html(exports.renderschema());\n\t\t\t}\n\t\t};\n\n\t\texports.sourcecode = function() {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar path = '*codeactions.code' + exports.id;\n\t\t\tvar winid = 'code' + exports.id;\n\n\t\t\tif (common.windows.findItem('id', winid)) {\n\t\t\t\tSETTER('windows/focus', winid);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSET(path, config.code);\n\n\t\t\tPUSH('common.windows', { id: winid, cachekey: 'codeaction', cache: 'readme', html: '<div class=\"CLASS-code invisible\"><div class=\"CLASS-code-info noscrollbar\">{1}</div><div class=\"CLASS-code-editor\"><ui-component name=\"codemirror\" path=\"{0}\" config=\"type:javascript;parent:auto;margin:60;$init:codeactionsinit\"></ui-component></div><div class=\"CLASS-code-button\"><button class=\"button exec\" data-exec=\"codeactionssubmit\">Apply</button></div></div>'.format(path, exports.renderschema()), title: 'Action script: ' + config.name, actions: { move: true, autosave: true, close: true, maximize: true, minimize: false }, offset: { x: ((WW / 2) - 275) >> 0, y: ((WH / 2) - 250) >> 0, width: 750, height: 500, minwidth: 200, minheight: 300, maxwidth: 1200, maxheight: 1200 }, make: function(el) {\n\t\t\t\tel.closest('.ui-windows-item').css('z-index', 50);\n\t\t\t\tel.find('.CLASS-code').rclass('invisible', 500);\n\t\t\t}});\n\t\t};\n\n\t});\n\n</script>",
			"chatgpt": "<script total>\n\n\texports.id = 'chatgpt';\n\texports.name = 'ChatGPT';\n\texports.icon = 'ti ti-robot-alt';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.group = 'Services';\n\texports.config = { model: 'gpt-3.5-turbo-instruct', apikey: '', question: '' };\n\texports.inputs = [{ id: 'input', name: 'Question' }];\n\texports.outputs = [{ id: 'output', name: 'Answer' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function (instance, config) {\n\n\t\tconst URL = 'https://api.openai.com/v1/completions';\n\n\t\tvar model;\n\t\tvar cfg;\n\n\t\tinstance.message = async function ($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data) {\n\t\t\t\t$.send('error', 'Input text is missing');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (cfg.model) {\n\t\t\t\tcase 'gpt-3.5-turbo-instruct':\n\n\t\t\t\t\tif (data.text)\n\t\t\t\t\t\tdata = data.text;\n\n\t\t\t\t\tif (typeof data !== 'string') {\n\t\t\t\t\t\t$.send('error', 'Error: Wrong input format');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tRESTBuilder.POST(URL, { model: cfg.model, prompt: config.question ? (config.question + ' ' + data) : data, temperature: 0, max_tokens: 220, frequency_penalty: 2 }).header('Authorization', 'Bearer ' + cfg.apikey).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response.choices) {\n\t\t\t\t\t\t\tvar text = response.choices[0].text;\n\t\t\t\t\t\t\t$.send('output', text);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpt-3.5-turbo':\n\t\t\t\tcase 'gpt-4':\n\n\t\t\t\t\tvar messages = $.data.messages || $.data;\n\n\t\t\t\t\tif (!(messages instanceof Array)) {\n\t\t\t\t\t\t$.send('error', 'Error: Input must be array of messages');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!messages[0] || !messages[0].role) {\n\t\t\t\t\t\t$.send('error', 'Error: Each message object must have message role attribute : user or assistant or system');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconfig.question && messages.unshift({ role: 'user', content: config.question });\n\n\n\t\t\t\t\tvar url = 'https://api.openai.com/v1/chat/completions';\n\t\t\t\t\tRESTBuilder.POST(url, { model: cfg.model, messages: messages }).header('Authorization', 'Bearer ' + cfg.apikey).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response.choices) {\n\t\t\t\t\t\t\tvar text = response.choices[0].message.content;\n\n\t\t\t\t\t\t\t$.send('output', text);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'whisper-1':\n\t\t\t\t\tvar path = $.data.path || $.data;\n\n\t\t\t\t\tvar url = 'https://api.openai.com/v1/audio/transcriptions';\n\t\t\t\t\tRESTBuilder.POST(url, { model: cfg.model }).header('Authorization', 'Bearer ' + cfg.apikey).file('file', path).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response)\n\t\t\t\t\t\t\t$.send('output', response);\n\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function () {\n\t\t\tcfg = instance.replace(config);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n</script>\n\n<readme>\nThis component can talk to ChatGPT.\n\n## Input\n\nInput will depend on selected model\n\n- __CPT 3.5 Turbo__ and __CPT 4__\n```js\n\n// Object\n{\nmessages : [{ role: 'user', content: 'Text' }]\n}\n\n// or\n\n\n// Array\n[{ role: 'assistant', content: 'Text' }]\n```\n\n- __Whisper__\n```js\n\n// Object\n{\npath : 'path-to-file'\n}\n\n// or\n\n\n// String\n'path-to-file'\n```\n\n- __CPT 3.5 Turbo instruct__\n```js\n\n// Object\n{\ntext : 'your question'\n}\n\n// or\n\n\n// String\n'your question'\n```\n\n\n## Output\n\nOutput also depends on selected model\n- __CPT 3.5 Turbo__ and __CPT 4__\n```js\n'Response from assistant'\n```\n\n- __Whisper__\n```js\n\n// Object\n{\ntext : 'transcipted text'\n}\n```\n- __CPT 3.5 Turbo instruct__\n```js\n\n// String\n'Response from assistant'\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"input\" path=\"?.apikey\" config=\"camouflage:1;required:1\">API key</ui-component>\n\t\t\t<div class=\"help\"><a href=\"https://platform.openai.com/account/api-keys\" target=\"_blank\"><i class=\"ti ti-external\"></i>Generate API key</a></div>\n\t\t</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"input\" path=\"?.model\" config=\"type:select;dirsource:gpt-4|GPT 4,gpt-3.5-turbo|GPT 3.5 Turbo,gpt-3.5-turbo-instruct|GPT 3.5 Turbo instruct,Whisper|whisper-1\">Model</ui-component>\n\t\t</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"input\" path=\"?.question\" config=\"type:multiline\">Question</ui-component>\n\t\t\t<div class=\"help\">This question will be added before your messages</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"trigger": "<script total>\n\n\texports.id = 'trigger';\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '4';\n\texports.icon = 'ti ti-start';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false, prompt: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar regprompt = /\\{prompt\\}/g;\n\n\t\tinstance.trigger = function(msg) {\n\n\t\t\tvar random = !config.prompt && config.random;\n\t\t\tvar val = config.data;\n\t\t\tvar prompt = msg.value || '';\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = random ? U.random() : val.replace(regprompt, prompt).parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? Buffer.from(U.random_string()) : Buffer.from(val.replace(regprompt, prompt), 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = random ? NOW.add('-' + U.random(500, 10) + ' seconds') : val.replace(regprompt, prompt).parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? {} : (new Function('return ' + val.replace(regprompt, prompt)))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tvar tmp = random ? '' : val.replace(regprompt, prompt);\n\t\t\t\t\tval = random ? U.random() % 2 === 0 : tmp === 'true' || tmp === 'on' || tmp === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = random ? U.random_string(20) : val.replace(regprompt, prompt);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"mt10 m\">\n\t\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.prompt\" config=\"type:checkbox\">Prompt</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"disabled\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"block hidden m mt10\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.promptlabel\" config=\"placeholder:Enter a value\"><b>Prompt label</b></ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<ui-bind path=\"?\" config=\"hide:value.hide && !value.prompt\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"help hidden\">The prompt value will be assigned to the <code>{prompt}</code> keyword in the code.</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button name=\"run\">Run</button>\n\t</div>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\t\texports.click = function(el) {\n\t\t\tif (exports.config.prompt) {\n\t\t\t\tvar opt = {};\n\t\t\t\topt.name = exports.config.promptlabel || 'Enter a value';\n\t\t\t\topt.value = '';\n\t\t\t\topt.callback = function(val) {\n\t\t\t\t\texports.trigger({ value: val });\n\t\t\t\t};\n\t\t\t\tSETTER('prompt/show', opt);\n\t\t\t} else\n\t\t\t\texports.trigger();\n\t\t};\n\t});\n</script>",
			"postgresql": "<script total>\n\n\texports.id = 'postgresql';\n\texports.name = 'PostgreSQL';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['pg'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst { Pool } = require('pg')\n\t\tvar PG;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!PG || !PG.pool)\n\t\t\t\treturn $.send('output', { error: 'Postgre connection not configured' });\n\n\t\t\tPG.pool.query(data.query, (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\t\t\t\t\t\n\t\t\t\tvar { command, rows, rowCount } = response;\n\t\t\t\t$.send('output', { command, rows, rowCount });\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (PG && PG.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tPG = exports.POOLS[config.connection];\n\t\t\t\tPG.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = new Pool({ connectionString: config.connection });\n\t\t\tPG = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.on('error', (err, client) => {\n\t\t\t\tconsole.log('[PG] Unexpected error on idle client', err);\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (PG) {\n\t\t\t\tPG.count--;\n\t\t\t\tif (PG.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tPG.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tPG = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nPostgreSQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\nOutput:\n```javascript\n{\n\tcommand: 'INSERT', // SELECT, etc.\n\trows: [], // \n\trowCount: 1\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.connection\" config=\"required:1\">Connection string</ui-component>\n\t\t\t\t<div class=\"help\">e.g.: postgresql://user:password@localhost:5432/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.error\" config=\"text\" class=\"red\"></ui-bind>\n\t</footer>\n</body>",
			"printjson": "<script total>\n\n\texports.id = 'printjson';\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-component { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .ti-copy, .ui-objecttree .ti-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('ti-copy');\n\t\tel.tclass(iscopy ? 'ti-copy' : 'ti-link').tclass('ti-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('ti-check').tclass(iscopy ? 'ti-copy' : 'ti-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-component name=\"objecttree\" path=\"!STATUS\" config=\"exec:FUNC.printjson_click\" class=\"selectable\"></ui-component>\n\t</footer>\n</body>",
			"tauthtoken": "<script total>\n\n\texports.id = 'tauthtoken';\n\texports.name = 'Auth token';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-key';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { token: '', code: 401, header: 'x-token', error: 'Unauthorized', ddos: 0 };\n\texports.inputs = [{ id: 'input', name: 'Request' }];\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar maintoken = '';\n\t\tvar ddos = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tvar token = ctrl.headers[config.header];\n\n\t\t\tif (config.ddos && ddos[ctrl.ip] > config.ddos)\n\t\t\t\ttoken = '';\n\n\t\t\tif (token === maintoken) {\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\n\t\t\t\tif (config.ddos)\n\t\t\t\t\tddos[ctrl.ip] = (ddos[ctrl.ip] || 0) + 1;\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tctrl.json([{ name: config.code + '', error: config.error }]);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\t\t\tinstance.configure();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tmaintoken = instance.replace(config.token);\n\t\t};\n\n\t\tinstance.service = function(counter) {\n\t\t\tif (counter % 10)\n\t\t\t\tddos = {};\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component must be used only with REST Route component. It reads a token from the request header and compares it with the token declared in the configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:1\">Token</ui-component>\n\t\t<div class=\"help\"><span class=\"link exec\" data-exec=\"tmptokenauthgenerate\">Generate token</span>. It can contain a global variable in the form <code>{variable}</code>.</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.header\" config=\"required:1;type:lower\">Header</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.error\" config=\"required:1\">Error message</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.ddos\" config=\"required:1;type:number;format:\">DDOS protection</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"help\">How many times can the client requested your API with a bad key? The internal IP database is cleared every 10 minutes. <code>0</code> disables DDOS protection.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer ui-bind { font-family: var(--monospace); }\n\t.CLASS footer .code { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<div><ui-bind path=\"$CONFIG.code\" config=\"text\" class=\"code\"></ui-bind><ui-bind path=\"$CONFIG.header\" config=\"text\"></ui-bind></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!W.tmptokenauthgenerate) {\n\t\t\tW.tmptokenauthgenerate = function(el) {\n\t\t\t\tel.scope().set('token', W['GUI' + 'D'](30), 'show');\n\t\t\t};\n\t\t}\n\t});\n\n</script>",
			"code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, name: 'Code', code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n\nTo send data to the default output use `send(somedata);`\nTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n- first output--> `send(somedata)` or `$.send('output', somedata)`\n- second output --> `$.send('output2', somedata)`\n- ...\n- 5th output --> `$.send('output5', somedata)`\n- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-10 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.name\">Name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.outputs\" config=\"type:number;format:\">Number of outputs</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></ui-component>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\tTOUCH(function(exports, init) {\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar count = exports.instance.config.outputs;\n\t\t\t\tfor (let i = 1; i <= count; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + (i === 1 ? '' : i), name: (count === 1 ? 'Output' : 'Output #' + i) });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"ilzhrhcmu": {
				"id": "ilzhrhcmu",
				"config": {
					"url": "/admin/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "payload",
					"reader": "-"
				},
				"x": 330.5,
				"y": 102.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzhuz3z4",
							"index": "input"
						}
					]
				}
			},
			"ilzhuz3z4": {
				"id": "ilzhuz3z4",
				"config": {
					"partial": false,
					"name": "GetAll",
					"input": "",
					"query": "search:String",
					"color": "#4285F4",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// DATA.find('admin').callback(function(err, res) {\n\t// console.log(err, res);\n\t// $.success(res);\n// });\n\n// logika get all data dan search data\nvar builder = DATA.find('admin');\n\nif ($.search) {\n  $.success('logic search jalan');\n}\n\nbuilder.fields('id,name,email,address,search').callback(function(err, res) {\n\tif (err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\t$.success(res);\n});\n\n// DATA.find('users').callback(console.log);\n\n// DATA.find('admin').fields('id', 'name', 'email', 'address').callback(function(err, res) {\n//     if (err) {\n//         console.log(err);\n//       $.invalid(err);\n//         return;\n//     }\n//    $.send(res);\n// });\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 652.5,
				"y": 92.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi3l67m",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi3l67m",
							"index": "input"
						}
					]
				}
			},
			"ilzhxely2": {
				"id": "ilzhxely2",
				"config": {
					"url": "/admin/",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 316.5,
				"y": 531.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzhxeqwc",
							"index": "input"
						}
					]
				}
			},
			"ilzhxeqwc": {
				"id": "ilzhxeqwc",
				"config": {
					"partial": false,
					"name": "Store",
					"input": "name:String,email:String,address:String",
					"query": "",
					"color": "#61C83B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\nDATA.insert('admin', model).callback(function(err, res) {\n\tif(err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success();\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 653,
				"y": 532,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi1huzu",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi1huzu",
							"index": "input"
						}
					]
				}
			},
			"ilzi1huzu": {
				"id": "ilzi1huzu",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 998,
				"y": 532,
				"component": "print",
				"connections": {}
			},
			"ilzi2a2kw": {
				"id": "ilzi2a2kw",
				"config": {
					"url": "/admin/{id}",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 314,
				"y": 889,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzi2a2kx",
							"index": "input"
						}
					]
				}
			},
			"ilzi2a2kx": {
				"id": "ilzi2a2kx",
				"config": {
					"partial": false,
					"name": "GetById",
					"input": "",
					"query": "",
					"color": "#4285F4",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\nvar id = $.params.id;\nDATA.read('admin').fields('id,name,email,address').id(id).error(404).callback(function(err, res) {\n\tif(err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success(res);\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 653,
				"y": 889,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi3ltsa",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi3ltsa",
							"index": "input"
						}
					]
				}
			},
			"ilzi2u0s0": {
				"id": "ilzi2u0s0",
				"config": {
					"url": "/admin/{id}",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 314,
				"y": 1240,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzi2u0s1",
							"index": "input"
						}
					]
				}
			},
			"ilzi2u0s1": {
				"id": "ilzi2u0s1",
				"config": {
					"partial": false,
					"name": "Update",
					"input": "name:String,email:String,address:String",
					"query": "",
					"color": "#EC8632",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\nvar id = $.params.id;\nvar item = {};\nitem.search = (model.name + ' ' + model.email + ' ' + model.address).toSearch();\nDATA.update('admin', model).id(id).error(404).callback(function(err, res) {\n\tif(err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success();\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 653,
				"y": 1244,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi2zou7",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi2zou7",
							"index": "input"
						}
					]
				}
			},
			"ilzi2zou7": {
				"id": "ilzi2zou7",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 999,
				"y": 1244,
				"component": "print",
				"connections": {}
			},
			"ilzi3l67m": {
				"id": "ilzi3l67m",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1004.5,
				"y": 100.5,
				"component": "print",
				"connections": {}
			},
			"ilzi3ltsa": {
				"id": "ilzi3ltsa",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1000,
				"y": 889,
				"component": "print",
				"connections": {}
			},
			"ilzi49szk": {
				"id": "ilzi49szk",
				"config": {
					"url": "/admin/{id}",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 317,
				"y": 1602,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzi49szl",
							"index": "input"
						}
					]
				}
			},
			"ilzi49szl": {
				"id": "ilzi49szl",
				"config": {
					"partial": false,
					"name": "Delete",
					"input": "",
					"query": "",
					"color": "#E73323",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\nvar id = $.params.id;\nDATA.remove('admin').id(id).error(404).callback(function(err, res) {\n\tif(err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success();\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 654,
				"y": 1602,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi49szm",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi49szm",
							"index": "input"
						}
					]
				}
			},
			"ilzi49szm": {
				"id": "ilzi49szm",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1000,
				"y": 1602,
				"component": "print",
				"connections": {}
			},
			"ilzi4lydm": {
				"id": "ilzi4lydm",
				"config": {
					"url": "/admin/list",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "payload",
					"reader": "-"
				},
				"x": 1314.5,
				"y": 101.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzi4o977",
							"index": "input"
						}
					]
				}
			},
			"ilzi4lydo": {
				"id": "ilzi4lydo",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1917.5,
				"y": 97.5,
				"component": "print",
				"connections": {}
			},
			"ilzi4o977": {
				"id": "ilzi4o977",
				"config": {
					"partial": false,
					"name": "GetById",
					"input": "",
					"query": "",
					"color": "#4285F4",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\nDATA.find('admin').fields('id,name,email,address').error(404).callback(function(err, res) {\n\tif(err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success(res);\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 1569.5,
				"y": 99.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi4lydo",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi4lydo",
							"index": "input"
						}
					]
				}
			}
		},
		"sources": {},
		"size": 97713,
		"variables2": {},
		"directory": "C:\\DAD Project\\ToDoListWebsite\\flow\\flowstream\\"
	},
	"fIo6bvG1cO61f": {
		"id": "fIo6bvG1cO61f",
		"name": "Admin",
		"author": "Fauzi",
		"version": "1.1",
		"icon": "ti ti-atom",
		"reference": "",
		"group": "UserManagement",
		"url": "https://",
		"cloning": true,
		"color": "",
		"readme": "",
		"memory": 0,
		"proxypath": "/fauzi/",
		"variables": {},
		"dtcreated": "2024-08-08T00:52:29.573Z",
		"asfiles": false,
		"worker": "fork",
		"paused": true,
		"sandbox": false,
		"dtupdated": "2024-08-08T08:17:36.387Z",
		"origin": "http://localhost:8000",
		"components": {
			"print": "<script total>\n\n\texports.id = 'print';\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '5';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = '<Buffer ' + data.toString('hex').substring(0, 10) + '...';\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tif (output) {\n\t\t\t\toutput = JSON.stringify(output, serializer);\n\t\t\t\tinstance.status(output, 200);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-bind { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .json { white-space: pre; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"html pre:Thelpers.jsonformat(JSON.stringify(JSON.parse(value), null, '\\t'));show:value && value.length > 0\" class=\"hidden selectable block\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"ti ti-window\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(JSON.parse(laststatus), null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
			"read": "<script total>\n\n\texports.id = 'read';\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'ti ti-filter';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [], keep: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item, value) {\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'empty':\n\t\t\t\t\treturn value;\n\t\t\t\tcase 'uid':\n\t\t\t\t\treturn UID();\n\t\t\t\tcase 'guid':\n\t\t\t\t\treturn GUID();\n\t\t\t\tcase 'upper':\n\t\t\t\t\treturn value == null ? '' : value.toString().toUpperCase();\n\t\t\t\tcase 'lower':\n\t\t\t\t\treturn value == null ? '' : value.toString().toLowerCase();\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\treturn value == null ? '' : value.toString().capitalize();\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn U.parseFloat(value);\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof(value) === 'string' ? value : value == null ? '' : value.toString();\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBoolean(value);\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (value instanceof Date)\n\t\t\t\t\t\treturn value;\n\t\t\t\t\treturn value == null ? new Date() : typeof(value) === 'number' ? new Date(value) : value.toString().parseDate();\n\t\t\t\tcase 'tobase64':\n\t\t\t\tcase 'tohex':\n\t\t\t\t\treturn value instanceof Buffer ? value.toString(item.convert.substring(2)) : value == null ? '' : Buffer.from(value).toString(item.convert.substring(2));\n\t\t\t\tcase 'frombase64':\n\t\t\t\tcase 'fromhex':\n\t\t\t\t\treturn typeof(value) === 'string' ? (value.indexOf(':') === -1 ? Buffer.from(value, item.convert.substring(4)) : value.base64ToBuffer()) : null;\n\t\t\t\tcase 'tojson':\n\t\t\t\t\treturn JSON.stringify(value);\n\t\t\t\tcase 'fromjson':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.parseJSON(true) : null;\n\t\t\t\tcase 'ascii':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.toASCII() : value == null ? '' : value.toString().toASCII();\n\t\t\t\tcase 'slug':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.slug() : value == null ? '' : value.toString().slug();\n\t\t\t\tcase 'crc32':\n\t\t\t\tcase 'crc32unsigned':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.hash(item.convert) : value == null ? '' : value.toString().hash(item.convert);\n\t\t\t\tcase 'md5':\n\t\t\t\tcase 'sha1':\n\t\t\t\tcase 'sha256':\n\t\t\t\tcase 'sha512':\n\t\t\t\t\treturn value == null ? '' : F.Crypto.createHash(item.convert).update(value instanceof Buffer ? value : value.toString()).digest('hex');\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tvar obj = {};\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = item.pathfrom.indexOf('.') === -1 ? data[item.pathfrom] : U.get(data, item.pathfrom);\n\n\t\t\t\tif (item.convert && item.convert !== 'empty')\n\t\t\t\t\tval = convert(item, val);\n\n\t\t\t\tif (item.pathto) {\n\t\t\t\t\tif (item.pathto.indexOf('.') === -1)\n\t\t\t\t\t\tobj[item.pathto] = val;\n\t\t\t\t\telse\n\t\t\t\t\t\tU.set(obj, item.pathto, val);\n\t\t\t\t} else {\n\t\t\t\t\tobj = val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.keep) {\n\t\t\t\tfor (let key in obj)\n\t\t\t\t\t$.data[key] = obj[key];\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\t\t\t\tif (config.path && config.rewrite)\n\t\t\t\t\tU.set($.data, config.path, obj);\n\t\t\t\t$.send('output', obj);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component reads specific values according to the configured map.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { width: 20%; line-height: 23px; float: left; padding: 0 5px; cursor: pointer; }\n\t.CLASS-settings figure .path { width: 35%; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; }\n\t.CLASS-settings figure .to div { color: #4285F4; }\n\t.CLASS-settings figure .from div { color: #B9261A; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer is=\"is-footer\" path=\"CONFIG.path\" config=\"show;text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<ui-bind path=\"?.path\" config=\"hide\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.keep\" config=\"type:checkbox\"><b>Keep the message data</b> and transform only specific paths</ui-component>\n\t\t\t\t<hr />\n\t\t\t</ui-bind>\n\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpread.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpread.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path from\">\n\t\t\t\t\t\t\t<span>From</span><div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpread.path;required:1\">{{ m.pathfrom }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path to\">\n\t\t\t\t\t\t\t<span>To</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpread.path;selectall:1\">{{ m.pathto }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpread.convert\">{{ m.convert | tmpreadconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { pathfrom: 'Temperature', pathto: 'temperature', convert: 'empty' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpread;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem['path' + opt.element.attrd('type')] = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'empty', name: 'No convertor' });\n\t\t\t\ttmp.convertors.push({ id: 'upper', name: 'Upper case' });\n\t\t\t\ttmp.convertors.push({ id: 'lower', name: 'Lower case' });\n\t\t\t\ttmp.convertors.push({ id: 'capitalize', name: 'Capitalize case' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'To number' });\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'To string' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'To boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'To date' });\n\t\t\t\ttmp.convertors.push({ id: 'ascii', name: 'Remove diacritics' });\n\t\t\t\ttmp.convertors.push({ id: 'slug', name: 'To slug' });\n\t\t\t\ttmp.convertors.push({ id: 'md5', name: 'To MD5' });\n\t\t\t\ttmp.convertors.push({ id: 'sha1', name: 'To SHA1' });\n\t\t\t\ttmp.convertors.push({ id: 'sha256', name: 'To SHA256' });\n\t\t\t\ttmp.convertors.push({ id: 'sha512', name: 'To SHA512' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32', name: 'To CRC32' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32unsigned', name: 'To CRC32 unsigned' });\n\t\t\t\ttmp.convertors.push({ id: 'tobase64', name: 'To BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'tohex', name: 'To Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'tojson', name: 'To JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'frombase64', name: 'From BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'fromhex', name: 'From Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'fromjson', name: 'From JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'uid', name: 'Generate UI' + 'D' });\n\t\t\t\ttmp.convertors.push({ id: 'guid', name: 'Generate GUI' + 'D' });\n\n\t\t\t\tThelpers.tmpreadconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpread = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"tapirouter": "<script total>\n\n\texports.id = 'tapirouter';\n\texports.name = 'API Router';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: 'response', schema: [{ id: 'o1984', name: 'users_read/{id}' }] };\n\texports.outputs = [];\n\texports.kind = 'action';\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data.payload || $.data.body;\n\t\t\tif (data && typeof(data.schema) === 'string') {\n\n\t\t\t\tvar index;\n\t\t\t\tvar schema = $.refs.schema;\n\n\t\t\t\tif (!schema) {\n\t\t\t\t\tlet tmp = {};\n\t\t\t\t\tlet meta = data.schema;\n\t\t\t\t\tindex = meta.indexOf('?');\n\t\t\t\t\ttmp.query = index === -1 ? '' : meta.substring(index + 1);\n\n\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\tmeta = meta.substring(0, index);\n\n\t\t\t\t\tindex = meta.indexOf('/');\n\t\t\t\t\ttmp.id = index === -1 ? meta : meta.substring(0, index);\n\t\t\t\t\ttmp.params = index === -1 ? EMPTYARRAY : meta.substring(index + 1).split('/').trim();\n\t\t\t\t\t$.refs.schema = tmp;\n\t\t\t\t\tschema = tmp;\n\t\t\t\t}\n\n\t\t\t\tvar meta = compiled[schema.id];\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tif (schema.params.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = schema.params[i];\n\n\t\t\t\t\t\tlet payload = $.data;\n\t\t\t\t\t\tpayload.query = schema.query ? DEF.parsers.urlencoded(schema.query) : {};\n\t\t\t\t\t\tpayload.payload = data.data;\n\t\t\t\t\t\tpayload.params = params;\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.data[config.path] = [{ id: '400', error: 'Invalid schema data' }];\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data[config.path] = [{ id: '404', error: '404' }];\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component routes incoming Total.js API data according to the defined API schema. The component extends input data (query, payload and params) with parsed data.\n\n__Input & Output data__:\n\n```js\n{\n\t// REQUIRED payload:\n\tpayload: {\n\t\tschema: 'schema_name/{param_1}/{param_2}?query=arguments',\n\t\tdata: {} // optional, request payload\n\t},\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed UA\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\nIn the case of  `error`, the input data is extended by the `response` property with an error.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tapirouter.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"ti ti-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"tresponse": "<script total>\n\n\texports.id = 'tresponse';\n\texports.name = 'Response';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-bullhorn';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'auto', code: 200, path: 'response' };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\texports.outputs = [{ id: 'output', name: 'Log' }];\n\texports.kind = 'output';\n\n\texports.make = function(instance, config) {\n\n\t\tvar nested = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tvar value = config.path ? (nested ? U.get(config.path, $.data) : $.data[config.path]) : $.data;\n\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\tif (value instanceof Array && value.length && value[0].error) {\n\t\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\t\tctrl.response.status = 400;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tctrl.status = 400;\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\tctrl.binary(typeof(value) === 'string' ? Buffer.from(value, 'utf8') : value, config.ctype);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\tctrl.invalid(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.html(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/html');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'xml':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.xml(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/xml');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', value);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tnested = config.path && config.path.includes('.') ? true : false;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond to an HTTP request.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;dirsource:auto|Auto,json|JSON,success|Success,error|Error,empty|Empty response,plain|Plain text,html|HTML,xml|XML,buffer|Buffer\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.type\" config=\"disabled:value === 'auto'\" class=\"m block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;align:1\">Path for reading value</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-bind path=\"?.type\" config=\"show:value==='buffer'\" class=\"m block hidden\">\n\t\t\t<div class=\"padding bg-smoke radius\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.ctype\" config=\"required:1;placeholder:text/html\">Content type</ui-component>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header ui-bind { font-family: var(--monospace); color: #FFF; margin-left: 4px; font-size: 12px; }\n\t.CLASS header ui-bind code { border-radius: var(--radius) 0 0 var(--radius); padding: 2px 3px; }\n\t.CLASS header ui-bind span { background-color: gray; border-radius: 0 var(--radius) var(--radius) 0; padding: 2px 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<code style=\"background:{{ if value.code >= 400 }}#E73323{{ else }}#4285F4{{ fi }}\">{{ value.code }}</code><span>{{ value.type }}</span>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n</body>",
			"troute": "<script total>\n\n\texports.id = 'troute';\n\texports.name = 'Route';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-exchange';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, user: 0, send: 'all', reader: '-' };\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.close = function() {\n\t\t\tprev && prev.remove();\n\t\t\tprev = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [];\n\n\t\t\t\tconfig.timeout && flags.push(F.is5 ? ('<' + Math.ceil(config.timeout / 1000) + 's') : config.timeout);\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tflags.push('<' + Math.ceil(config.limit / 1024) + 'MB');\n\n\t\t\t\tconfig.upload && flags.push((F.is5 ? '@' : '') + 'upload');\n\n\t\t\t\tvar action = function($) {\n\n\t\t\t\t\tvar ctrl = F.is5 ? $ : this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\t// Parse cookies\n\t\t\t\t\tvar cookies = {};\n\t\t\t\t\tvar cookie = ctrl.headers.cookie;\n\n\t\t\t\t\tif (cookie) {\n\t\t\t\t\t\tlet arr = cookie.split(';');\n\t\t\t\t\t\tfor (let c of arr) {\n\t\t\t\t\t\t\tlet line = c.trim();\n\t\t\t\t\t\t\tlet index = line.indexOf('=');\n\t\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\t\tcookies[line.substring(0, index)] = line.substring(index + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar query = ctrl.query;\n\t\t\t\t\tvar body = ctrl.body;\n\t\t\t\t\tvar params = ctrl.params;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\tdata = ctrl.user;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cookies':\n\t\t\t\t\t\t\tdata = cookies;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: body, query: query, user: ctrl.user, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: params, ip: ctrl.ip, split: ctrl.split, cookies: cookies, ua: ctrl.ua };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\n\t\t\t\t\tif (config.upload && config.reader && config.reader !== '-') {\n\t\t\t\t\t\tctrl.files.wait(function(file, next) {\n\t\t\t\t\t\t\tfile.read(function(err, buffer) {\n\t\t\t\t\t\t\t\tvar type = config.reader;\n\t\t\t\t\t\t\t\tif (type === 'datauri')\n\t\t\t\t\t\t\t\t\ttype = 'base64';\n\t\t\t\t\t\t\t\tfile.data = type === 'buffer' ? buffer : buffer.toString(type);\n\t\t\t\t\t\t\t\tif (config.reader === 'datauri')\n\t\t\t\t\t\t\t\t\tfile.data = 'data:' + file.type + ';base64,' + file.data;\n\t\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, () => msg.send('output', data));\n\t\t\t\t\t} else\n\t\t\t\t\t\tmsg.send('output', data);\n\n\t\t\t\t};\n\n\t\t\t\tvar auth = config.user == 1 ? '+' : config.user == 2 ? '-' : '';\n\t\t\t\tvar url = config.url.replace(/#/g, instance.main.id);\n\t\t\t\tprev = F.is5 ? ROUTE(auth + config.method + ' ' + url + (config.action && config.method === 'API' ? (' ' + config.action) : '') + ' ' + flags.join(' '), action) : ROUTE(auth + config.method + ' ' + instance.replace(url) + (config.action && config.method === 'API' ? (' ' + config.action) : ''), action, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n__Output data__:\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number, data:Buffer|String }] // optional\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-bind path=\"flow.head.worker\" config=\"hide:!value || flow.head.origin.length < flow.head.proxyurl.length\" class=\"block\">\n\t\t\t<div class=\"message message-error\"><b><i class=\"ti ti-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t</ui-bind>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE,API|API\">Method</ui-component>\n\t\t\t\t<div class=\"help\">HTTP method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"monospace:1;required:1\">Relative URL address</ui-component>\n\t\t\t\t<div class=\"help\">A relative path to: <ui-bind path=\"flow.head.proxyurl\" config=\"text:value?value:window.location.origin\"></ui-bind><br />It supports wildcard <code>/something/*</code> or dynamic arguments <code>/products/{category}/</code>.<br /><code>#</code> will be replaced with a FlowStream <code>id</code> identifier.</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<hr class=\"nmt\" />\n\n\t\t<ui-bind path=\"?.method\" config=\"show:value === 'API'\" class=\"block hidden m padding bg-smoke radius\">\n\t\t\t<ui-component name=\"input\" path=\"?.action\" config=\"monospace:1;required:1;placeholder:+users_read/{id}\">API Action</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-component name=\"input\" path=\"?.upload\" config=\"type:checkbox\" class=\"m\"><b>Allow uploading files (form data)</b></ui-component>\n\t\t<ui-bind path=\"?.upload\" config=\"enabled\">\n\t\t\t<ui-component name=\"input\" path=\"?.reader\" config=\"dirsource:-|Keep as files,buffer|Buffer,utf8|UTF-8,ascii|ASCII,datauri|Data URI,base64|Base64,hex|Hex\">Read files to</ui-component>\n\t\t</ui-bind>\n\t\t<hr />\n\n\t\t<div class=\"ui-input-label mt10\">Continue as:</div>\n\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t<span>Authorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t<span>Unauthorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t<span>Both</span>\n\t\t\t</div>\n\t\t</ui-component>\n\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"required:1;type:number;format:\">Timeout</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;ricon:!kB;align:1;format:\">Request limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers,cookies|Cookies,user|User\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; color: #999; }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer class=\"monospace\"></footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar template = Tangular.compile('{{ if value.user == 1 }}<i class=\"ti ti-lock red mr10\"></i>{{ else if value.user == 2 }}<i class=\"ti ti-unlock blue mr10\"></i>{{ fi }}<span class=\"method\">{{ value.method }}</span> <a href=\"{{ value.link }}\" target=\"_blank\">{{ value.url }}</a>{{ if value.method === \\'API\\' }} {{ value.action }}{{ fi }}');\n\n\t\tvar reload = function() {\n\t\t\tvar model = CLONE(exports.config);\n\t\t\tmodel.link = model.url = model.url.replace(/#/g, flow.head.id);\n\n\t\t\tif (flow.head.proxypath)\n\t\t\t\tmodel.link = flow.head.origin + (flow.head.proxypath + model.link).replace(/\\/{2,}/g, '/');\n\t\t\telse\n\t\t\t\tmodel.link = flow.head.origin + model.link;\n\n\t\t\texports.element.find('footer').html(template({ value: model }));\n\t\t};\n\n\t\texports.configure = reload;\n\t\treload();\n\t});\n</script>",
			"confirmationcode": "<script total>\n\n\texports.id = 'confirmationcode';\n\texports.name = 'Confirmation code';\n\texports.icon = 'ti ti-barcode';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Security';\n\texports.config = { count: 3, type: 'pin', length: 4, expire: '5 minutes', lock: '', limit: 1 };\n\texports.inputs = [{ id: 'create', name: 'Create' }, { id: 'verify', name: 'Verify' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar codes = {};\n\t\tvar timeout = null;\n\n\t\tvar refreshforce = function() {\n\t\t\ttimeout = null;\n\t\t\tinstance.status({ count: Object.keys(codes).length });\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(refreshforce, 500);\n\t\t};\n\n\t\tinstance.message_create = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar val = null;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'pin':\n\t\t\t\t\tval = U.random_number(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'token':\n\t\t\t\t\tval = GUID(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = U.random_number(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\tval = U.random_string(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'guid':\n\t\t\t\t\tval = GUID();\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar id = typeof(data) === 'string' ? data : data.id;\n\t\t\tvar tmp = codes[id];\n\t\t\tvar msg = {};\n\t\t\tvar now = NOW = new Date();\n\n\t\t\tmsg.success = true;\n\n\t\t\tif (tmp && tmp.locked && tmp.locked > NOW) {\n\t\t\t\tif (tmp.limit <= 0) {\n\t\t\t\t\tmsg.success = tmp.count > 0;\n\n\t\t\t\t\tif (msg.success)\n\t\t\t\t\t\ttmp.value = msg.value = val;\n\n\t\t\t\t\tmsg.slots = tmp.count;\n\t\t\t\t\tmsg.error = 'locked';\n\t\t\t\t\tmsg.limit = tmp.limit;\n\t\t\t\t} else {\n\t\t\t\t\ttmp.limit--;\n\t\t\t\t\ttmp.value = msg.value = val;\n\t\t\t\t\ttmp.slots = msg.slots = tmp.count;\n\t\t\t\t\ttmp.expire = now.add(config.expire);\n\t\t\t\t\tmsg.limit = tmp.limit;\n\t\t\t\t\ttmp.param = data.param;\n\t\t\t\t}\n\t\t\t\t$.send('output', msg);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmsg.value = val;\n\t\t\tmsg.slots = config.count;\n\t\t\tmsg.limit = config.limit;\n\n\t\t\tcodes[id] = { value: val, expire: now.add(config.expire), count: config.count, locked: config.lock ? now.add(config.lock) : null, limit: config.limit, param: data.param };\n\t\t\t$.send('output', msg);\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.message_verify = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar id = data.id;\n\t\t\tvar value = data.value || data.token || data.code || data.pin;\n\t\t\tvar tmp = codes[id];\n\t\t\tvar output = {};\n\n\t\t\toutput.success = false;\n\t\t\toutput.slots = 0;\n\n\t\t\tif (tmp) {\n\n\t\t\t\tif (tmp.value === value) {\n\t\t\t\t\tdelete codes[id];\n\t\t\t\t\toutput.success = true;\n\t\t\t\t\toutput.slots = tmp.count;\n\t\t\t\t\toutput.param = tmp.param;\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\trefresh();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttmp.count--;\n\n\t\t\t\toutput.slots = tmp.count;\n\t\t\t\toutput.error = 'invalid';\n\n\t\t\t\tif (!tmp.count) {\n\t\t\t\t\tdelete codes[id];\n\t\t\t\t\trefresh();\n\t\t\t\t}\n\n\t\t\t\t$.send('output', output);\n\t\t\t} else {\n\t\t\t\toutput.error = 'blocked';\n\t\t\t\t$.send('output', output);\n\t\t\t}\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tvar is = false;\n\t\t\tfor (var key in codes) {\n\t\t\t\tvar item = codes[key];\n\t\t\t\tif (item.expire < NOW) {\n\t\t\t\t\tdelete codes[key];\n\t\t\t\t\tis = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tis && refresh();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar locked = config.lock ? NOW.add(config.lock) : null;\n\n\t\t\tfor (var key in codes) {\n\t\t\t\tvar item = codes[key];\n\t\t\t\titem.locked = locked;\n\t\t\t}\n\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can help you with generating confirmation codes. Keep data structure for inputs according to the documentation below.\n\n### `create` input/output\n\n__Create input__:\n\n- `id {String}` identifier (email, phone number, identifier, etc.)\n- `param {String}` a custom parameter\n\n__Create output__:\n\n- `success {Boolean}` determines if the code is verified or not accroding to its identifier\n- `value {String}` a pin/code/token\n- `param {String}` a custom parameter (it sends only if the value is true)\n- `error {String}` (optional) a simple error identifier, it can contain:\n\t- `locked` the identifier is locked by the previous call\n\n### `verify` input/output\n\n__Verify input__:\n\n- `id {String}` identifier (email, phone number, identifier, etc.)\n- `value {String}` a pin/code/token\n\n__Verify output__:\n\n- `success {Boolean}` determines if the code is verified or not accroding to its identifier\n- `slots {Number}` free slots/attempts\n- `error {String}` (optional) a simple error identifier, it can contain:\n\t- `invalid` the code is invalid\n\t- `404` identifier not found\n\n---\n\n### Settings\n\n- __Lock__ prevents overwriting of the code according to the identifier\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:#confirmcodetypes;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div class=\"grid-2\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.length\" config=\"type:number;min:1;max:500;format:\">Length</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.count\" config=\"type:number;format:\">Count of attempts</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"grid-4\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.expire\" config=\"align:1;placeholder:5 minutes;required:1\">Expiration</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.lock\" config=\"align:1;placeholder:5 minutes\">Lock</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number;format:\">Max. calls per lock</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px 8px; font-size: 12px; }\n\t.CLASS footer > div:first-child { margin-bottom: 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>Pending: <ui-bind path=\"STATUS.count\" config=\"text;empty\" class=\"b\"></ui-bind></div>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\"><span>Type</span><div class=\"right b\">{{ value.type | cl('confirmcodetypes') }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Length</span><div class=\"right\">{{ value.length }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Expiration</span><div class=\"right\">{{ value.expire }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Lock</span><div class=\"right\">{{ value.lock | empty }}</div></div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tDEF.cl.confirmcodetypes = [{ id: 'pin', name: 'PIN' }, { id: 'guid', name: 'Guid' }, { id: 'token', name: 'Token' }, { id: 'number', name: 'Number' }, { id: 'string', name: 'String' }];\n</script>",
			"taction": "<script total>\n\n\texports.id = 'taction';\n\texports.name = 'Action';\n\texports.icon = 'ti ti-totaljs';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { partial: false, name: 'Unknown', input: '', query: '', color: '#68B25B', params: '', user: 0, permissions: '', code: '// model\\n// $.query\\n// $.params\\n// $.headers\\n// $.user\\n\\n$.success();', strerr: false, path: 'response', autoresponse: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.install = function(com) {\n\n\t\tMAIN.flowtaction = {};\n\n\t\tconst ARGS = /\\{{1,2}[a-z0-9_.-\\s]+\\}{1,2}/gi;\n\t\tconst Options = function($, config) {\n\n\t\t\tvar t = this;\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data || typeof(data) !== 'object')\n\t\t\t\tdata = {};\n\n\t\t\tt.id = config.name;\n\t\t\tt.error = new ErrorBuilder();\n\t\t\tt.controller = $.refs.controller;\n\t\t\tt.payload = data.payload || data.model || data.body;\n\n\t\t\tif (typeof(t.payload) !== 'object' || !t.payload)\n\t\t\t\tt.payload = {};\n\n\t\t\tt.message = $;\n\t\t\tt.config = config;\n\t\t\tt.user = data.user;\n\t\t\tt.query = data.query || {};\n\t\t\tt.params = data.params || {};\n\t\t\tt.url = data.url;\n\t\t\tt.language = data.language;\n\t\t\tt.headers = data.headers || {};\n\t\t\tt.files = data.files || [];\n\t\t\tt.cookies = data.cookies || {};\n\t\t\tt.ip = data.ip;\n\t\t\tt.ua = data.ua;\n\t\t\tt.request = data;\n\t\t};\n\n\t\tOptions.prototype = {\n\n\t\t\tget value() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tget model() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tset value(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t},\n\n\t\t\tset model(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.audit = function(message, type) {\n\t\t\tF.audit(this, message ? this.variables(message) : '', type);\n\t\t};\n\n\t\tOptions.prototype.success = function(value) {\n\t\t\tvar self = this;\n\n\t\t\tself.request[self.config.path] = { success: true, value: value };\n\n\t\t\tif (self.config.autoresponse) {\n\t\t\t\tvar refs = self.message.refs;\n\t\t\t\tif (refs) {\n\t\t\t\t\trefs.controller.json(self.request[self.config.path]);\n\t\t\t\t\trefs.controller = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tself.message.send('output', self.request);\n\t\t};\n\n\t\tOptions.prototype.cancel = function() {\n\t\t\tvar self = this;\n\t\t\tself.message.destroy();\n\t\t};\n\n\t\tOptions.prototype.successful = function(callback) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, a, b, c) {\n\t\t\t\tif (err)\n\t\t\t\t\tself.invalid(err);\n\t\t\t\telse\n\t\t\t\t\tcallback.call(self, a, b, c);\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.send = Options.prototype.callback = function(value) {\n\n\t\t\tvar self = this;\n\n\t\t\tif (arguments.length == 0) {\n\t\t\t\treturn function(err, response) {\n\t\t\t\t\terr && self.error.push(err);\n\t\t\t\t\tself.callback(response);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet msg = self.message;\n\t\t\tlet refs = msg.refs;\n\t\t\tlet cfg = self.config;\n\n\t\t\tif (self.error.items.length) {\n\t\t\t\tself.request[cfg.path] = cfg.strerr ? self.error.toString() : self.error.output();\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.invalid(self.error);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('error', self.request);\n\n\t\t\t} else {\n\n\t\t\t\tself.request[cfg.path] = value;\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.json(value);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('output', self.request);\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.done = function(arg) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.error.push(err);\n\t\t\t\t\tself.callback(null);\n\t\t\t\t} else\n\t\t\t\t\tself.callback({ success: true, value: arg === true ? response : arg });\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.invalid = function(error, path, index) {\n\t\t\tvar self = this;\n\t\t\tself.error.push(error, path, index);\n\t\t\tself.callback(null);\n\t\t};\n\n\t\tOptions.prototype.cookie = function(name, value, expire, options) {\n\t\t\tvar self = this;\n\t\t\tif (value === undefined)\n\t\t\t\treturn self.cookies[name];\n\n\t\t\tif (value === null)\n\t\t\t\texpire = '-1 day';\n\n\t\t\tif (self.controller) {\n\t\t\t\tself.controller.cookie(name, value, expire, options);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tOptions.prototype.variables = function(str, data) {\n\n\t\t\tif (str.indexOf('{') === -1)\n\t\t\t\treturn str;\n\n\t\t\tvar $ = this;\n\n\t\t\treturn str.replace(ARGS, function(text) {\n\t\t\t\tvar l = text[1] === '{' ? 2 : 1;\n\t\t\t\tvar key = text.substring(l, text.length - l).trim();\n\t\t\t\tvar val = null;\n\t\t\t\tvar five = key.substring(0, 5);\n\t\t\t\tif (five === 'user.') {\n\t\t\t\t\tif ($.user) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.user[key] : U.get($.user, key);\n\t\t\t\t\t}\n\t\t\t\t} else if (five === 'data.') {\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? data[key] : U.get(data, key);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar six = key.substring(0, 6);\n\t\t\t\t\tif (six === 'model.' || six === 'value.') {\n\t\t\t\t\t\tif ($.model) {\n\t\t\t\t\t\t\tkey = key.substring(6);\n\t\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.model[key] : U.get($.model, key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (six === 'query.')\n\t\t\t\t\t\tval = $.query[key.substring(6)];\n\t\t\t\t\telse if (key.substring(0, 7) === 'params.')\n\t\t\t\t\t\tval = $.params[key.substring(7)];\n\t\t\t\t}\n\t\t\t\treturn val == null ? text : val;\n\t\t\t});\n\n\t\t};\n\n\t\tMAIN.flowtaction.Options = Options;\n\t\tMAIN.flowtaction.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t};\n\n\texports.uninstall = function() {\n\t\tdelete MAIN.flowtaction;\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar cfg = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar opt = new MAIN.flowtaction.Options($, cfg);\n\t\t\tif (fn) {\n\n\t\t\t\t// check user\n\t\t\t\tif (cfg.user || cfg.permissions) {\n\n\t\t\t\t\tif ((cfg.user === 2 && opt.user) || (cfg.user === 1 && !opt.user)) {\n\t\t\t\t\t\topt.invalid(401);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cfg.user === 1 && cfg.permissions) {\n\t\t\t\t\t\tlet permissions = cfg.permissions.slice(0);\n\t\t\t\t\t\tpermissions.unshift(opt);\n\t\t\t\t\t\tif (UNAUTHORIZED.apply(global, permissions))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check data\n\t\t\t\tlet tmp;\n\n\t\t\t\tif (cfg.input) {\n\t\t\t\t\ttmp = cfg.input.transform(opt.payload, cfg.partial, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.payload = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.query) {\n\t\t\t\t\topt.error.prefix = 'query.';\n\t\t\t\t\ttmp = cfg.query.transform(opt.query, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.query = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.params) {\n\t\t\t\t\topt.error.prefix = 'params.';\n\t\t\t\t\ttmp = cfg.params.transform(opt.params, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.params = tmp.response;\n\t\t\t\t}\n\n\t\t\t\topt.error.prefix = '';\n\n\t\t\t\ttry {\n\t\t\t\t\tfn(opt, opt.payload);\n\t\t\t\t} catch (e) {\n\t\t\t\t\topt.invalid(e);\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\topt.invalid(501);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tfn = config.code.includes('await ') ? new MAIN.flowtaction.AsyncFunction('$', 'model', 'data', 'value', config.code) : new Function('$', 'model', 'data', 'value', config.code);\n\n\t\t\tcfg = {};\n\t\t\tfor (var key in config) {\n\t\t\t\tif (key !== 'code')\n\t\t\t\t\tcfg[key] = config[key];\n\t\t\t}\n\n\t\t\tcfg = instance.replace(cfg);\n\t\t\tcfg.input = cfg.input ? cfg.input.toJSONSchema() : null;\n\t\t\tcfg.query = cfg.query ? cfg.query.toJSONSchema() : null;\n\t\t\tcfg.params = cfg.params ? cfg.params.toJSONSchema() : null;\n\t\t\tcfg.permissions = cfg.permissions ? cfg.permissions.split(',').trim() : null;\n\n\t\t\tif (cfg.permissions && !cfg.permissions.length)\n\t\t\t\tcfg.permissions = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component creates similar functionality as Total.js Actions.\n\n## Payload\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\n## Custom scripting\n\n- supports `await`\n- supports Total.js global functions\n\n__Properties__:\n\n- `$.model {Object}` or `model` parsed payload\n- `$.query {Object}` parsed URL query arguments\n- `$.params {Object}` parsed URL params\n- `$.cookies {Object}` parsed cookies\n- `$.files [Object]` uploaded files\n- `$.user {Object}` user session (optional)\n- `$.headers {Object}` request headers\n- `$.ip {String}` IP address (optional)\n- `$.language {String}` optional\n- `$.ua {String}` parsed user agent (optional)\n- `$.url {String}` URL endpoint\n- `$.message {Object}` Flow message instance\n- `$.request {Object}` Flow message payload data\n\n__Methods__:\n\n- `$.invalid(error)` responds with an error and ends the action\n- `$.success([value])` responds with `{ success: true, value }` object and ends the action\n- `$.send(value)` responds with `value` object and ends the action\n- `$.cancel()` ends the action without response\n- `$.audit(message, [type])` writes audit\n\n## Supported types\n\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\" style=\"padding-bottom:5px\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\">Action name</ui-component>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.color\" config=\"required:1;type:color\">Color</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div class=\"pull-left\">\n\t\t\t\t<div class=\"ui-input-label\">Allow only:</div>\n\t\t\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t\t\t<span>Authorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t\t\t<span>Unauthorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t\t\t<span>Both</span>\n\t\t\t\t\t</div>\n\t\t\t\t</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"pull-left\" style=\"margin-left:20px\">\n\t\t\t\t<div style=\"height:25px\"></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.autoresponse\" config=\"type:checkbox\">Auto HTTP response</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.input\" config=\"monospace:1;maxlength:100000;placeholder:name\\:Name, *email\\:Email\">Payload schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.query\" config=\"monospace:1;maxlength:100000;placeholder:page\\:Number\">Query arguments schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"padding bg-smoke radius npb\">\n\t\t\t\t<div class=\"grid-3\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.params\" config=\"monospace:1;maxlength:100000;placeholder:*id\\:String\">Params schema</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.permissions\" config=\"monospace:1;maxlength:100000;placeholder:admin, director\">Permissions</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;required:1;placeholder:response\">Path for storing a response</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .content { min-width: 200px; }\n\t.CLASS header { color: #FFF; padding: 5px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px 5px; }\n\t.CLASS .ti { color: #999; }\n\t.CLASS footer > div { padding: 10px 10px 0; }\n\t.CLASS-code .CodeMirror { border: 0; border-left: 1px solid #E0E0E0; border-radius: none; }\n\t.CLASS-code-editor { margin-left: 200px; }\n\t.CLASS-code-info { float: left; width: 200px; padding: 12px; font-size: 12px; }\n\t.CLASS-code-info code { overflow-wrap: break-word; white-space: pre-wrap; display: block; padding: 0 3px; }\n\t.CLASS-code-button { padding: 10px; border-top: 1px solid #E0E0E0; }\n\t.CLASS-code-button button { font-size: 14px; height: 36px; font-weight: bold; }\n\t.CLASS-settings .iconmenu { height: 80px; }\n\t.CLASS-settings .iconmenu > div { height: 76px; }\n\t.CLASS-settings .iconmenu span { padding-top: 8px; }\n\t.CLASS-settings .iconmenu i { padding-top: 16px; }\n\t.ui-dark .CLASS-code .CodeMirror { border-left-color: #404040; }\n\t.ui-dark .CLASS-code-button { border-top-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"background-color:{{ value.color }}\">{{ value.name }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button exec\" data-exec=\"=sourcecode\"><i class=\"ti ti-js\"></i>Script</button></div>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\" class=\"block fs11\" style=\"padding:10px\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ if value.autoresponse }}<div class=\"b\"><i class=\"ti ti-check-square green mr5\"></i>Auto HTTP response</div>{{ fi }}\n\t\t\t\t<div><i class=\"ti ti-check-square mr5\"></i>{{ if value.user === 1 }}Authorized only{{ else if value.user === 2 }}Unauthorized only{{ else }}All allowed{{ fi }}</div>\n\t\t\t\t{{ if value.partial }}<div><i class=\"ti ti-check-square green mr5\"></i>Partial data</div>{{ fi }}\n\t\t\t\t{{ if value.input }}<div><i class=\"ti ti-check-square green mr5\"></i>Payload</div>{{ fi }}\n\t\t\t\t{{ if value.query }}<div><i class=\"ti ti-check-square green mr5\"></i>URL Query arguments</div>{{ fi }}\n\t\t\t\t{{ if value.params }}<div><i class=\"ti ti-check-square green mr5\"></i>Params</div>{{ fi }}\n\t\t\t\t{{ if value.permissions }}<div><i class=\"ti ti-check-square green mr5\"></i>Permissions</div>{{ fi }}\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (!common.codeactions) {\n\t\t\tcommon.codeactions = {};\n\t\t\tW.codeactionssubmit = function(el) {\n\n\t\t\t\tif (BLOCKED('codeaction', 1000))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar winid = ATTRD(el);\n\t\t\t\tvar id = winid.substring(4);\n\t\t\t\tvar code = common.codeactions[winid];\n\t\t\t\tvar instance = flowinstances.instances[id];\n\t\t\t\tvar config = instance.config;\n\t\t\t\tconfig.code = code;\n\t\t\t\tinstance.reconfigure(config);\n\t\t\t};\n\t\t\tW.codeactionsinit = function(com) {\n\t\t\t\tvar save = () => W.codeactionssubmit(com.element);\n\t\t\t\tvar map = { 'Cmd-S': save, 'Ctrl-S': save };\n\t\t\t\tcom.editor.addKeyMap(map);\n\t\t\t};\n\t\t}\n\n\t\texports.renderschema = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar config = exports.config;\n\n\t\t\tvar write = function(name, label) {\n\t\t\t\tif (config[name]) {\n\t\t\t\t\tbuilder.push('<div class=\"b badge badge-gray\" style=\"display:block\">{0}</div>'.format(label));\n\t\t\t\t\tvar val = config[name].replace(/\\,/g, '\\n');\n\t\t\t\t\tbuilder.push('<div class=\"m mt5\"><code>{0}</code></div>'.format(val));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twrite('params', 'Dynamic parameters');\n\t\t\twrite('query', 'URL query arguments');\n\t\t\twrite('input', 'Payload');\n\n\t\t\treturn builder.join('');\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar key = 'code' + exports.id;\n\t\t\tvar win = common.windows.findItem('id', key);\n\t\t\tif (win) {\n\t\t\t\tvar path = '*codeactions.' + key;\n\t\t\t\tvar prev = GET(path);\n\t\t\t\tif (prev !== exports.config.code)\n\t\t\t\t\tSET(path, exports.config.code);\n\t\t\t\twin.element.find('.CLASS-code-info').html(exports.renderschema());\n\t\t\t}\n\t\t};\n\n\t\texports.sourcecode = function() {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar path = '*codeactions.code' + exports.id;\n\t\t\tvar winid = 'code' + exports.id;\n\n\t\t\tif (common.windows.findItem('id', winid)) {\n\t\t\t\tSETTER('windows/focus', winid);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSET(path, config.code);\n\n\t\t\tPUSH('common.windows', { id: winid, cachekey: 'codeaction', cache: 'readme', html: '<div class=\"CLASS-code invisible\"><div class=\"CLASS-code-info noscrollbar\">{1}</div><div class=\"CLASS-code-editor\"><ui-component name=\"codemirror\" path=\"{0}\" config=\"type:javascript;parent:auto;margin:60;$init:codeactionsinit\"></ui-component></div><div class=\"CLASS-code-button\"><button class=\"button exec\" data-exec=\"codeactionssubmit\">Apply</button></div></div>'.format(path, exports.renderschema()), title: 'Action script: ' + config.name, actions: { move: true, autosave: true, close: true, maximize: true, minimize: false }, offset: { x: ((WW / 2) - 275) >> 0, y: ((WH / 2) - 250) >> 0, width: 750, height: 500, minwidth: 200, minheight: 300, maxwidth: 1200, maxheight: 1200 }, make: function(el) {\n\t\t\t\tel.closest('.ui-windows-item').css('z-index', 50);\n\t\t\t\tel.find('.CLASS-code').rclass('invisible', 500);\n\t\t\t}});\n\t\t};\n\n\t});\n\n</script>",
			"chatgpt": "<script total>\n\n\texports.id = 'chatgpt';\n\texports.name = 'ChatGPT';\n\texports.icon = 'ti ti-robot-alt';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.group = 'Services';\n\texports.config = { model: 'gpt-3.5-turbo-instruct', apikey: '', question: '' };\n\texports.inputs = [{ id: 'input', name: 'Question' }];\n\texports.outputs = [{ id: 'output', name: 'Answer' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function (instance, config) {\n\n\t\tconst URL = 'https://api.openai.com/v1/completions';\n\n\t\tvar model;\n\t\tvar cfg;\n\n\t\tinstance.message = async function ($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data) {\n\t\t\t\t$.send('error', 'Input text is missing');\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tswitch (cfg.model) {\n\t\t\t\tcase 'gpt-3.5-turbo-instruct':\n\n\t\t\t\t\tif (data.text)\n\t\t\t\t\t\tdata = data.text;\n\n\t\t\t\t\tif (typeof data !== 'string') {\n\t\t\t\t\t\t$.send('error', 'Error: Wrong input format');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tRESTBuilder.POST(URL, { model: cfg.model, prompt: config.question ? (config.question + ' ' + data) : data, temperature: 0, max_tokens: 220, frequency_penalty: 2 }).header('Authorization', 'Bearer ' + cfg.apikey).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response.choices) {\n\t\t\t\t\t\t\tvar text = response.choices[0].text;\n\t\t\t\t\t\t\t$.send('output', text);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'gpt-3.5-turbo':\n\t\t\t\tcase 'gpt-4':\n\n\t\t\t\t\tvar messages = $.data.messages || $.data;\n\n\t\t\t\t\tif (!(messages instanceof Array)) {\n\t\t\t\t\t\t$.send('error', 'Error: Input must be array of messages');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!messages[0] || !messages[0].role) {\n\t\t\t\t\t\t$.send('error', 'Error: Each message object must have message role attribute : user or assistant or system');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tconfig.question && messages.unshift({ role: 'user', content: config.question });\n\n\n\t\t\t\t\tvar url = 'https://api.openai.com/v1/chat/completions';\n\t\t\t\t\tRESTBuilder.POST(url, { model: cfg.model, messages: messages }).header('Authorization', 'Bearer ' + cfg.apikey).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response.choices) {\n\t\t\t\t\t\t\tvar text = response.choices[0].message.content;\n\n\t\t\t\t\t\t\t$.send('output', text);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'whisper-1':\n\t\t\t\t\tvar path = $.data.path || $.data;\n\n\t\t\t\t\tvar url = 'https://api.openai.com/v1/audio/transcriptions';\n\t\t\t\t\tRESTBuilder.POST(url, { model: cfg.model }).header('Authorization', 'Bearer ' + cfg.apikey).file('file', path).timeout(60000).keepalive().callback(function (err, response, output) {\n\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (response && response)\n\t\t\t\t\t\t\t$.send('output', response);\n\n\t\t\t\t\t});\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function () {\n\t\t\tcfg = instance.replace(config);\n\t\t};\n\n\t\tinstance.configure();\n\t};\n</script>\n\n<readme>\nThis component can talk to ChatGPT.\n\n## Input\n\nInput will depend on selected model\n\n- __CPT 3.5 Turbo__ and __CPT 4__\n```js\n\n// Object\n{\nmessages : [{ role: 'user', content: 'Text' }]\n}\n\n// or\n\n\n// Array\n[{ role: 'assistant', content: 'Text' }]\n```\n\n- __Whisper__\n```js\n\n// Object\n{\npath : 'path-to-file'\n}\n\n// or\n\n\n// String\n'path-to-file'\n```\n\n- __CPT 3.5 Turbo instruct__\n```js\n\n// Object\n{\ntext : 'your question'\n}\n\n// or\n\n\n// String\n'your question'\n```\n\n\n## Output\n\nOutput also depends on selected model\n- __CPT 3.5 Turbo__ and __CPT 4__\n```js\n'Response from assistant'\n```\n\n- __Whisper__\n```js\n\n// Object\n{\ntext : 'transcipted text'\n}\n```\n- __CPT 3.5 Turbo instruct__\n```js\n\n// String\n'Response from assistant'\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"input\" path=\"?.apikey\" config=\"camouflage:1;required:1\">API key</ui-component>\n\t\t\t<div class=\"help\"><a href=\"https://platform.openai.com/account/api-keys\" target=\"_blank\"><i class=\"ti ti-external\"></i>Generate API key</a></div>\n\t\t</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"input\" path=\"?.model\" config=\"type:select;dirsource:gpt-4|GPT 4,gpt-3.5-turbo|GPT 3.5 Turbo,gpt-3.5-turbo-instruct|GPT 3.5 Turbo instruct,Whisper|whisper-1\">Model</ui-component>\n\t\t</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"input\" path=\"?.question\" config=\"type:multiline\">Question</ui-component>\n\t\t\t<div class=\"help\">This question will be added before your messages</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"trigger": "<script total>\n\n\texports.id = 'trigger';\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '4';\n\texports.icon = 'ti ti-start';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false, prompt: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar regprompt = /\\{prompt\\}/g;\n\n\t\tinstance.trigger = function(msg) {\n\n\t\t\tvar random = !config.prompt && config.random;\n\t\t\tvar val = config.data;\n\t\t\tvar prompt = msg.value || '';\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = random ? U.random() : val.replace(regprompt, prompt).parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? Buffer.from(U.random_string()) : Buffer.from(val.replace(regprompt, prompt), 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = random ? NOW.add('-' + U.random(500, 10) + ' seconds') : val.replace(regprompt, prompt).parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? {} : (new Function('return ' + val.replace(regprompt, prompt)))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tvar tmp = random ? '' : val.replace(regprompt, prompt);\n\t\t\t\t\tval = random ? U.random() % 2 === 0 : tmp === 'true' || tmp === 'on' || tmp === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = random ? U.random_string(20) : val.replace(regprompt, prompt);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"mt10 m\">\n\t\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.prompt\" config=\"type:checkbox\">Prompt</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"disabled\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"block hidden m mt10\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.promptlabel\" config=\"placeholder:Enter a value\"><b>Prompt label</b></ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<ui-bind path=\"?\" config=\"hide:value.hide && !value.prompt\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"help hidden\">The prompt value will be assigned to the <code>{prompt}</code> keyword in the code.</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button name=\"run\">Run</button>\n\t</div>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\t\texports.click = function(el) {\n\t\t\tif (exports.config.prompt) {\n\t\t\t\tvar opt = {};\n\t\t\t\topt.name = exports.config.promptlabel || 'Enter a value';\n\t\t\t\topt.value = '';\n\t\t\t\topt.callback = function(val) {\n\t\t\t\t\texports.trigger({ value: val });\n\t\t\t\t};\n\t\t\t\tSETTER('prompt/show', opt);\n\t\t\t} else\n\t\t\t\texports.trigger();\n\t\t};\n\t});\n</script>",
			"postgresql": "<script total>\n\n\texports.id = 'postgresql';\n\texports.name = 'PostgreSQL';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['pg'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst { Pool } = require('pg')\n\t\tvar PG;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!PG || !PG.pool)\n\t\t\t\treturn $.send('output', { error: 'Postgre connection not configured' });\n\n\t\t\tPG.pool.query(data.query, (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\t\t\t\t\t\n\t\t\t\tvar { command, rows, rowCount } = response;\n\t\t\t\t$.send('output', { command, rows, rowCount });\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (PG && PG.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tPG = exports.POOLS[config.connection];\n\t\t\t\tPG.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = new Pool({ connectionString: config.connection });\n\t\t\tPG = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.on('error', (err, client) => {\n\t\t\t\tconsole.log('[PG] Unexpected error on idle client', err);\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (PG) {\n\t\t\t\tPG.count--;\n\t\t\t\tif (PG.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tPG.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tPG = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nPostgreSQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\nOutput:\n```javascript\n{\n\tcommand: 'INSERT', // SELECT, etc.\n\trows: [], // \n\trowCount: 1\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.connection\" config=\"required:1\">Connection string</ui-component>\n\t\t\t\t<div class=\"help\">e.g.: postgresql://user:password@localhost:5432/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.error\" config=\"text\" class=\"red\"></ui-bind>\n\t</footer>\n</body>",
			"printjson": "<script total>\n\n\texports.id = 'printjson';\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-component { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .ti-copy, .ui-objecttree .ti-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('ti-copy');\n\t\tel.tclass(iscopy ? 'ti-copy' : 'ti-link').tclass('ti-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('ti-check').tclass(iscopy ? 'ti-copy' : 'ti-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-component name=\"objecttree\" path=\"!STATUS\" config=\"exec:FUNC.printjson_click\" class=\"selectable\"></ui-component>\n\t</footer>\n</body>",
			"tauthtoken": "<script total>\n\n\texports.id = 'tauthtoken';\n\texports.name = 'Auth token';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-key';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { token: '', code: 401, header: 'x-token', error: 'Unauthorized', ddos: 0 };\n\texports.inputs = [{ id: 'input', name: 'Request' }];\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar maintoken = '';\n\t\tvar ddos = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tvar token = ctrl.headers[config.header];\n\n\t\t\tif (config.ddos && ddos[ctrl.ip] > config.ddos)\n\t\t\t\ttoken = '';\n\n\t\t\tif (token === maintoken) {\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\n\t\t\t\tif (config.ddos)\n\t\t\t\t\tddos[ctrl.ip] = (ddos[ctrl.ip] || 0) + 1;\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tctrl.json([{ name: config.code + '', error: config.error }]);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\t\t\tinstance.configure();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tmaintoken = instance.replace(config.token);\n\t\t};\n\n\t\tinstance.service = function(counter) {\n\t\t\tif (counter % 10)\n\t\t\t\tddos = {};\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component must be used only with REST Route component. It reads a token from the request header and compares it with the token declared in the configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:1\">Token</ui-component>\n\t\t<div class=\"help\"><span class=\"link exec\" data-exec=\"tmptokenauthgenerate\">Generate token</span>. It can contain a global variable in the form <code>{variable}</code>.</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.header\" config=\"required:1;type:lower\">Header</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.error\" config=\"required:1\">Error message</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.ddos\" config=\"required:1;type:number;format:\">DDOS protection</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"help\">How many times can the client requested your API with a bad key? The internal IP database is cleared every 10 minutes. <code>0</code> disables DDOS protection.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer ui-bind { font-family: var(--monospace); }\n\t.CLASS footer .code { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<div><ui-bind path=\"$CONFIG.code\" config=\"text\" class=\"code\"></ui-bind><ui-bind path=\"$CONFIG.header\" config=\"text\"></ui-bind></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!W.tmptokenauthgenerate) {\n\t\t\tW.tmptokenauthgenerate = function(el) {\n\t\t\t\tel.scope().set('token', W['GUI' + 'D'](30), 'show');\n\t\t\t};\n\t\t}\n\t});\n\n</script>",
			"code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, name: 'Code', code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n\nTo send data to the default output use `send(somedata);`\nTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n- first output--> `send(somedata)` or `$.send('output', somedata)`\n- second output --> `$.send('output2', somedata)`\n- ...\n- 5th output --> `$.send('output5', somedata)`\n- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-10 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.name\">Name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.outputs\" config=\"type:number;format:\">Number of outputs</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></ui-component>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\tTOUCH(function(exports, init) {\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar count = exports.instance.config.outputs;\n\t\t\t\tfor (let i = 1; i <= count; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + (i === 1 ? '' : i), name: (count === 1 ? 'Output' : 'Output #' + i) });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"oauth2": "<script total>\n\n\texports.id = 'oauth2';\n\texports.name = 'OAuth 2.0';\n\texports.icon = 'ti ti-key';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'API';\n\texports.config = { urltoken: '', urlauthorize: '', variable: '', clientid: '', clientsecret: '' };\n\n\texports.call = function(data, callback) {\n\n\t\tswitch(data.type) {\n\t\t\tcase 'oauth':\n\t\t\t\tvar opt = {};\n\t\t\t\topt.method = 'POST';\n\t\t\t\topt.url = data.data.url;\n\t\t\t\topt.type = 'json';\n\t\t\t\tdelete data.data.url;\n\t\t\t\topt.body = JSON.stringify(data.data);\n\t\t\t\topt.callback = function(err, response) {\n\t\t\t\t\tvar response = response.body.parseJSON(true);\n\t\t\t\t\tcallback(response);\n\t\t\t\t};\n\t\t\t\tREQUEST(opt);\n\t\t\t\tbreak;\n\t\t}\n\n\t};\n\n\texports.make = function(instance, config) {\n\t\tinstance.configure = function() {\n\t\t\tif (config.variable && config.accesstoken) {\n\t\t\t\tinstance.main.variables[config.variable] = config.accesstoken;\n\t\t\t\tinstance.newvariables(instance.main.variables);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component can obtain OAuth 2.0 access token from 3rd party service.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings padding\">\n\t\t<p>To obtain an OAuth 2.0 access token, you must follow the OAuth 2.0 specification on the service you want to use.</p>\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.urlauthorize\" config=\"required:1;type:url;innerlabel:1;placeholder:Enter a value\">Authorize URL</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.urltoken\" config=\"required:1;type:url;innerlabel:1;placeholder:Enter a value\">Token URL</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr class=\"nmt\" />\n\t\t<div class=\"fs12 m\"><i class=\"ti ti-globe mr5\"></i>Your redirect URL: <b><ui-bind path=\"flow.head.notify\" config=\"text;empty\" class=\"red\"></ui-bind></b></div>\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.clientid\" config=\"required:1;camouflage:1;innerlabel:1;placeholder:Enter client id\">Client ID</ui-component>\n\t\t\t\t<div class=\"help\">Required</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.clientsecret\" config=\"required:1;camouflage:1;innerlabel:1;placeholder:Enter client secret\">Client secret</ui-component>\n\t\t\t\t<div class=\"help\">Required</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.scope\" config=\"required:0;innerlabel:1;placeholder:email,profile\">Scope</ui-component>\n\t\t\t\t<div class=\"help\">Optional</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m center\">\n\t\t\t<p>To obtain of OAuth 2.0 access token, you must click on the button below.</p>\n\t\t\t<div style=\"width:150px;margin:0 auto\">\n\t\t\t\t<button class=\"button exec b\" data-exec=\"tmpoauth2.authorize\"><ui-bind path=\"?\" config=\"enabled:value.urlauthorize && value.urltoken && value.clientid && value.clientsecret\" disabled></ui-bind><i class=\"ti ti-key\"></i>Authorize</button>\n\t\t\t</div>\n\t\t\t<br />\n\t\t</div>\n\t\t<ui-bind path=\"?.accesstoken\" config=\"show\" class=\"hidden\">\n\t\t\t<div class=\"grid-2\">\n\t\t\t\t<div class=\"m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.accesstoken\" config=\"required:1;disabled:1;innerlabel:1;placeholder:Will be filled automatically after authorization\">Access token</ui-component>\n\t\t\t\t\t<div class=\"help\">OAuth 2.0 access token</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.variable\" config=\"innerlabel:1;placeholder:Enter a variable key\">Assign token to the global variable</ui-component>\n\t\t\t\t\t<div class=\"help\">The access token will be automatically assigned into the global variables</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\t\t<ui-bind path=\"?.response\" config=\"html pre:value ? Thelpers.jsonformat(value) : ''__show\" class=\"hidden bg-smoke block\">\n\t\t\t<div class=\"padding\">\n\t\t\t\t<div class=\"fs12\">Response:</div>\n\t\t\t\t<pre style=\"font-size:12px;tab-size:4;margin:0;padding:5px 0\"></pre>\n\t\t\t\t<div class=\"help red\"><i class=\"ti ti-exclamation-triangle\"></i>Don't forget to save settings if you change something</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .exec { cursor: pointer; }\n\t.CLASS footer { padding: 8px 8px; font-size: 11px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.accesstoken\" config=\"show\">\n\t\t\t<div><span class=\"exec link\" data-exec=\"tmpoauth2.copy\"><i class=\"ti ti-copy mr5\"></i>Copy access token</span></div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\n\t\tvar tmp = W.tmpoauth2;\n\t\tif (!tmp) {\n\t\t\ttmp = W.tmpoauth2 = {};\n\t\t\ttmp.authorize = function(el) {\n\t\t\t\tvar scope = el.scope();\n\t\t\t\tvar model = scope.get();\n\t\t\t\tvar args = {};\n\t\t\t\targs.client_id = model.clientid;\n\t\t\t\targs.response_type = 'code';\n\t\t\t\tif (model.scope)\n\t\t\t\t\targs.scope = model.scope;\n\t\t\t\targs.redirect_uri = args.redirect_url = flow.head.notify;\n\t\t\t\targs.state = exports.id;\n\n\t\t\t\tfor (var key in args) {\n\t\t\t\t\tvar val = args[key];\n\t\t\t\t\tif (val && val.indexOf('{'))\n\t\t\t\t\t\targs[key] = val.replace(/\\{.*?\\}/g, text => flow.variables[text.substring(1, text.length - 1).trim()] || text);\n\t\t\t\t}\n\n\t\t\t\tvar draft = exports.draft();\n\t\t\t\tW.open(draft.urlauthorize + QUERIFY(args));\n\t\t\t};\n\n\t\t\ttmp.copy = function(el) {\n\t\t\t\tvar config = flow.config[ATTRD(el)];\n\t\t\t\tSETTER('clipboard/copy', config.accesstoken);\n\t\t\t\tSETTER('notify/success', 'Copied');\n\t\t\t};\n\t\t}\n\n\t\texports.notify = function(data) {\n\t\t\tvar draft = exports.draft();\n\t\t\tif (draft) {\n\t\t\t\tvar query = data.query;\n\t\t\t\tvar model = {};\n\t\t\t\tmodel.url = draft.urltoken;\n\t\t\t\tmodel.client_id = draft.clientid;\n\t\t\t\tmodel.client_secret = draft.clientsecret;\n\t\t\t\tmodel.code = query.code;\n\t\t\t\tmodel.redirect_uri = flow.head.notify;\n\t\t\t\tmodel.grant_type = 'authorization_code';\n\n\t\t\t\tfor (var key in model) {\n\t\t\t\t\tvar val = model[key];\n\t\t\t\t\tif (val && val.indexOf('{'))\n\t\t\t\t\t\tmodel[key] = val.replace(/\\{.*?\\}/g, text => flow.variables[text.substring(1, text.length - 1).trim()] || text);\n\t\t\t\t}\n\n\t\t\t\texports.call({ type: 'oauth', data: model }, ERROR(function(response) {\n\t\t\t\t\texports.draft('accesstoken @change', response.access_token);\n\t\t\t\t\texports.draft('response', response);\n\t\t\t\t}), true);\n\n\t\t\t}\n\t\t};\n\n\t});\n</script>",
			"secrets": "<script total>\n\n\texports.id = 'secrets';\n\texports.name = 'Secrets';\n\texports.icon = 'ti ti-lock';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar keys = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tif (data && typeof(data) === 'object') {\n\t\t\t\tvar tmp = {};\n\t\t\t\tvar is = false;\n\t\t\t\tfor (var key in data) {\n\t\t\t\t\tvar val = data[key];\n\t\t\t\t\tif (val != null) {\n\t\t\t\t\t\tval = val.toString();\n\t\t\t\t\t\ttmp[key] = val;\n\t\t\t\t\t\tkeys[key] = 1;\n\t\t\t\t\t\tis = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (is) {\n\t\t\t\t\tinstance.newsecrets(data);\n\t\t\t\t\tinstance.status(Object.keys(keys));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component creates secret variables from the input message data. You can read data easily via `{key}` in the component's settings. Keys and their values must be of String type.\n\n```js\n{\n\tkey1: value1,\n\tkey2: value2,\n\tkeyN: valueN\n}\n```\n</readme>\n\n<style>\n\t.CLASS footer { font-size: 11px; padding: 10px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer is=\"is-footer\" path=\"STATUS\" config=\"template;show:value && value.length\" class=\"block hidden\">\n\t\t<script type=\"text/html\">\n\t\t\t{{ foreach m in value }}\n\t\t\t<div><i class=\"ti ti-key mr5\"></i>{{ m }}</div>\n\t\t\t{{ end }}\n\t\t</script>\n\t</footer>\n</body>",
			"request": "<script total>\n\n\texports.id = 'request';\n\texports.name = 'HTTP Request';\n\texports.group = 'Common';\n\texports.version = '7';\n\texports.icon = 'ti ti-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, secret: '', nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tvar secret = config.secret ? $.variables(config.secret, true) : null;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (secret && opt.body) {\n\t\t\t\topt.body = U.encrypt_data(opt.body, secret);\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers['X-Encryption'] = 'a';\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (secret && response.headers['x-encryption'])\n\t\t\t\t\tbody = U.decrypt_data(body, secret);\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.indexOf(';', 7);\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 5px 10px 10px; }\n\t.CLASS .status span { padding: 1px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<ui-bind path=\"CONFIG\" config=\"template;show:value.url\" class=\"block status\">\n\t\t<script type=\"text/html\">\n\t\t\t<div class=\"monospace hellip\" title=\"{{ value.url }}\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t</script>\n\t</ui-bind>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH;required:1\">Method</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1\"><b>URL address</b></ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number;format:\">Timeout</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-clock\"></i><ui-bind path=\"?.timeout\" config=\"text:((value||0)/1000).floor(2)+' sec.'\"></ui-bind><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number\">Max. size</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-calculator\"></i><ui-bind path=\"?.limit\" config=\"text:(value||0).filesize()\"></ui-bind><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.serialize\" config=\"dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:None;dirempty:None\" class=\"m\">Data serialization</ui-component>\n\t\t<ui-component name=\"keyvalue\" path=\"?.headers\" config=\"placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</ui-component>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<ui-component name=\"keyvalue\" path=\"?.cookies\" config=\"placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</ui-component>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.parse\" config=\"type:checkbox\">Parse Response to Object</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.dnscache\" config=\"type:checkbox\">Enable DNS cache</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.insecure\" config=\"type:checkbox\">Allow insecure connection</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.xhr\" config=\"type:checkbox\">Add XHR header</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.secret\" config=\"camouflage:1;icon:ti ti-totaljs\">Total.js Encryption/Decryption secret</ui-component>\n\t</div>\n</settings>",
			"tsqlquery": "<script total>\n\n\texports.id = 'tsqlquery';\n\texports.name = 'SQL query';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.group = 'Total.js';\n\texports.version = '1';\n\texports.config = { id: 'default', sql: 'SELECT 1', first: false, path: '' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar id = $.variables(config.id, true);\n\t\t\tvar sql = $.variables(config.sql, true, val => typeof(val) === 'string' && val[0] === '!' ? val.substring(1) : PG_ESCAPE(val));\n\n\t\t\tDATA.query(id, sql).callback(function(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\t$.send('error', err);\n\t\t\t\t} else {\n\n\t\t\t\t\tif (config.first)\n\t\t\t\t\t\tresponse = response[0];\n\n\t\t\t\t\tif (config.path) {\n\t\t\t\t\t\tU.set($.data, config.path, response);\n\t\t\t\t\t\tresponse = $.data;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.send('output', response);\n\t\t\t\t}\n\t\t\t});\n\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component executes SQL command on the specifi connection. This component depends on the `API PostgreSQL` component.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Connection and SQL query support dynamic variables in the form <code class=\"b\">{key}</code> or <code class=\"b\">{data.key}</code>. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code>. The component encodes all SQL values with except <code class=\"b red\">{!key}</code>.</div>\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.id\" config=\"required:1;innerlabel:1\">Connection</ui-component>\n\t\t\t\t<div class=\"help\">A connection name/identifier</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"innerlabel:1;placeholder:response\">Assign data according to the path</ui-component>\n\t\t\t\t<div class=\"help\">Otherwise, the response will replace the entire message data.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-component name=\"input\" path=\"?.first\" config=\"type:checkbox\">Return only the first row</ui-component>\n\t\t<hr />\n\t\t<div class=\"ui-input-label\">SQL query:</div>\n\t\t<ui-component name=\"codemirror\" path=\"?.sql\" config=\"type:sql;minheight:300;parent:auto;margin:290;tabs:true;trim:true\"></ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer> \n\t\t<ui-bind path=\"$CONFIG.id\" config=\"text span;empty\">\n\t\t\tDatabase: <span class=\"b\"></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"switch": "<script total>\n\n\texports.id = 'switch';\n\texports.name = 'Switch';\n\texports.icon = 'ti ti-sitemap';\n\texports.group = 'Common';\n\texports.author = 'Total.js';\n\texports.version = '4';\n\texports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output1', name: 'Output #1' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar check, getValue1;\n\t\tvar COND = [];\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tvar getValue2 = (path, type, data, repo) => {\n\n\t\t\tvar source;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'data':\n\t\t\t\t\tsource = data;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'repo':\n\t\t\t\t\tsource = repo;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables':\n\t\t\t\t\tsource = instance.main.variables;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables2':\n\t\t\t\t\tsource = instance.main.variables2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!path)\n\t\t\t\treturn source;\n\n\t\t\tif (typeof source === 'object' && !Array.isArray(source) && source != null)\n\t\t\t\treturn get(source, path);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = getValue1($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\n\t\t\tvar sent = false;\n\t\t\tfor (let i = 0; i < COND.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ok = COND[i](data, $.data, $.repo);\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t$.send('output' + (i + 1), $.data);\n\t\t\t\t\t\tsent = true;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tconsole.error('muj error', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t!sent && $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.source || !config.conditions.length)\n\t\t\t\treturn;\n\n\t\t\tconst conditions = config.conditions;\n\t\t\tCOND = [];\n\n\t\t\tconditions.forEach(function eachCondition(cond, index){\n\t\t\t\tconst { operator, value, type } = cond;\n\n\t\t\t\tswitch (operator) {\n\t\t\t\t\tcase 'isnull':\n\t\t\t\t\t\tCOND[index] = (v) => v == null;\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'true':\n\t\t\t\t\tcase 'false':\n\t\t\t\t\t\tCOND[index] = (v) => v == operator.parseBoolean();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'isempty':\n\t\t\t\t\t\tCOND[index] = (v) => typeof(v) == 'string' && v == '';\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'haskey':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (typeof v !== 'object' || Array.isArray(v) || v == null)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\treturn v.hasOwnProperty(val);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'includes':\n\t\t\t\t\t\tif (type === 'number')\n\t\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v => v.includes(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\t\t\t\t\t\tCOND[index] = (v, data, repo) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar result = fn(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tconsole.log('invalid expresion', fn.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v.indexOf(value) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tCOND[index] = compile[type](operator, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'data':\n\t\t\t\t\tcase 'repo':\n\t\t\t\t\tcase 'variables':\n\t\t\t\t\tcase 'variables2':\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn, fnEx;\n\t\t\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\t\t\tfn = (data, val) => {\n\t\t\t\t\t\t\t\tconst [ v1, v2 ] = val.split(',').trim();\n\t\t\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (ops.list.includes(operator)) {\n\t\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfn = NOOP;\n\t\t\t\t\t\t\tconsole.log('Invalid operator', operator);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === 'expression')\n\t\t\t\t\t\t\tfnEx = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\n\t\t\t\t\t\tCOND[index] = (val1, data, repo) => {\n\t\t\t\t\t\t\tvar val2;\n\t\t\t\t\t\t\tif (type === 'expression') {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tval2 = fnEx(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t\tconsole.error('Invalid function or expresion', fn.toString());\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tval2 = getValue2(value, type, data, repo, fnEx);\n\n\t\t\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinstance.outputs = [];\n\n\t\t\tCOND.forEach((fn, i) => {\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });\n\t\t\t\tif (typeof fn !== 'function')\n\t\t\t\t\tinstance.throw('Invalid settings for output: ' + (i + 1));\n\t\t\t});\n\n\t\t\tif (config.source === 'expression')\n\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', 'return ' + config.path + ';');\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = 'if ({2} && (typeof {0} !== \\'object\\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \\'{1}\\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');\n\t\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tinstance.save();\n\t\t};\n\n\t\tconst ops = {};\n\t\tops.gt = (v1, v2) => v1 > v2;\n\t\tops.ge = (v1, v2) => v1 >= v2;\n\t\tops.lt = (v1, v2) => v1 < v2;\n\t\tops.le = (v1, v2) => v1 <= v2;\n\t\tops.eq = (v1, v2) => v1 == v2;\n\t\tops.seq = (v1, v2) => v1 === v2;\n\t\tops.neq = (v1, v2) => v1 != v2;\n\t\tops.sneq = (v1, v2) => v1 !== v2;\n\t\tops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;\n\t\tops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;\n\t\tops.indexOf = (v1, v2) => v1.indexOf(v2) > -1;\n\n\t\tops.list = Object.keys(ops);\n\n\t\tconst compile = {\n\t\t\tnumber_ops: [ 'gt', 'lt', 'eq', 'seq', 'neq', 'sneq', 'ge', 'le', 'between', 'notbetween', 'indexOf' ],\n\t\t\tnumber: (operator, val2) => {\n\n\t\t\t\tif (!compile.number_ops.includes(operator))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar fn;\n\n\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\tfn = (data) => {\n\t\t\t\t\t\tconst [ v1, v2 ] = val2.split(',').trim();\n\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tval2 = U.parseFloat(val2);\n\t\t\t\t\tif (isNaN(val2))\n\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\tfn = (val1) => ops[operator](val1, val2);\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'number')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1);\n\t\t\t\t};\n\n\t\t\t},\n\t\t\tstring: (operator, val2) => {\n\n\t\t\t\tvar fn;\n\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase 'eq':\n\t\t\t\t\tcase 'neq':\n\t\t\t\t\tcase 'seq':\n\t\t\t\t\tcase 'sneq':\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'startsWith':\n\t\t\t\t\tcase 'endsWith':\n\t\t\t\t\t\tfn = val1 => val1[operator](val2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'regex':\n\t\t\t\t\t\tvar match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));\n\t\t\t\t\t\tif (!match || !match.length || match.length < 2)\n\t\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfn = val1 => new RegExp(match[1], match[2]).test(val1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n## Source and Path\nUse the **Source** dropdown to select where to look for the value to use in the conditions check.\nSet a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.\n**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, repo, variables, variables2\n**Expressions example:**\n```js\ndata.value - variables.offset\n```\n\n## Conditions\nEach of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.\n\n**Operator**\nNot all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.\n*index of* only works for data of type array or string.\n**Expression operator**\nIn this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, repo, variables, variables2.\nExpressions operator example:\n```js\ndata.value > variables.threshold;\n```\nor with a conditions\n```js\nif (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);\n```\n\n**Expression type**\nThe expression in the **value** field must return a value which will be used in the given operation. Available variables: data, repo, variables, variables2.\nExpressions example:\n```js\ndata.value - variables.offset\n```\n\n**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t\t<label class=\"ui-input-label\">Source + Path to the value</label>\n\t\t<div class=\"switch-input-group wide m\">\n\t\t\t<ui-component name=\"input\" path=\"?.source\" config=\"dirsource:REPO.switch_datasources\" default=\"'data'\"></ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\"></ui-component>\n\t\t</div>\n\t\t<section class=\"switch-conditions m\">\n\t\t\t<label class=\"ui-input-label\">Switch conditions</label>\n\t\t\t<div class=\"switch-thead\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-1\">#</div>\n\t\t\t\t\t<div class=\"col-md-2\">Operator</div>\n\t\t\t\t\t<div class=\"col-md-6\">Type + Value</div>\n\t\t\t\t\t<div class=\"col-md-2\">Output name</div>\n\t\t\t\t\t<div class=\"col-md-1\">Action</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.conditions\" config=\"template:.switch-condition -> data-index\" clas=\"block\">\n\t\t\t\t<ui-component name=\"movable\" path=\"?.conditions\" config=\"selector:.dragme;exec:FUNC.switch_condition_dragged\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach con in value }}\n\t\t\t\t\t\t<div class=\"switch-condition dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t\t{{ ($index + 1) }}.\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].operator\" config=\"dirsource:REPO.switch_operators\"></ui-component>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.conditions[{{ $index }}].operator\" config=\"hide:value == 'true' || value == 'false' || value == 'isnull' || value == 'isempty';.switch-input-group:value!=='expression'\" class=\"block\">\n\t\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.conditions[{{ $index }}].operator\" config=\"hide:value==='expression'\">\n\t\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].type\" config=\"dirsource:REPO.switch_valuetypes\"></ui-component>\n\t\t\t\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].value\" config=\"placeholder:value\"></ui-component>\n\t\t\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].name\"></ui-component>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t\t<i class=\"ti ti-trash red exec\" data-exec=\"FUNC.switch_remove_condition\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"help m\">Each condition corresponds to an output index. First condition --> First output, etc.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.switch_add_condition\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.switch_readme\"><i class=\"ti ti-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.switch_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.switch_add_condition = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });\n\t};\n\n\tFUNC.switch_remove_condition = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.switch-condition').attrd('index');\n\t\tconfig.conditions.splice(index, 1);\n\t\tSET(path, config);\n\t\tconsole.log(config);\n\t};\n\n\tFUNC.switch_condition_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.conditions.splice(dragged_index, 1)[0];\n\t\tconfig.conditions.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.switch_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.switch_datasources = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_valuetypes = 'number|Number,string|String,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,sneq|!==,ge|>=,le|<=,between|between,isnull|is null,isempty|is empty,indexOf|index of,startsWith|starts with,endsWith|ends with,regex|regular expression,true|is true,false|is false,includes|includes,haskey|has key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; background-color: #202020; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.switch-input-group { clear: both; height: 36px; }\n\t.switch-input-group > ui-component:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.switch-input-group > ui-component:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.switch-input-group.wide > ui-component:first-child .ui-input-control { width: 200px; }\n\t.switch-input-group.wide > ui-component:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.switch-thead { padding: 8px; margin-bottom:4px; }\n\n\t.ui-dark .switch-conditions { border-color: #404040; }\n\t.ui-dark .switch-condition { border-color: #404040; }\n\t.ui-dark .switch-help { border-color: #404040; }\n\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"querybuilderpg": "<script total>\n\n\texports.id = 'querybuilderpg';\n\texports.name = 'QueryBuilder PG';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.group = 'Total.js';\n\texports.version = '1';\n\texports.config = { id: 'default', name: 'API PostgreSQL', url: '', pooling: 2 };\n\texports.outputs = [{ id: 'error', name: 'Error' }];\n\texports.npm = ['querybuilderpg'];\n\n\texports.make = function(instance, config) {\n\n\t\tconst QB = require('querybuilderpg');\n\t\tvar init = false;\n\t\tvar conf;\n\n\t\tinstance.configure = function() {\n\n\t\t\tinit && QB.init(conf.id);\n\t\t\tconf = instance.replace(config);\n\n\t\t\tif (conf.url) {\n\n\t\t\t\tQB.init(conf.id, conf.url, conf.pooling, function(err, data) {\n\t\t\t\t\tinstance.newmessage([{ error: err + ' --> ' + data.query }]).send('error');\n\t\t\t\t});\n\n\t\t\t\tinit = true;\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tconf && QB.init(conf.name, null);\n\t\t\tconf = null;\n\t\t\tinit = false;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component initializes QueryBuilder for the PostgreSQL database. So you can use the 'API Database` component. Each connection must be separated by an alias.\n\n__Usage in API Database__:\n\n- `tbl_user` is targeted to the `default/tbl_user` alias connection\n- `anotherserver/tbl_user` will use `anotherserver` alias connection\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Name</ui-component>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.id\" config=\"required:1\">Alias</ui-component>\n\t\t\t\t<div class=\"help\">The alias separates various DB connections</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1;camouflage:1\">Connection string</ui-component>\n\t\t\t\t<div class=\"help\">Example: postgresql://user:pass@localhost:5432/database_name</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.pooling\" config=\"required:1;type:number\">Pooling</ui-component>\n\t\t\t\t<div class=\"help\">How many connections should it keep?</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 0 10px 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-pencil-paintbrush\"></i>{{ value.id }}</div>\n\t\t\t\t<div class=\"b\">{{ value.name }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"autopgconnection": "<script total>\n\n\texports.name = 'Auto PostgreSQL Init';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Databases';\n\texports.config = { configFile: 'config.json', name: '', pooling: 0, database: 'querybuilderpg' };\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\tF.Fs.readFile(PATH.root(config.configFile), function(err, data) {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.error('Failed to read the config file:', err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttry {\n\t\t\t\t\tvar settings = JSON.parse(data.toString('utf8'));\n\t\t\t\t\tvar connectionString = settings.connectionString;\n\n\t\t\t\t\tif (!connectionString) {\n\t\t\t\t\t\tconsole.error('connectionString not found in config file');\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tNPMINSTALL(config.database, function() {\n\t\t\t\t\t\trequire(config.database).init(config.name || 'default', connectionString, config.pooling || null);\n\t\t\t\t\t\tconsole.log('Successfully connected to PostgreSQL');\n\t\t\t\t\t});\n\t\t\t\t} catch (e) {\n\t\t\t\t\tconsole.error('Error parsing config file:', e.message);\n\t\t\t\t}\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nKomponen ini akan otomatis membaca `connectionString` dari config.json yang berada di direktori root dan akan langsung mengkoneksikan ke database PostgreSQL menggunakan string tersebut. Pastikan config.json memiliki format string yang valid `connectionString`\n\tdan berisi value `postgresql://user:password@localhost:5432/dbname`.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"ti ti-database mr5\"></i>Connected to PostgreSQL</div>\n\t</footer>\n</body>\n",
			"filewriter": "<script total>\n\n\texports.id = 'filewriter';\n\texports.name = 'File Writer';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'ti ti-pencil';\n\texports.author = 'Total.js';\n\texports.config = { path: '', serializer: 'json', rewrite: true, divider: '\\\\n' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar path;\n\t\tvar divider;\n\t\tvar timeout;\n\n\t\tvar replacewhitechar = function(text) {\n\t\t\tswitch (text[1]) {\n\t\t\t\tcase 'n':\n\t\t\t\t\treturn '\\n';\n\t\t\t\tcase 'r':\n\t\t\t\t\treturn '\\r';\n\t\t\t\tcase 't':\n\t\t\t\t\treturn '\\t';\n\t\t\t}\n\t\t\treturn text;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tswitch (config.serializer) {\n\t\t\t\tcase 'json':\n\t\t\t\t\tdata = JSON.stringify($.data);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'text':\n\t\t\t\t\tdata = data + '';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!(data instanceof Buffer)) {\n\t\t\t\tif (typeof(data) !== 'string')\n\t\t\t\t\tdata = data + '';\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\tinstance.status({ used: NOW, size: data.length });\n\n\t\t\tif (config.rewrite) {\n\t\t\t\tF.Fs.writeFile(path, data, NOOP);\n\t\t\t} else {\n\t\t\t\tif (divider)\n\t\t\t\t\tdata = Buffer.concat([data, divider]);\n\t\t\t\tF.Fs.appendFile(path, data, NOOP);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\t\t\tdivider = config.divider ? Buffer.from(config.divider.replace(/\\\\[a-z]/g, replacewhitechar), 'utf8') : null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.path\" config=\"required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></ui-component>\n\t\t<div class=\"help m\">Absolute path to the file. The path starts with the <code>~</code> char will use a filename in the project's root directory.</div>\n\t\t<ui-component name=\"input\" path=\"?.serializer\" config=\"dirsource:json|JSON,text|Text,buffer|Buffer;required:1\" default=\"'json'\" class=\"m\">Serializer</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\" default=\"true\">Rewrite content</ui-component>\n\t\t<ui-bind path=\"?.rewrite\" config=\"hide\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.divider\">Divider</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component writes incoming data into the file.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"ti ti-calendar mr5\"></i><ui-bind path=\"STATUS.used\" config=\"text;format:yyyy-MM-dd HH:mm:ss;empty\"></span></ui-bind></div>\n\t\t<div><i class=\"ti ti-calculator mr5\"></i><ui-bind path=\"STATUS.size\" config=\"text;helper:filesize;empty\"></span></ui-bind></div>\n\t\t<hr />\n\t\t<ui-bind path=\"CONFIG.path\" config=\"text;empty\"></ui-bind>\n\t</footer>\n</body>",
			"filewatcher": "<script total>\n\n\texports.id = 'filewatcher';\n\texports.name = 'File Watcher';\n\texports.group = 'Files';\n\texports.version = '1';\n\texports.icon = 'ti ti-recycle';\n\texports.author = 'Total.js';\n\texports.config = { path: '', parser: 'json', interval: 1000 };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar old;\n\t\tvar timeout;\n\n\t\tvar monitor = function() {\n\n\t\t\tif (!config.path)\n\t\t\t\treturn;\n\n\t\t\tvar path = config.path[0] === '~' ? PATH.root(config.path.substring(1)) : config.path;\n\n\t\t\tF.Fs.readFile(path, function(err, response) {\n\t\t\t\tif (response) {\n\t\t\t\t\tF.Fs.unlink(path, NOOP);\n\t\t\t\t\tNOW = new Date();\n\t\t\t\t\tinstance.status({ used: NOW, size: response.length });\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t\t\tswitch (config.parser) {\n\t\t\t\t\t\tcase 'json':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseJSON(true);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'text':\n\t\t\t\t\t\t\tresponse = response.toString('utf8');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\tresponse = parseFloat(response.toString('utf8').replace(/\\,/g, '.'));\n\t\t\t\t\t\t\tif (isNaN(response))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tresponse = response.toString('utf8').parseDate();\n\t\t\t\t\t\t\tif (response && isNaN(response.getTime()))\n\t\t\t\t\t\t\t\tresponse = null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (response !== null)\n\t\t\t\t\t\tinstance.send('output', response);\n\n\t\t\t\t} else\n\t\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.path) {\n\t\t\t\ttimeout && clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(monitor, config.interval);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"required:1;placeholder:/www/flowstream/data.json\"><b>Path</b></ui-component>\n\t\t\t\t<div class=\"help\">Absolute path to the file. The path starts with the <code>~</code> char will watch filename in the project's root directory.</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.interval\" config=\"required:1;type:number;min:100;align:1;ricon:!ms\" default=\"1000\">Interval</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-component name=\"input\" path=\"?.parser\" config=\"dirsource:json|JSON,text|Text,buffer|Buffer,number|Number,date|Date;required:1\" default=\"'json'\" class=\"m\">Parser</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThe component watches the existence of the file, then reads the content and sends it next. The file will be removed automatically after reading.\n</readme>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\t.CLASS hr { margin: 5px 0; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"icon\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div><i class=\"ti ti-calendar mr5\"></i><ui-bind path=\"STATUS.used\" config=\"text;format:yyyy-MM-dd HH:mm:ss;empty\"></ui-bind></div>\n\t\t<div><i class=\"ti ti-calculator mr5\"></i><ui-bind path=\"STATUS.size\" config=\"text;helper:filesize;empty\"></ui-bind></div>\n\t\t<hr />\n\t\t<ui-bind path=\"CONFIG.path\" config=\"text;empty\" class=\"block\"></ui-bind>\n\t</footer>\n</body>",
			"cgb3k999ff": "<script total>\n\n\texports.name = 'PostgreSQL Connection from .env';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Databases';\n\texports.config = { envFile: '.env', name: '', pooling: 0, database: 'querybuilderpg' };\n\n\tconst dotenv = require('dotenv');\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\tconst envPath = PATH.root(config.envFile);\n\t\t\tconst envConfig = dotenv.config({ path: envPath });\n\n\t\t\tif (envConfig.error) {\n\t\t\t\tconsole.error('Failed to read .env file:', envConfig.error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst connectionString = `postgres://${envConfig.parsed.DB_USER}:${envConfig.parsed.DB_PASSWORD}` +\n\t\t\t\t`@${envConfig.parsed.DB_HOST}:${envConfig.parsed.DB_PORT}/${envConfig.parsed.DB_NAME}`;\n\n\t\t\tNPMINSTALL(config.database, function() {\n\t\t\t\trequire(config.database).init(config.name || 'default', connectionString, config.pooling || null);\n\t\t\t\tconsole.log('Sukses koneksiin ke PostgreSQL lewat .env');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component reads the PostgreSQL connection details from a specified `.env` file in the root directory and uses them to establish a connection to a PostgreSQL database via QueryBuilder. The database library is automatically installed if not already present.\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"$ICON\" style=\"font-size:50px;color:#5C1DC4\"></i>\n\t\t<div class=\"fs12 mt10\">$NAME</div>\n\t</div>\n</body>\n",
			"object": "<script total>\n\n\texports.id = 'object';\n\texports.name = 'Object';\n\texports.icon = 'ti ti-list-alt';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Data';\n\texports.config = { template: '{\\n\\tname: {{ data.name }},\\n\\temail: {{ data.email }},\\n\\tkey: {{ variables.key }},\\n\\thostname: {{ url }},\\n\\tenv: {{ env }}\\n}' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar template;\n\t\tvar helpers = {};\n\t\tvar variables = EMPTYOBJECT;\n\n\t\thelpers.encode = function(val) {\n\n\t\t\tif (val instanceof Date)\n\t\t\t\treturn 'new Date(' + val.getTime() + ')';\n\n\t\t\tswitch (typeof(val)) {\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\tcase 'boolean':\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn val + '';\n\t\t\t\tdefault:\n\t\t\t\t\treturn val == null ? 'null' : JSON.stringify(val);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = null;\n\n\t\t\ttry {\n\t\t\t\tvar model = { data: $.data, variables: variables };\n\t\t\t\tmodel.hostname = instance.main.$schema.origin;\n\t\t\t\tmodel.url = instance.main.$schema.origin + instance.main.$schema.proxypath;\n\t\t\t\tmodel.env = instance.main.$schema.env;\n\t\t\t\tdata = template(model, null, helpers);\n\t\t\t\tdata = (new Function('return ' + data))();\n\t\t\t} catch(e) {\n\t\t\t\t$.destroy();\n\t\t\t\tinstance.throw(e);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tdata && $.send('output', data);\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\n\t\t\tvariables = {};\n\n\t\t\tfor (var key in instance.main.variables2)\n\t\t\t\tvariables[key] = instance.main.variables2[key];\n\n\t\t\tfor (var key in instance.main.variables)\n\t\t\t\tvariables[key] = instance.main.variables[key];\n\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttemplate = config.template ? Tangular.compile(config.template) : NOOP;\n\t\t};\n\n\t\tinstance.configure();\n\t\tinstance.variables();\n\n\t};\n\n</script>\n\n<readme>\nThe component creates an object from the defined string (Tangular) template. With the help of the Tangular template engine, you can use conditions, loops, etc..\n\n__Available markup__:\n\n- `{{ data.key }}` represents data\n- `{{ variables.key }}` represents local and global Flow variables\n- `{{ hostname }}` contains a current URL address to the main Flow app `{String}`\n- `{{ url }}` contains a current URL address to the current Flow `{String}`\n- `{{ env }}` contains a current environment `{String}`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<p>Design your object with the help of the <a href=\"https://docs.totaljs.com/components/40d06002lm50c/#advanced-functionality\" target=\"_blank\">Tangular template engine</a>. All values are automatically transformed into JavaScript types.</p>\n\t\t<ui-component name=\"input\" path=\"?.template\" config=\"type:multiline;height:300;tabs:1;monospace:1\"></ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"extend": "<script total>\n\n\texports.id = 'extend';\n\texports.name = 'Extend';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-expand';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item) {\n\t\t\tvar max;\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn item.value;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn item.value == 'true' || item.value === 'on' || item.value === '1';\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn +item.value;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\treturn new Function('return ' + item.value)();\n\t\t\t\t\t} catch (e) {}\n\t\t\t\tcase 'date':\n\t\t\t\t\treturn item.value.parseDate();\n\t\t\t\tcase 'now':\n\t\t\t\t\treturn new Date();\n\t\t\t\tcase 'uid':\n\t\t\t\t\treturn UID();\n\t\t\t\tcase 'time':\n\t\t\t\t\treturn (new Date()).format('HH:mm:ss');\n\t\t\t\tcase 'guid':\n\t\t\t\t\treturn GUID();\n\t\t\t\tcase 'random_number':\n\t\t\t\t\tmax = item.value ? +item.value : 20;\n\t\t\t\t\treturn U.random_number(max);\n\t\t\t\tcase 'random_string':\n\t\t\t\t\tmax = item.value ? +item.value : 20;\n\t\t\t\t\treturn U.random_string(max);\n\t\t\t}\n\n\t\t\treturn item.value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tif (data) {\n\t\t\t\tfor (var item of config.schema) {\n\t\t\t\t\tvar val = convert(item);\n\t\t\t\t\tif (item.path) {\n\t\t\t\t\t\tU.set(data, item.path, val);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdata = val;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.send('output');\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component extends the current message by adding new properties.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { line-height: 23px; margin-left: 400px; margin-right: 30px; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.2); }\n\t.CLASS-settings figure .path { width: 150px; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; color: #B92EC5; }\n\t.CLASS-settings figure .value { width: 250px; line-height: 14px; float: left; }\n\t.CLASS-settings figure .value span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .value div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; color: #4285F4; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer is=\"is-footer\" path=\"CONFIG.path\" config=\"show;text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the extending will be loaded from the specific property/field.</div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpextend.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpextend.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path\">\n\t\t\t\t\t\t\t<span>Path</span><div class=\"monospace edit hellip\" data-edit=\"exec:tmpextend.path;required:1\">{{ m.path }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"value\">\n\t\t\t\t\t\t\t<span>Value</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpextend.value;selectall:1\">{{ m.value }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpextend.convert\">{{ m.convert | tmpextendconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { path: 'name', value: 'Hello Total.js Flow', convert: 'string' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpextend;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.path = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.value = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.value = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'String' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'Number' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'Boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'object', name: 'Object' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'Date' });\n\t\t\t\ttmp.convertors.push({ id: 'time', name: 'Time' });\n\t\t\t\ttmp.convertors.push({ id: 'now', name: 'Current date/time' });\n\t\t\t\ttmp.convertors.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\t\ttmp.convertors.push({ id: 'guid', name: 'Guid' });\n\t\t\t\ttmp.convertors.push({ id: 'random_number', name: 'Random number' });\n\t\t\t\ttmp.convertors.push({ id: 'random_string', name: 'Random string' });\n\n\t\t\t\tThelpers.tmpextendconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpextend = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"debug": "<script total>\n\n\texports.id = 'debug';\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-circle-alt';\n\texports.color = '#E73323';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, debug: true, data: true, watch: [] };\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\n\t\tvar filter = null;\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.main.ondebug = function(a, b, c, d) {\n\n\t\t\tif (filter && !filter[this.id])\n\t\t\t\treturn;\n\n\t\t\tNOW = new Date();\n\n\t\t\tvar output = [];\n\n\t\t\tif (a !== undefined)\n\t\t\t\toutput.push(a);\n\t\t\tif (b !== undefined)\n\t\t\t\toutput.push(b);\n\t\t\tif (c !== undefined)\n\t\t\t\toutput.push(c);\n\t\t\tif (d !== undefined)\n\t\t\t\toutput.push(d);\n\n\t\t\tinstance.status({ name: this.module.name, type: 'debug', date: NOW, data: JSON.stringify(output, serializer) });\n\t\t};\n\n\t\tinstance.logger && instance.logger(function($) {\n\n\t\t\tif (filter && !filter[$.fromid])\n\t\t\t\treturn;\n\n\t\t\tif (!config.data && !config.repo)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\toutput && instance.status({ name: $.from.module.name, type: 'message', date: NOW, data: JSON.stringify(output, serializer) });\n\t\t});\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.watch && config.watch.length) {\n\t\t\t\tfilter = {};\n\t\t\t\tfor (var id of config.watch)\n\t\t\t\t\tfilter[id] = 1;\n\t\t\t} else\n\t\t\t\tfilter = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tif (!instance.logger)\n\t\t\tinstance.throw('You need to update Total.js framework');\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS { border-color: #E73323 !important; }\n\t.CLASS .area { background: #FEE7E7; }\n\t.CLASS header i { animation: 1s blink infinite alternate forwards; border-radius: 100px; }\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n\t.debugform pre:before { display: block; color: rgba(0, 0, 0, 0.3); margin-bottom: 5px; }\n\t.debugform .type-debug pre { background: #e6f4f7; }\n\t.debugform .type-debug pre:before { content: 'Debug'; }\n\t.debugform .type-message pre:before { content: 'Message'; }\n\t.ui-dark .CLASS .area { background: #7e4d4d; }\n\t.ui-dark .CLASS pre, .ui-dark .debugform pre { background-color: #404040; }\n\t.ui-dark .debugform pre:before { color: rgba(255, 255, 255, 0.3); }\n\t.ui-dark .debugform .type-debug pre { background: #283857; }\n</style>\n\n<readme>\nThe component can print the payload of incoming messages and `instance.debug()` log messages in JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.debug\" config=\"type:checkbox\">Shows debug messages</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"%debugsearch\" config=\"type:search;placeholder:Search components\" class=\"m\">Search</ui-component>\n\t\t<ui-component name=\"search\" path=\"%debugsearch\" config=\"selector:figure\">\n\t\t\t<ui-component name=\"selection\" path=\"?.watch\" config=\"datasource:flow.instances;click:figure\">\n\t\t\t\t<ui-bind path=\"flow.instances\" config=\"template\" class=\"block listing2 small\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t\t<figure data-search=\"{{ m.id }} {{ m.Component.name }}{{ if m.note }} {{ m.note }}{{ fi }}\">\n\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t<span class=\"selection\" data-id=\"{{ m.id }}\"><i class=\"ti ti-eye\"></i></span>{{ m.Component.name }}{{ if m.note }}<span class=\"gray ml10\">{{ m.note }}</span>{{ fi }}\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</figure>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-bind>\n\t\t\t</ui-component>\n\t\t</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ti ti-bull\" style=\"background:#E73323;color:#FFF\"></i><b>NAME</b>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"ti ti-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<ui-component name=\"box\" path=\"common.$debug\" config=\"if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:ti ti-bug;zindex:5;$id:debugwindowbox\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"ti ti-remove red\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></ui-component>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.close = function() {\n\t\t\tNUL('common.$debug');\n\t\t\tdelete W.debugwindow;\n\t\t\tdelete W.debugwindowclear;\n\t\t\tSETTER('#debugwindowbox/remove');\n\t\t};\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m type-{3}\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"ti ti-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(JSON.parse(data.data), '\\t')), data.type || 'message'));\n\t\t};\n\n\t});\n\n</script>",
			"split": "<script total>\n\n\texports.id = 'split';\n\texports.name = 'Split';\n\texports.icon = 'ti ti-strikethrough';\n\texports.group = 'Array';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' } ];\n\texports.meta = { settingswidth: 650 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar arr = config.path ? (config.path.indexOf('.') === -1 ? $.data[config.path] : U.get(config.path, $.data)) : $.data;\n\t\t\t$.destroy();\n\t\t\tif (arr instanceof Array && arr.length) {\n\t\t\t\tfor (var item of arr)\n\t\t\t\t\tinstance.send('output', item);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component splits a message with an array of objects on the input into separate messages with individual objects on the output.\n\n__Input example__:\n\n```js\n[\n\t{\n\t\t\"email\": \"michal@totaljs.com\",\n\t\t\"date\": 20220202,\n\t\t\"name\": \"Michal Klacan\"\n\t},\n\t{\n\t\t\"email\": \"martin@totaljs.com\",\n\t\t\"date\": 20220204,\n\t\t\"name\": \"Martin Smola\"\n\t},\n\t{\n\t\t\"email\": \"peter@totaljs.com\",\n\t\t\"datum\": 20220210,\n\t\t\"name\": \"Peter Sirka\"\n\t}\n]\n```\n\n__Output example__:\n\n```js\n{\n\t\"email\": \"michal@totaljs.com\",\n\t\"date\": 20220202,\n\t\"name\": \"Michal Klacan\"\n}\n```\n\n```js\n{\n\t\"email\": \"martin@totaljs.com\",\n\t\"date\": 20220204,\n\t\"name\": \"Martin Smola\"\n}\n```\n\n```js\n{\n\t\"email\": \"peter@totaljs.com\",\n\t\"datum\": 20220210,\n\t\"name\": \"Peter Sirka\"\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.path\" config=\"show;text span\" parent=\"footer\" class=\"block\">\n\t\t\tPath: <span class=\"b\"></span>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t<div class=\"help\">Optional. The data for the splitting will be loaded from the specific property/field.</div>\n\t</div>\n</settings>",
			"json_schema_validator": "<script total>\n\texports.id = 'json_schema_validator';\n\texports.name = 'JSON Schema validator';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }, { id: 'schema', name: 'Schema' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'schema', name: 'Schema' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar schema;\n\n\t\tinstance.message = function($) {\n\t\t\tif (!schema) {\n\t\t\t\t$.send('error', { error: 'Not ready' });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ($.input === 'schema') {\n\t\t\t\t$.send('schema', { schema });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\t\t\tJSONSCHEMA(schema, data, function(error, response){\n\t\t\t\tif (error)\n\t\t\t\t\t$.send('error', { msg: 'Invalid data', error });\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t\tschema = config.schema && config.schema.parseJSON();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n[JSON schema documentation](https://json-schema.org/learn/getting-started-step-by-step.html)\n\n## Inputs\n\n- `input` validates data and send the result to output if no error, otherwise send error to error output\n- `schema` reads the schema and send it to the schema output\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"codemirror\" path=\"?.schema\" config=\"type:javascript;required:true;height:500\">JSON schema</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"tcors": "<script total>\n\n\texports.id = 'tcors';\n\texports.name = 'CORS';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-html5';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { hostnames: [] };\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\n\t\tvar route = null;\n\n\t\tinstance.close = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\troute = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\tvar url = config.hostnames.join(',');\n\t\t\troute = url ? CORS(url) : CORS();\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component enables Cross-Origin Resource Sharing `CORS`, so the web browser will be able to communicate directly with the REST API. The functionality will work only with a defined Proxy endpoint for this Flow.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"textboxlist\" path=\"?.hostnames\" config=\"maxlength:50;placeholder:https://www.totaljs.com\" class=\"m\">Hostnames with a protocol</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"ti ti-html5\" style=\"font-size:50px;color:#BD6B27\"></i>\n\t\t<div class=\"mt10 fs12\">CORS enabled</div>\n\t</div>\n</body>",
			"model": "<script total>\n\n\texports.id = 'model';\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'ti ti-file';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\tval = val.parseDate();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!(val instanceof Date) || isNaN(val))\n\t\t\t\t\t\t\tval = null;\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tif (val) {\n\n\t\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Model name</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"hellip\"><span class=\"edit label\" data-edit=\"exec:tmprestmodel.label;required:1\">{{ m.label }}</span><span class=\"monospace edit key\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</span></div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name .label { background-color: #000; outline: 0; padding: 2px 3px; color: #FFF; }\n\t.CLASS-settings figure .name .key { font-weight: bold; margin-left: 5px; outline: 0; }\n\t.CLASS-settings figure .name > div:first-child { outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .name .label { background-color: #FFF; color: #000; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"ti ti-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), label: 'Name', name: 'propname', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.label = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.label = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- {0} `{1} {{2}}`'.format(m.label, m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>",
			"datasorter": "<script total>\n\n\texports.id = 'datasorter';\n\texports.name = 'Data sorter';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-vector';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn(instance, $);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.status(e + '');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t}\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\ttry {\n\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data,data=$.data,refs=$.refs,repo=$.repo;' + builder.join('') + '$.send(\\'error\\');');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t\tinstance.status('');\n\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\n\t\t};\n\n\t\t// Due to redrawing of outputs\n\t\tsetTimeout(instance => instance && instance.configure(), 1500, instance);\n\t};\n\n</script>\n\n<readme>\nThe component sorts data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n\t.CLASS footer > ui-bind { padding: 10px; font-size: 12px; }\n\t.CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n\t.CLASS-settings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASS-settings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASS-settings\">\n\t\t<ui-component name=\"listform\" path=\"?.conditions\" config=\"autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"item\"><i class=\"ti ti-arrow-right\"></i>{{ name }}</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1;innerlabel:1__''\" class=\"m\">Name</ui-component>\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.if\" config=\"required:1;innerlabel:1;monospace:1\" default=\"'value != null'\">Condition</ui-component>\n\t\t\t\t\t<div class=\"help m\"><i class=\"ti ti-exclamation-triangle\"></i><code>value</code> represents a message data and <code>refs</code> represents references. Example: <code>value.age > 18</code></div>\n\t\t\t\t\t<ui-component name=\"validate\" path=\"?\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"ti ti-file-code\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</ui-component>\n\t\t\t\t</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Create rule</button></div>\n\t\t\t</script>\n\n\t\t</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS\" config=\"text;show\" class=\"red\"></ui-bind>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar items = exports.config.conditions;\n\t\t\t\tfor (var i = 0; i < items.length; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + i, name: items[i].name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"taskaction": "<script total>\n\texports.id = 'taskaction';\n\texports.name = 'Task Query';\n\texports.group = 'Actions';\n\texports.version = '1.0';\n\texports.icon = 'ti ti-send';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.config = {\n\t\taction: 'add',\n\t\ttaskId: '',\n\t\ttitle: '',\n\t\tdescription: '',\n\t\tstatus: '',\n\t\tpriority: '',\n\t\terror_output: false,\n\t\tautoresponse: true ,\n\t\tpath: 'response'\n\t};\n\texports.outputs = [\n\t\t{ id: 'output', name: 'Output' },\n\t\t{ id: 'error', name: 'Error Output', schema: true }\n\t];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n    instance.message = function($){\n\n        var data = $.data;\n        var output = {};\n        var error = null;\n        var parameter = parseInt(data.params.id);\n\t\tvar builder = DATA.find('pg_catalog.pg_tables').fields('tablename')\n        .where('schemaname', '=', 'public');\n    \tvar tableNames = builder.main.controller.response;\n\n\t\t// Helper function to send success response\n\t\tfunction sendResponse(response) {\n\t\t\tif ($.refs.controller && config.autoresponse) {\n\t\t\t\t$.refs.controller.json({  tableNames: tableNames, response: response });\n\t\t\t}\n\n\t\t\tconst namaTabel = tableNames.map(table => table.tablename);\n\t\t\t// Outputnya\n\t\t\tconsole.log(namaTabel);\n\n\t\t\t$.send('output', {response: response, tableNames: tableNames});\n\t\t}\n\n        // Perform actions based on the selected action type\n        switch (config.action) {\n            case 'add':\n                output = {\n                    action: 'add',\n                    task: data\n                };\n                break;\n            case 'update':\n                output = {\n                    action: 'update',\n                    taskId: parameter,\n                    task: data.body\n                };\n                break;\n            case 'delete':\n                output = {\n                    action: 'delete',\n                    taskId: parameter,\n                    message: `Success deleting task with ID ${parameter}`\n                };\n                break;\n            default:\n                error = 'Invalid action selected';\n                break;\n        }\n\n        // If there is an error, send it to both the error output and HTTP response (if applicable)\n        if (error) {\n            if ($.controller) {\n                $.controller.json({ error: error });\n            }\n            instance.send('error', { error: error });\n            return;\n        }\n\n        // Send the output to the flowchart output\n        sendResponse(output);\n    }\n\n    instance.configure = function() {\n        if (!config.action)\n            config.action = 'add';\n    };\n\n    instance.configure();\n};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 10px; }\n\t.CLASS button { width: 100%; height: 30px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.action\" config=\"dirsource:add|Add Task,update|Update Task,delete|Delete Task;required:1\">Action</ui-component>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'update' || value === 'delete'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.taskId\" config=\"type:text;placeholder:Enter Task ID;required:1\">Task ID</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'add' || value === 'update'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.title\" config=\"type:text;placeholder:Enter Task Title\">Title</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.description\" config=\"type:text;placeholder:Enter Task Description\">Description</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.status\" config=\"type:text;placeholder:Enter Task Status\">Status</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.priority\" config=\"type:text;placeholder:Enter Task Priority\">Priority</ui-component>\n\t\t</ui-bind>\n\n\t\t<!-- Tambahkan setting untuk autoresponse -->\n\t\t<ui-component name=\"checkbox\" path=\"?.autoresponse\" config=\"title:Enable Auto HTTP Response\">Auto HTTP Response</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThis component performs actions on tasks, such as adding, updating, and deleting, with error handling and validation. Now supports auto HTTP response when enabled.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>\n"
		},
		"design": {
			"ilzhrhcmu": {
				"id": "ilzhrhcmu",
				"config": {
					"url": "/users/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "payload",
					"reader": "-"
				},
				"x": 383.953125,
				"y": 154.953125,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzhuz3z4",
							"index": "input"
						}
					]
				}
			},
			"ilzhuz3z4": {
				"id": "ilzhuz3z4",
				"config": {
					"partial": false,
					"name": "GetAll",
					"input": "",
					"query": "",
					"color": "#4285F4",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "var builder = DATA.find('users');\n\nbuilder.fields('id,username,email,password,address,id_role').callback(function(err, res) {\n\tif (err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\t$.success(res);\n});\n\n// DATA.find('users').callback(console.log);\n\n// DATA.find('admin').fields('id', 'name', 'email', 'address').callback(function(err, res) {\n//     if (err) {\n//         console.log(err);\n//       $.invalid(err);\n//         return;\n//     }\n//    $.send(res);\n// });\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 720.9375,
				"y": 155.9375,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi3l67m",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi3l67m",
							"index": "input"
						}
					]
				}
			},
			"ilzhxely2": {
				"id": "ilzhxely2",
				"config": {
					"url": "/users/",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 364.953125,
				"y": 508.953125,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzkqy7ef",
							"index": "input"
						}
					]
				}
			},
			"ilzi1huzu": {
				"id": "ilzi1huzu",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 924.96875,
				"y": 590.953125,
				"component": "print",
				"connections": {}
			},
			"ilzi2a2kw": {
				"id": "ilzi2a2kw",
				"config": {
					"url": "/users/{id}",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 364.953125,
				"y": 924.96875,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzi2a2kx",
							"index": "input"
						}
					]
				}
			},
			"ilzi2a2kx": {
				"id": "ilzi2a2kx",
				"config": {
					"partial": false,
					"name": "GetById",
					"input": "",
					"query": "",
					"color": "#4285F4",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// var id = $.params.id;\n// DATA.read('users').fields('id,username,email,address').id(id).error(404).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success(res);\n// });\n\n\nvar id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('User ID is required.');\n    return;\n}\n\nDATA.read('users').fields('id,username,email,address').id(id).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    if (!res) {\n        $.invalid(404, 'User not found.');\n        return;\n    }\n\n    $.success(res);\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 707.96875,
				"y": 924.96875,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi3ltsa",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi3ltsa",
							"index": "input"
						}
					]
				}
			},
			"ilzi2u0s0": {
				"id": "ilzi2u0s0",
				"config": {
					"url": "/users/{id}",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 359.953125,
				"y": 1276.96875,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzi2u0s1",
							"index": "input"
						}
					]
				}
			},
			"ilzi2u0s1": {
				"id": "ilzi2u0s1",
				"config": {
					"partial": false,
					"name": "Update",
					"input": "username:String,email:String,password:String,address:String",
					"query": "",
					"color": "#EC8632",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// var id = $.params.id;\n// DATA.update('users', model).id(id).error(404).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n//});\n\nvar id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('User ID is required.');\n    return;\n}\n\n// Validasi input data\nif (!model.username && !model.email && !model.address) {\n    $.invalid('At least one field (username, email, address) is required to update.');\n    return;\n}\n\nDATA.update('users', model).id(id).error(404).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    $.success();\n});\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 702.96875,
				"y": 1276.96875,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi2zou7",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi2zou7",
							"index": "input"
						}
					]
				}
			},
			"ilzi2zou7": {
				"id": "ilzi2zou7",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1051.953125,
				"y": 1281.96875,
				"component": "print",
				"connections": {}
			},
			"ilzi3l67m": {
				"id": "ilzi3l67m",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1046.953125,
				"y": 155.9375,
				"component": "print",
				"connections": {}
			},
			"ilzi3ltsa": {
				"id": "ilzi3ltsa",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1051.953125,
				"y": 926.96875,
				"component": "print",
				"connections": {}
			},
			"ilzi49szk": {
				"id": "ilzi49szk",
				"config": {
					"url": "/users/{id}",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 364.953125,
				"y": 1636.96875,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzi49szl",
							"index": "input"
						}
					]
				}
			},
			"ilzi49szl": {
				"id": "ilzi49szl",
				"config": {
					"partial": false,
					"name": "Delete",
					"input": "",
					"query": "",
					"color": "#E73323",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// var id = $.params.id;\n// DATA.remove('users').id(id).error(404).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n// });\n\n\nvar id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('User ID is required.');\n    return;\n}\n\nDATA.remove('users').id(id).error(404).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    $.success();\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 707.96875,
				"y": 1636.96875,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi49szm",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi49szm",
							"index": "input"
						}
					]
				}
			},
			"ilzi49szm": {
				"id": "ilzi49szm",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1056.953125,
				"y": 1646.96875,
				"component": "print",
				"connections": {}
			},
			"ilzi4lydm": {
				"id": "ilzi4lydm",
				"config": {
					"url": "/users/relasi",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "payload",
					"reader": "-"
				},
				"x": 1333.953125,
				"y": 145.9375,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzi4o977",
							"index": "input"
						}
					]
				}
			},
			"ilzi4o977": {
				"id": "ilzi4o977",
				"config": {
					"partial": false,
					"name": "Relasi",
					"input": "username:String,email:String,password:String,address:String,id_role:Integer",
					"query": "",
					"color": "#4285F4",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// DATA.insert('users', model).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n// });\n\n// Validasi input data\n// if (!model.username || !model.email || !model.password || !model.address || !model.id_role) {\n//     $.invalid('Isi dulu yang kosong.');\n//     return;\n// }\n\n\n\nDATA.insert('users', model).callback(function(err, res) {\n\tif (err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success(res);\n});\n\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 1549.96875,
				"y": 141.9375,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzkzmnjb",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzkzmnjb",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuo6": {
				"id": "ilzknhuo6",
				"config": {
					"url": "/role/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "payload",
					"reader": "-"
				},
				"x": 2415.5,
				"y": 146.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzknhuo7",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuo7": {
				"id": "ilzknhuo7",
				"config": {
					"partial": false,
					"name": "GetAll",
					"input": "",
					"query": "",
					"color": "#4285F4",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// DATA.find('admin').callback(function(err, res) {\n\t// console.log(err, res);\n\t// $.success(res);\n// });\n\n// logika get all data dan search data\nvar builder = DATA.find('role');\n\nbuilder.callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    $.success(res);\n});\n\n\n// DATA.find('users').callback(console.log);\n\n// DATA.find('admin').fields('id', 'name', 'email', 'address').callback(function(err, res) {\n//     if (err) {\n//         console.log(err);\n//       $.invalid(err);\n//         return;\n//     }\n//    $.send(res);\n// });\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 2749.5,
				"y": 146.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzknhuog",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzknhuog",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuo8": {
				"id": "ilzknhuo8",
				"config": {
					"url": "/role/",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 2410.5,
				"y": 488.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzknhuo9",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuo9": {
				"id": "ilzknhuo9",
				"config": {
					"partial": false,
					"name": "Store",
					"input": "name:String",
					"query": "",
					"color": "#61C83B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// DATA.insert('users', model).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n// });\n\n\n// Validasi input data\nif (!model.name) {\n    $.invalid('Isi dulu nama role nya.');\n    return;\n}\n\nDATA.insert('role', model).callback(function(err, res) {\n\tif (err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success();\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 2751.5,
				"y": 486.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzknhuoa",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzknhuoa",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuoa": {
				"id": "ilzknhuoa",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3100.5,
				"y": 490.5,
				"component": "print",
				"connections": {}
			},
			"ilzknhuob": {
				"id": "ilzknhuob",
				"config": {
					"url": "/role/{id}",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 2420.5,
				"y": 899.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzknhuoc",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuoc": {
				"id": "ilzknhuoc",
				"config": {
					"partial": false,
					"name": "GetById",
					"input": "",
					"query": "",
					"color": "#4285F4",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// var id = $.params.id;\n// DATA.read('users').fields('id,username,email,address').id(id).error(404).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success(res);\n// });\n\n\nvar id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('Role ID is required.');\n    return;\n}\n\nDATA.read('role').id(id).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    if (!res) {\n        $.invalid(404, 'Role not found.');\n        return;\n    }\n\n    $.success(res);\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 2760.5,
				"y": 895.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzknhuoh",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzknhuoh",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuod": {
				"id": "ilzknhuod",
				"config": {
					"url": "/role/{id}",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 2415.5,
				"y": 1251.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzknhuoe",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuoe": {
				"id": "ilzknhuoe",
				"config": {
					"partial": false,
					"name": "Update",
					"input": "name:String",
					"query": "",
					"color": "#EC8632",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// var id = $.params.id;\n// DATA.update('users', model).id(id).error(404).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n//});\n\nvar id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('Role ID is required.');\n    return;\n}\n\n// Validasi input data\nif (!model.name) {\n    $.invalid('Isi dulu nama role yang mau diupdate.');\n    return;\n}\n\nDATA.update('role', model).id(id).error(404).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    $.success();\n});\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 2755.5,
				"y": 1251.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzknhuof",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzknhuof",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuof": {
				"id": "ilzknhuof",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3105.5,
				"y": 1256.5,
				"component": "print",
				"connections": {}
			},
			"ilzknhuog": {
				"id": "ilzknhuog",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3079.5,
				"y": 151.5,
				"component": "print",
				"connections": {}
			},
			"ilzknhuoh": {
				"id": "ilzknhuoh",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3105.5,
				"y": 903.5,
				"component": "print",
				"connections": {}
			},
			"ilzknhuoi": {
				"id": "ilzknhuoi",
				"config": {
					"url": "/role/{id}",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 2420.5,
				"y": 1611.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzknhuoj",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuoj": {
				"id": "ilzknhuoj",
				"config": {
					"partial": false,
					"name": "Delete",
					"input": "",
					"query": "",
					"color": "#E73323",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// var id = $.params.id;\n// DATA.remove('users').id(id).error(404).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n// });\n\n\nvar id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('Role ID is required.');\n    return;\n}\n\nDATA.remove('role').id(id).error(404).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    $.success();\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 2760.5,
				"y": 1611.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzknhuok",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzknhuok",
							"index": "input"
						}
					]
				}
			},
			"ilzknhuok": {
				"id": "ilzknhuok",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 3110.5,
				"y": 1621.5,
				"component": "print",
				"connections": {}
			},
			"ilzkodiz1": {
				"id": "ilzkodiz1",
				"config": {
					"url": "/apps/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "payload",
					"reader": "-"
				},
				"x": 3851,
				"y": 121,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzkodiz2",
							"index": "input"
						}
					]
				}
			},
			"ilzkodiz2": {
				"id": "ilzkodiz2",
				"config": {
					"partial": false,
					"name": "GetAll",
					"input": "",
					"query": "",
					"color": "#4285F4",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// DATA.find('admin').callback(function(err, res) {\n\t// console.log(err, res);\n\t// $.success(res);\n// });\n\n// logika get all data dan search data\nvar builder = DATA.find('apps');\n\nbuilder.callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    $.send(res);\n});\n\n\n// DATA.find('users').callback(console.log);\n\n// DATA.find('admin').fields('id', 'name', 'email', 'address').callback(function(err, res) {\n//     if (err) {\n//         console.log(err);\n//       $.invalid(err);\n//         return;\n//     }\n//    $.send(res);\n// });\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 4201,
				"y": 123,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzkodizb",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzkodizb",
							"index": "input"
						}
					]
				}
			},
			"ilzkodiz3": {
				"id": "ilzkodiz3",
				"config": {
					"url": "/apps/",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 3861,
				"y": 466,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzkodiz4",
							"index": "input"
						}
					]
				}
			},
			"ilzkodiz4": {
				"id": "ilzkodiz4",
				"config": {
					"partial": false,
					"name": "Store",
					"input": "name:String,description:String",
					"query": "",
					"color": "#61C83B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// DATA.insert('users', model).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n// });\n\n\n// Validasi input data\nif (!model.name || !model.description) {\n    $.invalid('Isi dulu yang kosong.');\n    return;\n}\n\nDATA.insert('apps', model).callback(function(err, res) {\n\tif (err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success();\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 4202,
				"y": 458,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzkodiz5",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzkodiz5",
							"index": "input"
						}
					]
				}
			},
			"ilzkodiz5": {
				"id": "ilzkodiz5",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 4551,
				"y": 466,
				"component": "print",
				"connections": {}
			},
			"ilzkodiz6": {
				"id": "ilzkodiz6",
				"config": {
					"url": "/apps/{id}",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 3879,
				"y": 881,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzkodiz7",
							"index": "input"
						}
					]
				}
			},
			"ilzkodiz7": {
				"id": "ilzkodiz7",
				"config": {
					"partial": false,
					"name": "GetById",
					"input": "",
					"query": "",
					"color": "#4285F4",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "var id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('Apps ID is required.');\n    return;\n}\n\nDATA.read('apps').id(id).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    if (!res) {\n        $.invalid(404, 'Role not found.');\n        return;\n    }\n\n    $.success(res);\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 4219,
				"y": 876,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzkodizc",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzkodizc",
							"index": "input"
						}
					]
				}
			},
			"ilzkodiz8": {
				"id": "ilzkodiz8",
				"config": {
					"url": "/apps/{id}",
					"method": "PUT",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 3873,
				"y": 1229,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzkodiz9",
							"index": "input"
						}
					]
				}
			},
			"ilzkodiz9": {
				"id": "ilzkodiz9",
				"config": {
					"partial": false,
					"name": "Update",
					"input": "name:String,description:String",
					"query": "",
					"color": "#EC8632",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// var id = $.params.id;\n// DATA.update('users', model).id(id).error(404).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n//});\n\nvar id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('Apps ID is required.');\n    return;\n}\n\n// Validasi input data\nif (!model.name || !model.description) {\n    $.invalid('Isi dulu yang kosong kalo mau diupdate.');\n    return;\n}\n\nDATA.update('apps', model).id(id).error(404).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    $.success();\n});\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 4216,
				"y": 1234,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzkodiza",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzkodiza",
							"index": "input"
						}
					]
				}
			},
			"ilzkodiza": {
				"id": "ilzkodiza",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 4566,
				"y": 1239,
				"component": "print",
				"connections": {}
			},
			"ilzkodizb": {
				"id": "ilzkodizb",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 4531,
				"y": 128,
				"component": "print",
				"connections": {}
			},
			"ilzkodizc": {
				"id": "ilzkodizc",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 4566,
				"y": 886,
				"component": "print",
				"connections": {}
			},
			"ilzkodizd": {
				"id": "ilzkodizd",
				"config": {
					"url": "/apps/{id}",
					"method": "DELETE",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 3868,
				"y": 1585,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzkodize",
							"index": "input"
						}
					]
				}
			},
			"ilzkodize": {
				"id": "ilzkodize",
				"config": {
					"partial": false,
					"name": "Delete",
					"input": "",
					"query": "",
					"color": "#E73323",
					"params": "*id",
					"user": 0,
					"permissions": "",
					"code": "// var id = $.params.id;\n// DATA.remove('users').id(id).error(404).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n// });\n\n\nvar id = $.params.id;\n\n// Validasi ID\nif (!id) {\n    $.invalid('Apps ID is required.');\n    return;\n}\n\nDATA.remove('apps').id(id).error(404).callback(function(err, res) {\n    if (err) {\n        $.invalid(err);\n        return;\n    }\n\n    $.success();\n});\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 4221,
				"y": 1592,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzkodizf",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzkodizf",
							"index": "input"
						}
					]
				}
			},
			"ilzkodizf": {
				"id": "ilzkodizf",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 4571,
				"y": 1607,
				"component": "print",
				"connections": {}
			},
			"ilzkp5s4f": {
				"id": "ilzkp5s4f",
				"config": {
					"url": "/auth/register",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 667,
				"y": 2006,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzks9zev",
							"index": "input"
						}
					]
				}
			},
			"ilzkpfcxl": {
				"id": "ilzkpfcxl",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1246,
				"y": 1998,
				"component": "print",
				"connections": {}
			},
			"ilzkqy7ef": {
				"id": "ilzkqy7ef",
				"config": {
					"partial": false,
					"name": "Store",
					"input": "username:String,email:String,password:String,address:String,id_role:Integer",
					"query": "",
					"color": "#61C83B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// DATA.insert('users', model).callback(function(err, res) {\n\t// if(err) {\n\t\t// $.invalid(err);\n\t\t// return;\n\t// }\n\n\t// $.success();\n// });\n\nvar roleId = DATA.find('role', model.id_role);\n\n// Validasi input data\nif (!model.username || !model.email || !model.password || !model.address || !model.id_role) {\n    $.invalid('Isi dulu yang kosong.');\n    return;\n}\n\nif(roleId.length == 0){\n\t$.invalid('role nggak ketemu');\n\treturn;\n}\n\nDATA.insert('users', model).callback(function(err, res) {\n\tif (err) {\n\t\t$.invalid(err);\n\t\treturn;\n\t}\n\n\t$.success(res);\n});\n\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 623,
				"y": 506,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzi1huzu",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzi1huzu",
							"index": "input"
						}
					]
				}
			},
			"ilzks9zev": {
				"id": "ilzks9zev",
				"config": {
					"partial": false,
					"name": "Register",
					"input": "username:String,email:String,password:String,address:String,id_role:Integer",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "model.id_role = 99;\n// if (!model.username || !model.email || !model.password || !model.address) {\n//     $.invalid('Isi dulu yang kosong.');\n//     return;\n// }\n\nroleId = DATA.find('role', model.id_role).callback(function(err, res) {\n\tif(err){\n\t\t$.invalid(err, 'Role nggak ketemu');\n\t\treturn;\n\t}\n\n\tDATA.insert('users', model).callback(function(err, res) {\n\t\tif (err) {\n\t\t\t$.invalid(err, 'Role nggak ketemu');\n\t\t\treturn;\n\t\t}\n\n\t\t$.success(res, 'Registrasi berhasil!!');\n\t});\n});\n\n",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 924,
				"y": 2002,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzkpfcxl",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzkpfcxl",
							"index": "input"
						}
					]
				}
			},
			"ilzkvs54m": {
				"id": "ilzkvs54m",
				"config": {
					"url": "http://localhost:8000/fauzi/users/1",
					"method": "GET",
					"dnscache": true,
					"insecure": false,
					"secret": "",
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": "json",
					"send": "all"
				},
				"x": 1444.96875,
				"y": 518.953125,
				"component": "request",
				"connections": {
					"response": [
						{
							"id": "ilzkvtv0b",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzkvtv0b",
							"index": "input"
						}
					]
				}
			},
			"ilzkvtjf2": {
				"id": "ilzkvtjf2",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false,
					"prompt": false
				},
				"x": 1253.4375,
				"y": 548.4375,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "ilzkvs54m",
							"index": "payload"
						}
					]
				}
			},
			"ilzkvtv0b": {
				"id": "ilzkvtv0b",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1758.953125,
				"y": 582.953125,
				"component": "print",
				"connections": {}
			},
			"ilzkzmnjb": {
				"id": "ilzkzmnjb",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1844.96875,
				"y": 145.9375,
				"component": "print",
				"connections": {}
			},
			"ilzl2019w": {
				"id": "ilzl2019w",
				"config": {
					"url": "/user_access",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 2056,
				"y": 2014,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzl2019x",
							"index": "input"
						}
					]
				}
			},
			"ilzl2019x": {
				"id": "ilzl2019x",
				"config": {
					"partial": false,
					"name": "StoreUserAccess",
					"input": "id_user:Integer,id_app:Integer",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "DATA.find('users').fields('id').where('id', model.id_user).first().callback(function(err, user) {\n    if (err) {\n        $.invalid('Error while finding user.');\n        return;\n    }\n\n    if (!user) {\n        $.invalid('User not found.');\n        return;\n    }\n\n    DATA.find('apps').fields('id').where('id', model.id_app).first().callback(function(err, app) {\n        if (err) {\n            $.invalid('Error while finding app.');\n            return;\n        }\n\n        if (!app) {\n            $.invalid('App not found.');\n            return;\n        }\n\n        DATA.insert('user_access_apps', model).callback(function(err, res) {\n            if (err) {\n                $.invalid('Error while storing data.');\n                return;\n            }\n\n            $.success(res);\n        });\n    });\n});",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 2379,
				"y": 2054,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzl2019y",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzl2019y",
							"index": "input"
						}
					]
				}
			},
			"ilzl2019y": {
				"id": "ilzl2019y",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2739,
				"y": 2024,
				"component": "printjson",
				"connections": {}
			},
			"ilzrwpliz": {
				"id": "ilzrwpliz",
				"config": {
					"envFile": ".env",
					"name": "",
					"pooling": 0,
					"database": "querybuilderpg"
				},
				"x": 31.953125,
				"y": 403.953125,
				"component": "cgb3k999ff",
				"connections": {}
			},
			"ilzrxxhf1": {
				"id": "ilzrxxhf1",
				"config": {
					"hostnames": []
				},
				"x": 72.99716186523438,
				"y": 248.97725868225098,
				"component": "tcors",
				"connections": {}
			},
			"im0agdqby": {
				"id": "im0agdqby",
				"config": {
					"connection": "postgresql://postgres:postgresqljancok@localhost:5432/user_management"
				},
				"x": 1621.921875,
				"y": 907.9375,
				"component": "postgresql",
				"connections": {
					"output": [
						{
							"id": "im0agfn0w",
							"index": "input"
						}
					]
				}
			},
			"im0agfn0w": {
				"id": "im0agfn0w",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1884.96875,
				"y": 976.96875,
				"component": "print",
				"connections": {}
			},
			"im0agfsbg": {
				"id": "im0agfsbg",
				"config": {
					"id": "default",
					"sql": "SELECT 1",
					"first": false,
					"path": ""
				},
				"x": 1376.90625,
				"y": 865.921875,
				"component": "tsqlquery",
				"connections": {
					"output": [
						{
							"id": "im0agdqby",
							"index": "input"
						}
					]
				}
			},
			"im0aggca7": {
				"id": "im0aggca7",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false,
					"prompt": false
				},
				"x": 1164.96875,
				"y": 765.96875,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "im0agfsbg",
							"index": "input"
						}
					]
				}
			},
			"im0dk5hnd": {
				"id": "im0dk5hnd",
				"config": {
					"name": "Model",
					"path": "",
					"schema": [],
					"rewrite": true
				},
				"x": 412,
				"y": 2834,
				"component": "model",
				"connections": {}
			},
			"im0do1992": {
				"id": "im0do1992",
				"config": {
					"name": "Model",
					"path": "",
					"schema": [],
					"rewrite": true
				},
				"x": 1549.46875,
				"y": 1228.46875,
				"component": "model",
				"connections": {}
			},
			"im0dwn95i": {
				"id": "im0dwn95i",
				"config": {
					"conditions": []
				},
				"x": 1500.96875,
				"y": 1473.9375,
				"component": "datasorter",
				"connections": {},
				"outputs": [
					{
						"id": "error",
						"name": "404"
					}
				]
			},
			"im0ep6k0p": {
				"id": "im0ep6k0p",
				"config": {
					"action": "update",
					"taskId": "213132",
					"title": "Finish project report",
					"description": "Complete the final report for the project and submit it.",
					"status": "nggak jadi",
					"priority": "low",
					"error_output": false,
					"autoresponse": true,
					"path": "response"
				},
				"x": 89,
				"y": 575,
				"component": "taskaction",
				"connections": {}
			},
			"groups": [
				{
					"id": "glzkn4xso",
					"x": 322.96875,
					"y": 87,
					"width": 1799.94,
					"height": 1769.94,
					"name": "MasterData Users",
					"background": "rgba(124,251,253,0.3)",
					"color": "#A2A2A2"
				},
				{
					"id": "glzkni9wy",
					"x": 2326.5,
					"y": 55.5,
					"width": 1208,
					"height": 1853,
					"name": "MasterData Role",
					"background": "rgba(124,251,253,0.3)",
					"color": "#A2A2A2"
				},
				{
					"id": "glzkocsw1",
					"x": 3641,
					"y": 63,
					"width": 1423.5,
					"height": 1877.5,
					"name": "MasterData Apps",
					"background": "rgba(124,251,253,0.3)",
					"color": "#A2A2A2"
				},
				{
					"id": "glzkp4vz9",
					"x": 642,
					"y": 1948,
					"width": 1080,
					"height": 757,
					"name": "Authenticate",
					"background": "rgba(236,134,50,0.3)",
					"color": "#E8E8E8"
				},
				{
					"id": "glzl206xd",
					"x": 1881,
					"y": 1944,
					"width": 1226,
					"height": 851,
					"name": "UserAccess"
				}
			],
			"paused": {},
			"im0n5ste2": {
				"id": "im0n5ste2",
				"config": {
					"conditions": []
				},
				"x": 77,
				"y": 782,
				"component": "datasorter",
				"connections": {},
				"outputs": [
					{
						"id": "error",
						"name": "404"
					}
				]
			}
		},
		"sources": {},
		"size": 227544,
		"variables2": {},
		"directory": "C:\\DAD Project\\ToDoListWebsite\\flow\\flowstream\\"
	},
	"fIoOsx01c761f": {
		"id": "fIoOsx01c761f",
		"name": "OTP Generator",
		"author": "",
		"version": "",
		"icon": "ti ti-microchip",
		"reference": "",
		"group": "",
		"url": "https://",
		"cloning": true,
		"color": "",
		"readme": "",
		"memory": 0,
		"proxypath": "/code/",
		"variables": {},
		"dtcreated": "2024-08-13T01:51:25.242Z",
		"asfiles": false,
		"worker": "fork",
		"origin": "http://localhost:8000",
		"paused": true,
		"sandbox": false,
		"components": {
			"trigger": "<script total>\n\n\texports.id = 'trigger';\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '4';\n\texports.icon = 'ti ti-start';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false, prompt: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar regprompt = /\\{prompt\\}/g;\n\n\t\tinstance.trigger = function(msg) {\n\n\t\t\tvar random = !config.prompt && config.random;\n\t\t\tvar val = config.data;\n\t\t\tvar prompt = msg.value || '';\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = random ? U.random() : val.replace(regprompt, prompt).parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? Buffer.from(U.random_string()) : Buffer.from(val.replace(regprompt, prompt), 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = random ? NOW.add('-' + U.random(500, 10) + ' seconds') : val.replace(regprompt, prompt).parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? {} : (new Function('return ' + val.replace(regprompt, prompt)))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tvar tmp = random ? '' : val.replace(regprompt, prompt);\n\t\t\t\t\tval = random ? U.random() % 2 === 0 : tmp === 'true' || tmp === 'on' || tmp === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = random ? U.random_string(20) : val.replace(regprompt, prompt);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"mt10 m\">\n\t\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.prompt\" config=\"type:checkbox\">Prompt</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"disabled\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"block hidden m mt10\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.promptlabel\" config=\"placeholder:Enter a value\"><b>Prompt label</b></ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<ui-bind path=\"?\" config=\"hide:value.hide && !value.prompt\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"help hidden\">The prompt value will be assigned to the <code>{prompt}</code> keyword in the code.</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button name=\"run\">Run</button>\n\t</div>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\t\texports.click = function(el) {\n\t\t\tif (exports.config.prompt) {\n\t\t\t\tvar opt = {};\n\t\t\t\topt.name = exports.config.promptlabel || 'Enter a value';\n\t\t\t\topt.value = '';\n\t\t\t\topt.callback = function(val) {\n\t\t\t\t\texports.trigger({ value: val });\n\t\t\t\t};\n\t\t\t\tSETTER('prompt/show', opt);\n\t\t\t} else\n\t\t\t\texports.trigger();\n\t\t};\n\t});\n</script>",
			"print": "<script total>\n\n\texports.id = 'print';\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '5';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = '<Buffer ' + data.toString('hex').substring(0, 10) + '...';\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tif (output) {\n\t\t\t\toutput = JSON.stringify(output, serializer);\n\t\t\t\tinstance.status(output, 200);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-bind { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .json { white-space: pre; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"html pre:Thelpers.jsonformat(JSON.stringify(JSON.parse(value), null, '\\t'));show:value && value.length > 0\" class=\"hidden selectable block\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"ti ti-window\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(JSON.parse(laststatus), null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
			"confirmationcode": "<script total>\n\n\texports.id = 'confirmationcode';\n\texports.name = 'Confirmation code';\n\texports.icon = 'ti ti-barcode';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Security';\n\texports.config = { count: 3, type: 'pin', length: 4, expire: '5 minutes', lock: '', limit: 1 };\n\texports.inputs = [{ id: 'create', name: 'Create' }, { id: 'verify', name: 'Verify' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar codes = {};\n\t\tvar timeout = null;\n\n\t\tvar refreshforce = function() {\n\t\t\ttimeout = null;\n\t\t\tinstance.status({ count: Object.keys(codes).length });\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(refreshforce, 500);\n\t\t};\n\n\t\tinstance.message_create = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar val = null;\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'pin':\n\t\t\t\t\tval = U.random_number(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'token':\n\t\t\t\t\tval = GUID(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = U.random_number(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'string':\n\t\t\t\t\tval = U.random_string(config.length);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'guid':\n\t\t\t\t\tval = GUID();\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tvar id = typeof(data) === 'string' ? data : data.id;\n\t\t\tvar tmp = codes[id];\n\t\t\tvar msg = {};\n\t\t\tvar now = NOW = new Date();\n\n\t\t\tmsg.success = true;\n\n\t\t\tif (tmp && tmp.locked && tmp.locked > NOW) {\n\t\t\t\tif (tmp.limit <= 0) {\n\t\t\t\t\tmsg.success = tmp.count > 0;\n\n\t\t\t\t\tif (msg.success)\n\t\t\t\t\t\ttmp.value = msg.value = val;\n\n\t\t\t\t\tmsg.slots = tmp.count;\n\t\t\t\t\tmsg.error = 'locked';\n\t\t\t\t\tmsg.limit = tmp.limit;\n\t\t\t\t} else {\n\t\t\t\t\ttmp.limit--;\n\t\t\t\t\ttmp.value = msg.value = val;\n\t\t\t\t\ttmp.slots = msg.slots = tmp.count;\n\t\t\t\t\ttmp.expire = now.add(config.expire);\n\t\t\t\t\tmsg.limit = tmp.limit;\n\t\t\t\t\ttmp.param = data.param;\n\t\t\t\t}\n\t\t\t\t$.send('output', msg);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tmsg.value = val;\n\t\t\tmsg.slots = config.count;\n\t\t\tmsg.limit = config.limit;\n\n\t\t\tcodes[id] = { value: val, expire: now.add(config.expire), count: config.count, locked: config.lock ? now.add(config.lock) : null, limit: config.limit, param: data.param };\n\t\t\t$.send('output', msg);\n\t\t\trefresh();\n\t\t};\n\n\t\tinstance.message_verify = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar id = data.id;\n\t\t\tvar value = data.value || data.token || data.code || data.pin;\n\t\t\tvar tmp = codes[id];\n\t\t\tvar output = {};\n\n\t\t\toutput.success = false;\n\t\t\toutput.slots = 0;\n\n\t\t\tif (tmp) {\n\n\t\t\t\tif (tmp.value === value) {\n\t\t\t\t\tdelete codes[id];\n\t\t\t\t\toutput.success = true;\n\t\t\t\t\toutput.slots = tmp.count;\n\t\t\t\t\toutput.param = tmp.param;\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\trefresh();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\ttmp.count--;\n\n\t\t\t\toutput.slots = tmp.count;\n\t\t\t\toutput.error = 'invalid';\n\n\t\t\t\tif (!tmp.count) {\n\t\t\t\t\tdelete codes[id];\n\t\t\t\t\trefresh();\n\t\t\t\t}\n\n\t\t\t\t$.send('output', output);\n\t\t\t} else {\n\t\t\t\toutput.error = 'blocked';\n\t\t\t\t$.send('output', output);\n\t\t\t}\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.service = function() {\n\t\t\tvar is = false;\n\t\t\tfor (var key in codes) {\n\t\t\t\tvar item = codes[key];\n\t\t\t\tif (item.expire < NOW) {\n\t\t\t\t\tdelete codes[key];\n\t\t\t\t\tis = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tis && refresh();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar locked = config.lock ? NOW.add(config.lock) : null;\n\n\t\t\tfor (var key in codes) {\n\t\t\t\tvar item = codes[key];\n\t\t\t\titem.locked = locked;\n\t\t\t}\n\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can help you with generating confirmation codes. Keep data structure for inputs according to the documentation below.\n\n### `create` input/output\n\n__Create input__:\n\n- `id {String}` identifier (email, phone number, identifier, etc.)\n- `param {String}` a custom parameter\n\n__Create output__:\n\n- `success {Boolean}` determines if the code is verified or not accroding to its identifier\n- `value {String}` a pin/code/token\n- `param {String}` a custom parameter (it sends only if the value is true)\n- `error {String}` (optional) a simple error identifier, it can contain:\n\t- `locked` the identifier is locked by the previous call\n\n### `verify` input/output\n\n__Verify input__:\n\n- `id {String}` identifier (email, phone number, identifier, etc.)\n- `value {String}` a pin/code/token\n\n__Verify output__:\n\n- `success {Boolean}` determines if the code is verified or not accroding to its identifier\n- `slots {Number}` free slots/attempts\n- `error {String}` (optional) a simple error identifier, it can contain:\n\t- `invalid` the code is invalid\n\t- `404` identifier not found\n\n---\n\n### Settings\n\n- __Lock__ prevents overwriting of the code according to the identifier\n\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:#confirmcodetypes;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<div>\n\t\t\t\t<div class=\"grid-2\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.length\" config=\"type:number;min:1;max:500;format:\">Length</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.count\" config=\"type:number;format:\">Count of attempts</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"grid-4\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.expire\" config=\"align:1;placeholder:5 minutes;required:1\">Expiration</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.lock\" config=\"align:1;placeholder:5 minutes\">Lock</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number;format:\">Max. calls per lock</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px 8px; font-size: 12px; }\n\t.CLASS footer > div:first-child { margin-bottom: 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div>Pending: <ui-bind path=\"STATUS.count\" config=\"text;empty\" class=\"b\"></ui-bind></div>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"keyvalue small\"><span>Type</span><div class=\"right b\">{{ value.type | cl('confirmcodetypes') }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Length</span><div class=\"right\">{{ value.length }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Expiration</span><div class=\"right\">{{ value.expire }}</div></div>\n\t\t\t\t<div class=\"keyvalue small\"><span>Lock</span><div class=\"right\">{{ value.lock | empty }}</div></div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tDEF.cl.confirmcodetypes = [{ id: 'pin', name: 'PIN' }, { id: 'guid', name: 'Guid' }, { id: 'token', name: 'Token' }, { id: 'number', name: 'Number' }, { id: 'string', name: 'String' }];\n</script>",
			"troute": "<script total>\n\n\texports.id = 'troute';\n\texports.name = 'Route';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-exchange';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, user: 0, send: 'all', reader: '-' };\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.close = function() {\n\t\t\tprev && prev.remove();\n\t\t\tprev = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [];\n\n\t\t\t\tconfig.timeout && flags.push(F.is5 ? ('<' + Math.ceil(config.timeout / 1000) + 's') : config.timeout);\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tflags.push('<' + Math.ceil(config.limit / 1024) + 'MB');\n\n\t\t\t\tconfig.upload && flags.push((F.is5 ? '@' : '') + 'upload');\n\n\t\t\t\tvar action = function($) {\n\n\t\t\t\t\tvar ctrl = F.is5 ? $ : this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\t// Parse cookies\n\t\t\t\t\tvar cookies = {};\n\t\t\t\t\tvar cookie = ctrl.headers.cookie;\n\n\t\t\t\t\tif (cookie) {\n\t\t\t\t\t\tlet arr = cookie.split(';');\n\t\t\t\t\t\tfor (let c of arr) {\n\t\t\t\t\t\t\tlet line = c.trim();\n\t\t\t\t\t\t\tlet index = line.indexOf('=');\n\t\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\t\tcookies[line.substring(0, index)] = line.substring(index + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar query = ctrl.query;\n\t\t\t\t\tvar body = ctrl.body;\n\t\t\t\t\tvar params = ctrl.params;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\tdata = ctrl.user;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cookies':\n\t\t\t\t\t\t\tdata = cookies;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: body, query: query, user: ctrl.user, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: params, ip: ctrl.ip, split: ctrl.split, cookies: cookies, ua: ctrl.ua };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\n\t\t\t\t\tif (config.upload && config.reader && config.reader !== '-') {\n\t\t\t\t\t\tctrl.files.wait(function(file, next) {\n\t\t\t\t\t\t\tfile.read(function(err, buffer) {\n\t\t\t\t\t\t\t\tvar type = config.reader;\n\t\t\t\t\t\t\t\tif (type === 'datauri')\n\t\t\t\t\t\t\t\t\ttype = 'base64';\n\t\t\t\t\t\t\t\tfile.data = type === 'buffer' ? buffer : buffer.toString(type);\n\t\t\t\t\t\t\t\tif (config.reader === 'datauri')\n\t\t\t\t\t\t\t\t\tfile.data = 'data:' + file.type + ';base64,' + file.data;\n\t\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, () => msg.send('output', data));\n\t\t\t\t\t} else\n\t\t\t\t\t\tmsg.send('output', data);\n\n\t\t\t\t};\n\n\t\t\t\tvar auth = config.user == 1 ? '+' : config.user == 2 ? '-' : '';\n\t\t\t\tvar url = config.url.replace(/#/g, instance.main.id);\n\t\t\t\tprev = F.is5 ? ROUTE(auth + config.method + ' ' + url + (config.action && config.method === 'API' ? (' ' + config.action) : '') + ' ' + flags.join(' '), action) : ROUTE(auth + config.method + ' ' + instance.replace(url) + (config.action && config.method === 'API' ? (' ' + config.action) : ''), action, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n__Output data__:\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number, data:Buffer|String }] // optional\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-bind path=\"flow.head.worker\" config=\"hide:!value || flow.head.origin.length < flow.head.proxyurl.length\" class=\"block\">\n\t\t\t<div class=\"message message-error\"><b><i class=\"ti ti-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t</ui-bind>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE,API|API\">Method</ui-component>\n\t\t\t\t<div class=\"help\">HTTP method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"monospace:1;required:1\">Relative URL address</ui-component>\n\t\t\t\t<div class=\"help\">A relative path to: <ui-bind path=\"flow.head.proxyurl\" config=\"text:value?value:window.location.origin\"></ui-bind><br />It supports wildcard <code>/something/*</code> or dynamic arguments <code>/products/{category}/</code>.<br /><code>#</code> will be replaced with a FlowStream <code>id</code> identifier.</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<hr class=\"nmt\" />\n\n\t\t<ui-bind path=\"?.method\" config=\"show:value === 'API'\" class=\"block hidden m padding bg-smoke radius\">\n\t\t\t<ui-component name=\"input\" path=\"?.action\" config=\"monospace:1;required:1;placeholder:+users_read/{id}\">API Action</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-component name=\"input\" path=\"?.upload\" config=\"type:checkbox\" class=\"m\"><b>Allow uploading files (form data)</b></ui-component>\n\t\t<ui-bind path=\"?.upload\" config=\"enabled\">\n\t\t\t<ui-component name=\"input\" path=\"?.reader\" config=\"dirsource:-|Keep as files,buffer|Buffer,utf8|UTF-8,ascii|ASCII,datauri|Data URI,base64|Base64,hex|Hex\">Read files to</ui-component>\n\t\t</ui-bind>\n\t\t<hr />\n\n\t\t<div class=\"ui-input-label mt10\">Continue as:</div>\n\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t<span>Authorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t<span>Unauthorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t<span>Both</span>\n\t\t\t</div>\n\t\t</ui-component>\n\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"required:1;type:number;format:\">Timeout</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;ricon:!kB;align:1;format:\">Request limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers,cookies|Cookies,user|User\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; color: #999; }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer class=\"monospace\"></footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar template = Tangular.compile('{{ if value.user == 1 }}<i class=\"ti ti-lock red mr10\"></i>{{ else if value.user == 2 }}<i class=\"ti ti-unlock blue mr10\"></i>{{ fi }}<span class=\"method\">{{ value.method }}</span> <a href=\"{{ value.link }}\" target=\"_blank\">{{ value.url }}</a>{{ if value.method === \\'API\\' }} {{ value.action }}{{ fi }}');\n\n\t\tvar reload = function() {\n\t\t\tvar model = CLONE(exports.config);\n\t\t\tmodel.link = model.url = model.url.replace(/#/g, flow.head.id);\n\n\t\t\tif (flow.head.proxypath)\n\t\t\t\tmodel.link = flow.head.origin + (flow.head.proxypath + model.link).replace(/\\/{2,}/g, '/');\n\t\t\telse\n\t\t\t\tmodel.link = flow.head.origin + model.link;\n\n\t\t\texports.element.find('footer').html(template({ value: model }));\n\t\t};\n\n\t\texports.configure = reload;\n\t\treload();\n\t});\n</script>",
			"tresponse": "<script total>\n\n\texports.id = 'tresponse';\n\texports.name = 'Response';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-bullhorn';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'auto', code: 200, path: 'response' };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\texports.outputs = [{ id: 'output', name: 'Log' }];\n\texports.kind = 'output';\n\n\texports.make = function(instance, config) {\n\n\t\tvar nested = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tvar value = config.path ? (nested ? U.get(config.path, $.data) : $.data[config.path]) : $.data;\n\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\tif (value instanceof Array && value.length && value[0].error) {\n\t\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\t\tctrl.response.status = 400;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tctrl.status = 400;\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\tctrl.binary(typeof(value) === 'string' ? Buffer.from(value, 'utf8') : value, config.ctype);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\tctrl.invalid(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.html(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/html');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'xml':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.xml(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/xml');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', value);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tnested = config.path && config.path.includes('.') ? true : false;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond to an HTTP request.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;dirsource:auto|Auto,json|JSON,success|Success,error|Error,empty|Empty response,plain|Plain text,html|HTML,xml|XML,buffer|Buffer\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.type\" config=\"disabled:value === 'auto'\" class=\"m block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;align:1\">Path for reading value</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-bind path=\"?.type\" config=\"show:value==='buffer'\" class=\"m block hidden\">\n\t\t\t<div class=\"padding bg-smoke radius\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.ctype\" config=\"required:1;placeholder:text/html\">Content type</ui-component>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header ui-bind { font-family: var(--monospace); color: #FFF; margin-left: 4px; font-size: 12px; }\n\t.CLASS header ui-bind code { border-radius: var(--radius) 0 0 var(--radius); padding: 2px 3px; }\n\t.CLASS header ui-bind span { background-color: gray; border-radius: 0 var(--radius) var(--radius) 0; padding: 2px 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<code style=\"background:{{ if value.code >= 400 }}#E73323{{ else }}#4285F4{{ fi }}\">{{ value.code }}</code><span>{{ value.type }}</span>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n</body>",
			"tauthtoken": "<script total>\n\n\texports.id = 'tauthtoken';\n\texports.name = 'Auth token';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-key';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { token: '', code: 401, header: 'x-token', error: 'Unauthorized', ddos: 0 };\n\texports.inputs = [{ id: 'input', name: 'Request' }];\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar maintoken = '';\n\t\tvar ddos = {};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tvar token = ctrl.headers[config.header];\n\n\t\t\tif (config.ddos && ddos[ctrl.ip] > config.ddos)\n\t\t\t\ttoken = '';\n\n\t\t\tif (token === maintoken) {\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\n\t\t\t\tif (config.ddos)\n\t\t\t\t\tddos[ctrl.ip] = (ddos[ctrl.ip] || 0) + 1;\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tctrl.json([{ name: config.code + '', error: config.error }]);\n\t\t\t\t$.destroy();\n\t\t\t}\n\t\t};\n\n\t\tinstance.variables = instance.variables2 = function() {\n\t\t\tinstance.configure();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tmaintoken = instance.replace(config.token);\n\t\t};\n\n\t\tinstance.service = function(counter) {\n\t\t\tif (counter % 10)\n\t\t\t\tddos = {};\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component must be used only with REST Route component. It reads a token from the request header and compares it with the token declared in the configuration.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:1\">Token</ui-component>\n\t\t<div class=\"help\"><span class=\"link exec\" data-exec=\"tmptokenauthgenerate\">Generate token</span>. It can contain a global variable in the form <code>{variable}</code>.</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.header\" config=\"required:1;type:lower\">Header</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.error\" config=\"required:1\">Error message</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.ddos\" config=\"required:1;type:number;format:\">DDOS protection</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"help\">How many times can the client requested your API with a bad key? The internal IP database is cleared every 10 minutes. <code>0</code> disables DDOS protection.</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; }\n\t.CLASS footer ui-bind { font-family: var(--monospace); }\n\t.CLASS footer .code { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<div><ui-bind path=\"$CONFIG.code\" config=\"text\" class=\"code\"></ui-bind><ui-bind path=\"$CONFIG.header\" config=\"text\"></ui-bind></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!W.tmptokenauthgenerate) {\n\t\t\tW.tmptokenauthgenerate = function(el) {\n\t\t\t\tel.scope().set('token', W['GUI' + 'D'](30), 'show');\n\t\t\t};\n\t\t}\n\t});\n\n</script>",
			"oauth2": "<script total>\n\n\texports.id = 'oauth2';\n\texports.name = 'OAuth 2.0';\n\texports.icon = 'ti ti-key';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'API';\n\texports.config = { urltoken: '', urlauthorize: '', variable: '', clientid: '', clientsecret: '' };\n\n\texports.call = function(data, callback) {\n\n\t\tswitch(data.type) {\n\t\t\tcase 'oauth':\n\t\t\t\tvar opt = {};\n\t\t\t\topt.method = 'POST';\n\t\t\t\topt.url = data.data.url;\n\t\t\t\topt.type = 'json';\n\t\t\t\tdelete data.data.url;\n\t\t\t\topt.body = JSON.stringify(data.data);\n\t\t\t\topt.callback = function(err, response) {\n\t\t\t\t\tvar response = response.body.parseJSON(true);\n\t\t\t\t\tcallback(response);\n\t\t\t\t};\n\t\t\t\tREQUEST(opt);\n\t\t\t\tbreak;\n\t\t}\n\n\t};\n\n\texports.make = function(instance, config) {\n\t\tinstance.configure = function() {\n\t\t\tif (config.variable && config.accesstoken) {\n\t\t\t\tinstance.main.variables[config.variable] = config.accesstoken;\n\t\t\t\tinstance.newvariables(instance.main.variables);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<readme>\n\tThis component can obtain OAuth 2.0 access token from 3rd party service.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings padding\">\n\t\t<p>To obtain an OAuth 2.0 access token, you must follow the OAuth 2.0 specification on the service you want to use.</p>\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.urlauthorize\" config=\"required:1;type:url;innerlabel:1;placeholder:Enter a value\">Authorize URL</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.urltoken\" config=\"required:1;type:url;innerlabel:1;placeholder:Enter a value\">Token URL</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr class=\"nmt\" />\n\t\t<div class=\"fs12 m\"><i class=\"ti ti-globe mr5\"></i>Your redirect URL: <b><ui-bind path=\"flow.head.notify\" config=\"text;empty\" class=\"red\"></ui-bind></b></div>\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.clientid\" config=\"required:1;camouflage:1;innerlabel:1;placeholder:Enter client id\">Client ID</ui-component>\n\t\t\t\t<div class=\"help\">Required</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.clientsecret\" config=\"required:1;camouflage:1;innerlabel:1;placeholder:Enter client secret\">Client secret</ui-component>\n\t\t\t\t<div class=\"help\">Required</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.scope\" config=\"required:0;innerlabel:1;placeholder:email,profile\">Scope</ui-component>\n\t\t\t\t<div class=\"help\">Optional</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<div class=\"m center\">\n\t\t\t<p>To obtain of OAuth 2.0 access token, you must click on the button below.</p>\n\t\t\t<div style=\"width:150px;margin:0 auto\">\n\t\t\t\t<button class=\"button exec b\" data-exec=\"tmpoauth2.authorize\"><ui-bind path=\"?\" config=\"enabled:value.urlauthorize && value.urltoken && value.clientid && value.clientsecret\" disabled></ui-bind><i class=\"ti ti-key\"></i>Authorize</button>\n\t\t\t</div>\n\t\t\t<br />\n\t\t</div>\n\t\t<ui-bind path=\"?.accesstoken\" config=\"show\" class=\"hidden\">\n\t\t\t<div class=\"grid-2\">\n\t\t\t\t<div class=\"m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.accesstoken\" config=\"required:1;disabled:1;innerlabel:1;placeholder:Will be filled automatically after authorization\">Access token</ui-component>\n\t\t\t\t\t<div class=\"help\">OAuth 2.0 access token</div>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.variable\" config=\"innerlabel:1;placeholder:Enter a variable key\">Assign token to the global variable</ui-component>\n\t\t\t\t\t<div class=\"help\">The access token will be automatically assigned into the global variables</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\t\t<ui-bind path=\"?.response\" config=\"html pre:value ? Thelpers.jsonformat(value) : ''__show\" class=\"hidden bg-smoke block\">\n\t\t\t<div class=\"padding\">\n\t\t\t\t<div class=\"fs12\">Response:</div>\n\t\t\t\t<pre style=\"font-size:12px;tab-size:4;margin:0;padding:5px 0\"></pre>\n\t\t\t\t<div class=\"help red\"><i class=\"ti ti-exclamation-triangle\"></i>Don't forget to save settings if you change something</div>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .exec { cursor: pointer; }\n\t.CLASS footer { padding: 8px 8px; font-size: 11px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.accesstoken\" config=\"show\">\n\t\t\t<div><span class=\"exec link\" data-exec=\"tmpoauth2.copy\"><i class=\"ti ti-copy mr5\"></i>Copy access token</span></div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\n\t\tvar tmp = W.tmpoauth2;\n\t\tif (!tmp) {\n\t\t\ttmp = W.tmpoauth2 = {};\n\t\t\ttmp.authorize = function(el) {\n\t\t\t\tvar scope = el.scope();\n\t\t\t\tvar model = scope.get();\n\t\t\t\tvar args = {};\n\t\t\t\targs.client_id = model.clientid;\n\t\t\t\targs.response_type = 'code';\n\t\t\t\tif (model.scope)\n\t\t\t\t\targs.scope = model.scope;\n\t\t\t\targs.redirect_uri = args.redirect_url = flow.head.notify;\n\t\t\t\targs.state = exports.id;\n\n\t\t\t\tfor (var key in args) {\n\t\t\t\t\tvar val = args[key];\n\t\t\t\t\tif (val && val.indexOf('{'))\n\t\t\t\t\t\targs[key] = val.replace(/\\{.*?\\}/g, text => flow.variables[text.substring(1, text.length - 1).trim()] || text);\n\t\t\t\t}\n\n\t\t\t\tvar draft = exports.draft();\n\t\t\t\tW.open(draft.urlauthorize + QUERIFY(args));\n\t\t\t};\n\n\t\t\ttmp.copy = function(el) {\n\t\t\t\tvar config = flow.config[ATTRD(el)];\n\t\t\t\tSETTER('clipboard/copy', config.accesstoken);\n\t\t\t\tSETTER('notify/success', 'Copied');\n\t\t\t};\n\t\t}\n\n\t\texports.notify = function(data) {\n\t\t\tvar draft = exports.draft();\n\t\t\tif (draft) {\n\t\t\t\tvar query = data.query;\n\t\t\t\tvar model = {};\n\t\t\t\tmodel.url = draft.urltoken;\n\t\t\t\tmodel.client_id = draft.clientid;\n\t\t\t\tmodel.client_secret = draft.clientsecret;\n\t\t\t\tmodel.code = query.code;\n\t\t\t\tmodel.redirect_uri = flow.head.notify;\n\t\t\t\tmodel.grant_type = 'authorization_code';\n\n\t\t\t\tfor (var key in model) {\n\t\t\t\t\tvar val = model[key];\n\t\t\t\t\tif (val && val.indexOf('{'))\n\t\t\t\t\t\tmodel[key] = val.replace(/\\{.*?\\}/g, text => flow.variables[text.substring(1, text.length - 1).trim()] || text);\n\t\t\t\t}\n\n\t\t\t\texports.call({ type: 'oauth', data: model }, ERROR(function(response) {\n\t\t\t\t\texports.draft('accesstoken @change', response.access_token);\n\t\t\t\t\texports.draft('response', response);\n\t\t\t\t}), true);\n\n\t\t\t}\n\t\t};\n\n\t});\n</script>",
			"request": "<script total>\n\n\texports.id = 'request';\n\texports.name = 'HTTP Request';\n\texports.group = 'Common';\n\texports.version = '7';\n\texports.icon = 'ti ti-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, secret: '', nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tvar secret = config.secret ? $.variables(config.secret, true) : null;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (secret && opt.body) {\n\t\t\t\topt.body = U.encrypt_data(opt.body, secret);\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers['X-Encryption'] = 'a';\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (secret && response.headers['x-encryption'])\n\t\t\t\t\tbody = U.decrypt_data(body, secret);\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.indexOf(';', 7);\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 5px 10px 10px; }\n\t.CLASS .status span { padding: 1px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<ui-bind path=\"CONFIG\" config=\"template;show:value.url\" class=\"block status\">\n\t\t<script type=\"text/html\">\n\t\t\t<div class=\"monospace hellip\" title=\"{{ value.url }}\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t</script>\n\t</ui-bind>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH;required:1\">Method</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1\"><b>URL address</b></ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number;format:\">Timeout</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-clock\"></i><ui-bind path=\"?.timeout\" config=\"text:((value||0)/1000).floor(2)+' sec.'\"></ui-bind><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number\">Max. size</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-calculator\"></i><ui-bind path=\"?.limit\" config=\"text:(value||0).filesize()\"></ui-bind><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.serialize\" config=\"dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:None;dirempty:None\" class=\"m\">Data serialization</ui-component>\n\t\t<ui-component name=\"keyvalue\" path=\"?.headers\" config=\"placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</ui-component>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<ui-component name=\"keyvalue\" path=\"?.cookies\" config=\"placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</ui-component>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.parse\" config=\"type:checkbox\">Parse Response to Object</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.dnscache\" config=\"type:checkbox\">Enable DNS cache</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.insecure\" config=\"type:checkbox\">Allow insecure connection</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.xhr\" config=\"type:checkbox\">Add XHR header</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.secret\" config=\"camouflage:1;icon:ti ti-totaljs\">Total.js Encryption/Decryption secret</ui-component>\n\t</div>\n</settings>",
			"debug": "<script total>\n\n\texports.id = 'debug';\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-circle-alt';\n\texports.color = '#E73323';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, debug: true, data: true, watch: [] };\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\n\t\tvar filter = null;\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.main.ondebug = function(a, b, c, d) {\n\n\t\t\tif (filter && !filter[this.id])\n\t\t\t\treturn;\n\n\t\t\tNOW = new Date();\n\n\t\t\tvar output = [];\n\n\t\t\tif (a !== undefined)\n\t\t\t\toutput.push(a);\n\t\t\tif (b !== undefined)\n\t\t\t\toutput.push(b);\n\t\t\tif (c !== undefined)\n\t\t\t\toutput.push(c);\n\t\t\tif (d !== undefined)\n\t\t\t\toutput.push(d);\n\n\t\t\tinstance.status({ name: this.module.name, type: 'debug', date: NOW, data: JSON.stringify(output, serializer) });\n\t\t};\n\n\t\tinstance.logger && instance.logger(function($) {\n\n\t\t\tif (filter && !filter[$.fromid])\n\t\t\t\treturn;\n\n\t\t\tif (!config.data && !config.repo)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\toutput && instance.status({ name: $.from.module.name, type: 'message', date: NOW, data: JSON.stringify(output, serializer) });\n\t\t});\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.watch && config.watch.length) {\n\t\t\t\tfilter = {};\n\t\t\t\tfor (var id of config.watch)\n\t\t\t\t\tfilter[id] = 1;\n\t\t\t} else\n\t\t\t\tfilter = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tif (!instance.logger)\n\t\t\tinstance.throw('You need to update Total.js framework');\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS { border-color: #E73323 !important; }\n\t.CLASS .area { background: #FEE7E7; }\n\t.CLASS header i { animation: 1s blink infinite alternate forwards; border-radius: 100px; }\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n\t.debugform pre:before { display: block; color: rgba(0, 0, 0, 0.3); margin-bottom: 5px; }\n\t.debugform .type-debug pre { background: #e6f4f7; }\n\t.debugform .type-debug pre:before { content: 'Debug'; }\n\t.debugform .type-message pre:before { content: 'Message'; }\n\t.ui-dark .CLASS .area { background: #7e4d4d; }\n\t.ui-dark .CLASS pre, .ui-dark .debugform pre { background-color: #404040; }\n\t.ui-dark .debugform pre:before { color: rgba(255, 255, 255, 0.3); }\n\t.ui-dark .debugform .type-debug pre { background: #283857; }\n</style>\n\n<readme>\nThe component can print the payload of incoming messages and `instance.debug()` log messages in JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.debug\" config=\"type:checkbox\">Shows debug messages</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"%debugsearch\" config=\"type:search;placeholder:Search components\" class=\"m\">Search</ui-component>\n\t\t<ui-component name=\"search\" path=\"%debugsearch\" config=\"selector:figure\">\n\t\t\t<ui-component name=\"selection\" path=\"?.watch\" config=\"datasource:flow.instances;click:figure\">\n\t\t\t\t<ui-bind path=\"flow.instances\" config=\"template\" class=\"block listing2 small\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t\t<figure data-search=\"{{ m.id }} {{ m.Component.name }}{{ if m.note }} {{ m.note }}{{ fi }}\">\n\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t<span class=\"selection\" data-id=\"{{ m.id }}\"><i class=\"ti ti-eye\"></i></span>{{ m.Component.name }}{{ if m.note }}<span class=\"gray ml10\">{{ m.note }}</span>{{ fi }}\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</figure>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-bind>\n\t\t\t</ui-component>\n\t\t</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ti ti-bull\" style=\"background:#E73323;color:#FFF\"></i><b>NAME</b>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"ti ti-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<ui-component name=\"box\" path=\"common.$debug\" config=\"if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:ti ti-bug;zindex:5;$id:debugwindowbox\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"ti ti-remove red\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></ui-component>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.close = function() {\n\t\t\tNUL('common.$debug');\n\t\t\tdelete W.debugwindow;\n\t\t\tdelete W.debugwindowclear;\n\t\t\tSETTER('#debugwindowbox/remove');\n\t\t};\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m type-{3}\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"ti ti-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(JSON.parse(data.data), '\\t')), data.type || 'message'));\n\t\t};\n\n\t});\n\n</script>",
			"code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, name: 'Code', code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n\nTo send data to the default output use `send(somedata);`\nTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n- first output--> `send(somedata)` or `$.send('output', somedata)`\n- second output --> `$.send('output2', somedata)`\n- ...\n- 5th output --> `$.send('output5', somedata)`\n- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-10 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.name\">Name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.outputs\" config=\"type:number;format:\">Number of outputs</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></ui-component>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\tTOUCH(function(exports, init) {\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar count = exports.instance.config.outputs;\n\t\t\t\tfor (let i = 1; i <= count; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + (i === 1 ? '' : i), name: (count === 1 ? 'Output' : 'Output #' + i) });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"json_schema_validator": "<script total>\n\texports.id = 'json_schema_validator';\n\texports.name = 'JSON Schema validator';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }, { id: 'schema', name: 'Schema' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'schema', name: 'Schema' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar schema;\n\n\t\tinstance.message = function($) {\n\t\t\tif (!schema) {\n\t\t\t\t$.send('error', { error: 'Not ready' });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ($.input === 'schema') {\n\t\t\t\t$.send('schema', { schema });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\t\t\tJSONSCHEMA(schema, data, function(error, response){\n\t\t\t\tif (error)\n\t\t\t\t\t$.send('error', { msg: 'Invalid data', error });\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t\tschema = config.schema && config.schema.parseJSON();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n[JSON schema documentation](https://json-schema.org/learn/getting-started-step-by-step.html)\n\n## Inputs\n\n- `input` validates data and send the result to output if no error, otherwise send error to error output\n- `schema` reads the schema and send it to the schema output\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"codemirror\" path=\"?.schema\" config=\"type:javascript;required:true;height:500\">JSON schema</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"printjson": "<script total>\n\n\texports.id = 'printjson';\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-component { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .ti-copy, .ui-objecttree .ti-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('ti-copy');\n\t\tel.tclass(iscopy ? 'ti-copy' : 'ti-link').tclass('ti-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('ti-check').tclass(iscopy ? 'ti-copy' : 'ti-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-component name=\"objecttree\" path=\"!STATUS\" config=\"exec:FUNC.printjson_click\" class=\"selectable\"></ui-component>\n\t</footer>\n</body>",
			"input": "<script total>\n\n\texports.id = 'input';\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'ti ti-wifi';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Input', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\t\tinstance.input = function(fromflowstreamid, fromid, data, reference) {\n\t\t\tvar msg = instance.newmessage(data);\n\t\t\tmsg.refs.reference = reference;\n\t\t\tmsg.send('data');\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\"><b>Input name</b></ui-component>\n\t\t<ui-component name=\"input\" path=\"?.readme\" config=\"monospace:1;type:multiline;height:250\">Readme</ui-component>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data in an encapsulated FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <ui-bind path=\"CONFIG.name\" config=\"text;empty\" class=\"b\"></ui-bind>\n\t</header>\n</body>",
			"stringoperations": "<script total>\n\n\texports.id = 'stringoperations';\n\texports.name = 'String Operations';\n\texports.icon = 'ti ti-font';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = { operation: 'lowercase' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar output;\n\t\t\tswitch(config.operation) {\n\t\t\t\tcase 'lowercase':\n\t\t\t\t\toutput = data.toLowerCase();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'uppercase':\n\t\t\t\t\toutput = data.toUpperCase();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\toutput = data.capitalize();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'slug':\n\t\t\t\t\toutput = data.slug();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'deburr':\n\t\t\t\t\toutput = data.toASCII();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'reverse':\n\t\t\t\t\toutput = data.split('').reverse().join('');\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spaces':\n\t\t\t\t\toutput = data.replace(/|s/g, '');\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'trim':\n\t\t\t\t\toutput = data.trim();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (!config.operation)\n\t\t\t\tconfig.operation = 'lowercase';\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis components can apply string operation to your components.\n\n- input: `String`\n- output: `String`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.operation\" config=\"type:select;dirsource:capitalize|Capitalize,lowercase|Lower Case,uppercase|Upper Case,slug|Slug,deburr|Remove diacritic,reverse|Reverse,spaces|Remove spaces\">Operation</ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; font-weight: bold; }\n\t.CLASS footer span { float: right; }\n\t.CLASS footer span i { font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.operation\" config=\"show\" class=\"block\">\n\t\t\tOperation: <span class=\"blue\"><ui-bind path=\"CONFIG.operation\" config=\"text:value.charAt(0).toUpperCase() + value.slice(1)\"></ui-bind></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"c8o0cc5da9": "<script total>\n\n\texports.name = 'PostgreSQL Connection from .env';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Databases';\n\texports.config = { envFile: '.env', name: '', pooling: 0, database: 'querybuilderpg' };\n\n\tconst dotenv = require('dotenv');\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\tconst envPath = PATH.root(config.envFile);\n\t\t\tconst envConfig = dotenv.config({ path: envPath });\n\n\t\t\tif (envConfig.error) {\n\t\t\t\tconsole.error('Failed to read .env file:', envConfig.error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst connectionString = `postgres://${envConfig.parsed.DB_USER}:${envConfig.parsed.DB_PASSWORD}` +\n\t\t\t\t`@${envConfig.parsed.DB_HOST}:${envConfig.parsed.DB_PORT}/${envConfig.parsed.DB_NAME}`;\n\n\t\t\tNPMINSTALL(config.database, function() {\n\t\t\t\trequire(config.database).init(config.name || 'default', connectionString, config.pooling || null);\n\t\t\t\tconsole.log('Sukses koneksiin ke PostgreSQL lewat .env');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component reads the PostgreSQL connection details from a specified `.env` file in the root directory and uses them to establish a connection to a PostgreSQL database via QueryBuilder. The database library is automatically installed if not already present.\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"$ICON\" style=\"font-size:50px;color:#5C1DC4\"></i>\n\t\t<div class=\"fs12 mt10\">$NAME</div>\n\t</div>\n</body>\n",
			"throttle": "<script total>\n\n\texports.id = 'throttle';\n\texports.name = 'Throttle';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-filter';\n\texports.author = 'Total.js';\n\texports.config = { limit: 1, delay: 0 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Outputs' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar pending = [];\n\t\tvar running = 0;\n\n\t\tvar check = function() {\n\t\t\tif (running < config.limit) {\n\n\t\t\t\tvar diff = config.limit - running;\n\t\t\t\tvar items = pending.splice(0, diff);\n\n\t\t\t\trunning += items.length;\n\n\t\t\t\tif (config.delay) {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\t\titem.send('output');\n\t\t\t\t\t}, config.delay);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\titem.send('output');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinstance.status(pending.length, 500);\n\t\t};\n\n\t\tvar end = function() {\n\t\t\trunning--;\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.on('end', end);\n\t\t\tpending.push($);\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tvar item = pending.shift();\n\t\t\tif (item) {\n\t\t\t\trunning++;\n\t\t\t\titem.send('output');\n\t\t\t}\n\t\t\tcheck();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component sends only limited count of messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;format:\">Limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.delay\" config=\"required:0;align:1;type:number;ricon:!ms;format:\">Delay</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<body>\n\t<header>\n\t\t<button class=\"button exec\" data-exec=\"FUNC.trigger\">Send</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><ui-bind path=\"STATUS\" config=\"text:(value || 0).format(0)\" class=\"status block\"></ui-bind></footer>\n</body>",
			"taction": "<script total>\n\n\texports.id = 'taction';\n\texports.name = 'Action';\n\texports.icon = 'ti ti-totaljs';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { partial: false, name: 'Unknown', input: '', query: '', color: '#68B25B', params: '', user: 0, permissions: '', code: '// model\\n// $.query\\n// $.params\\n// $.headers\\n// $.user\\n\\n$.success();', strerr: false, path: 'response', autoresponse: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.install = function(com) {\n\n\t\tMAIN.flowtaction = {};\n\n\t\tconst ARGS = /\\{{1,2}[a-z0-9_.-\\s]+\\}{1,2}/gi;\n\t\tconst Options = function($, config) {\n\n\t\t\tvar t = this;\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data || typeof(data) !== 'object')\n\t\t\t\tdata = {};\n\n\t\t\tt.id = config.name;\n\t\t\tt.error = new ErrorBuilder();\n\t\t\tt.controller = $.refs.controller;\n\t\t\tt.payload = data.payload || data.model || data.body;\n\n\t\t\tif (typeof(t.payload) !== 'object' || !t.payload)\n\t\t\t\tt.payload = {};\n\n\t\t\tt.message = $;\n\t\t\tt.config = config;\n\t\t\tt.user = data.user;\n\t\t\tt.query = data.query || {};\n\t\t\tt.params = data.params || {};\n\t\t\tt.url = data.url;\n\t\t\tt.language = data.language;\n\t\t\tt.headers = data.headers || {};\n\t\t\tt.files = data.files || [];\n\t\t\tt.cookies = data.cookies || {};\n\t\t\tt.ip = data.ip;\n\t\t\tt.ua = data.ua;\n\t\t\tt.request = data;\n\t\t};\n\n\t\tOptions.prototype = {\n\n\t\t\tget value() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tget model() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tset value(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t},\n\n\t\t\tset model(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.audit = function(message, type) {\n\t\t\tF.audit(this, message ? this.variables(message) : '', type);\n\t\t};\n\n\t\tOptions.prototype.success = function(value) {\n\t\t\tvar self = this;\n\n\t\t\tself.request[self.config.path] = { success: true, value: value };\n\n\t\t\tif (self.config.autoresponse) {\n\t\t\t\tvar refs = self.message.refs;\n\t\t\t\tif (refs) {\n\t\t\t\t\trefs.controller.json(self.request[self.config.path]);\n\t\t\t\t\trefs.controller = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tself.message.send('output', self.request);\n\t\t};\n\n\t\tOptions.prototype.cancel = function() {\n\t\t\tvar self = this;\n\t\t\tself.message.destroy();\n\t\t};\n\n\t\tOptions.prototype.successful = function(callback) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, a, b, c) {\n\t\t\t\tif (err)\n\t\t\t\t\tself.invalid(err);\n\t\t\t\telse\n\t\t\t\t\tcallback.call(self, a, b, c);\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.send = Options.prototype.callback = function(value) {\n\n\t\t\tvar self = this;\n\n\t\t\tif (arguments.length == 0) {\n\t\t\t\treturn function(err, response) {\n\t\t\t\t\terr && self.error.push(err);\n\t\t\t\t\tself.callback(response);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet msg = self.message;\n\t\t\tlet refs = msg.refs;\n\t\t\tlet cfg = self.config;\n\n\t\t\tif (self.error.items.length) {\n\t\t\t\tself.request[cfg.path] = cfg.strerr ? self.error.toString() : self.error.output();\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.invalid(self.error);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('error', self.request);\n\n\t\t\t} else {\n\n\t\t\t\tself.request[cfg.path] = value;\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.json(value);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('output', self.request);\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.done = function(arg) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.error.push(err);\n\t\t\t\t\tself.callback(null);\n\t\t\t\t} else\n\t\t\t\t\tself.callback({ success: true, value: arg === true ? response : arg });\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.invalid = function(error, path, index) {\n\t\t\tvar self = this;\n\t\t\tself.error.push(error, path, index);\n\t\t\tself.callback(null);\n\t\t};\n\n\t\tOptions.prototype.cookie = function(name, value, expire, options) {\n\t\t\tvar self = this;\n\t\t\tif (value === undefined)\n\t\t\t\treturn self.cookies[name];\n\n\t\t\tif (value === null)\n\t\t\t\texpire = '-1 day';\n\n\t\t\tif (self.controller) {\n\t\t\t\tself.controller.cookie(name, value, expire, options);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tOptions.prototype.variables = function(str, data) {\n\n\t\t\tif (str.indexOf('{') === -1)\n\t\t\t\treturn str;\n\n\t\t\tvar $ = this;\n\n\t\t\treturn str.replace(ARGS, function(text) {\n\t\t\t\tvar l = text[1] === '{' ? 2 : 1;\n\t\t\t\tvar key = text.substring(l, text.length - l).trim();\n\t\t\t\tvar val = null;\n\t\t\t\tvar five = key.substring(0, 5);\n\t\t\t\tif (five === 'user.') {\n\t\t\t\t\tif ($.user) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.user[key] : U.get($.user, key);\n\t\t\t\t\t}\n\t\t\t\t} else if (five === 'data.') {\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? data[key] : U.get(data, key);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar six = key.substring(0, 6);\n\t\t\t\t\tif (six === 'model.' || six === 'value.') {\n\t\t\t\t\t\tif ($.model) {\n\t\t\t\t\t\t\tkey = key.substring(6);\n\t\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.model[key] : U.get($.model, key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (six === 'query.')\n\t\t\t\t\t\tval = $.query[key.substring(6)];\n\t\t\t\t\telse if (key.substring(0, 7) === 'params.')\n\t\t\t\t\t\tval = $.params[key.substring(7)];\n\t\t\t\t}\n\t\t\t\treturn val == null ? text : val;\n\t\t\t});\n\n\t\t};\n\n\t\tMAIN.flowtaction.Options = Options;\n\t\tMAIN.flowtaction.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t};\n\n\texports.uninstall = function() {\n\t\tdelete MAIN.flowtaction;\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar cfg = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar opt = new MAIN.flowtaction.Options($, cfg);\n\t\t\tif (fn) {\n\n\t\t\t\t// check user\n\t\t\t\tif (cfg.user || cfg.permissions) {\n\n\t\t\t\t\tif ((cfg.user === 2 && opt.user) || (cfg.user === 1 && !opt.user)) {\n\t\t\t\t\t\topt.invalid(401);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cfg.user === 1 && cfg.permissions) {\n\t\t\t\t\t\tlet permissions = cfg.permissions.slice(0);\n\t\t\t\t\t\tpermissions.unshift(opt);\n\t\t\t\t\t\tif (UNAUTHORIZED.apply(global, permissions))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check data\n\t\t\t\tlet tmp;\n\n\t\t\t\tif (cfg.input) {\n\t\t\t\t\ttmp = cfg.input.transform(opt.payload, cfg.partial, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.payload = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.query) {\n\t\t\t\t\topt.error.prefix = 'query.';\n\t\t\t\t\ttmp = cfg.query.transform(opt.query, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.query = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.params) {\n\t\t\t\t\topt.error.prefix = 'params.';\n\t\t\t\t\ttmp = cfg.params.transform(opt.params, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.params = tmp.response;\n\t\t\t\t}\n\n\t\t\t\topt.error.prefix = '';\n\n\t\t\t\ttry {\n\t\t\t\t\tfn(opt, opt.payload);\n\t\t\t\t} catch (e) {\n\t\t\t\t\topt.invalid(e);\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\topt.invalid(501);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tfn = config.code.includes('await ') ? new MAIN.flowtaction.AsyncFunction('$', 'model', 'data', 'value', config.code) : new Function('$', 'model', 'data', 'value', config.code);\n\n\t\t\tcfg = {};\n\t\t\tfor (var key in config) {\n\t\t\t\tif (key !== 'code')\n\t\t\t\t\tcfg[key] = config[key];\n\t\t\t}\n\n\t\t\tcfg = instance.replace(cfg);\n\t\t\tcfg.input = cfg.input ? cfg.input.toJSONSchema() : null;\n\t\t\tcfg.query = cfg.query ? cfg.query.toJSONSchema() : null;\n\t\t\tcfg.params = cfg.params ? cfg.params.toJSONSchema() : null;\n\t\t\tcfg.permissions = cfg.permissions ? cfg.permissions.split(',').trim() : null;\n\n\t\t\tif (cfg.permissions && !cfg.permissions.length)\n\t\t\t\tcfg.permissions = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component creates similar functionality as Total.js Actions.\n\n## Payload\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\n## Custom scripting\n\n- supports `await`\n- supports Total.js global functions\n\n__Properties__:\n\n- `$.model {Object}` or `model` parsed payload\n- `$.query {Object}` parsed URL query arguments\n- `$.params {Object}` parsed URL params\n- `$.cookies {Object}` parsed cookies\n- `$.files [Object]` uploaded files\n- `$.user {Object}` user session (optional)\n- `$.headers {Object}` request headers\n- `$.ip {String}` IP address (optional)\n- `$.language {String}` optional\n- `$.ua {String}` parsed user agent (optional)\n- `$.url {String}` URL endpoint\n- `$.message {Object}` Flow message instance\n- `$.request {Object}` Flow message payload data\n\n__Methods__:\n\n- `$.invalid(error)` responds with an error and ends the action\n- `$.success([value])` responds with `{ success: true, value }` object and ends the action\n- `$.send(value)` responds with `value` object and ends the action\n- `$.cancel()` ends the action without response\n- `$.audit(message, [type])` writes audit\n\n## Supported types\n\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\" style=\"padding-bottom:5px\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\">Action name</ui-component>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.color\" config=\"required:1;type:color\">Color</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div class=\"pull-left\">\n\t\t\t\t<div class=\"ui-input-label\">Allow only:</div>\n\t\t\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t\t\t<span>Authorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t\t\t<span>Unauthorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t\t\t<span>Both</span>\n\t\t\t\t\t</div>\n\t\t\t\t</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"pull-left\" style=\"margin-left:20px\">\n\t\t\t\t<div style=\"height:25px\"></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.autoresponse\" config=\"type:checkbox\">Auto HTTP response</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.input\" config=\"monospace:1;maxlength:100000;placeholder:name\\:Name, *email\\:Email\">Payload schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.query\" config=\"monospace:1;maxlength:100000;placeholder:page\\:Number\">Query arguments schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"padding bg-smoke radius npb\">\n\t\t\t\t<div class=\"grid-3\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.params\" config=\"monospace:1;maxlength:100000;placeholder:*id\\:String\">Params schema</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.permissions\" config=\"monospace:1;maxlength:100000;placeholder:admin, director\">Permissions</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;required:1;placeholder:response\">Path for storing a response</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .content { min-width: 200px; }\n\t.CLASS header { color: #FFF; padding: 5px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px 5px; }\n\t.CLASS .ti { color: #999; }\n\t.CLASS footer > div { padding: 10px 10px 0; }\n\t.CLASS-code .CodeMirror { border: 0; border-left: 1px solid #E0E0E0; border-radius: none; }\n\t.CLASS-code-editor { margin-left: 200px; }\n\t.CLASS-code-info { float: left; width: 200px; padding: 12px; font-size: 12px; }\n\t.CLASS-code-info code { overflow-wrap: break-word; white-space: pre-wrap; display: block; padding: 0 3px; }\n\t.CLASS-code-button { padding: 10px; border-top: 1px solid #E0E0E0; }\n\t.CLASS-code-button button { font-size: 14px; height: 36px; font-weight: bold; }\n\t.CLASS-settings .iconmenu { height: 80px; }\n\t.CLASS-settings .iconmenu > div { height: 76px; }\n\t.CLASS-settings .iconmenu span { padding-top: 8px; }\n\t.CLASS-settings .iconmenu i { padding-top: 16px; }\n\t.ui-dark .CLASS-code .CodeMirror { border-left-color: #404040; }\n\t.ui-dark .CLASS-code-button { border-top-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"background-color:{{ value.color }}\">{{ value.name }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button exec\" data-exec=\"=sourcecode\"><i class=\"ti ti-js\"></i>Script</button></div>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\" class=\"block fs11\" style=\"padding:10px\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ if value.autoresponse }}<div class=\"b\"><i class=\"ti ti-check-square green mr5\"></i>Auto HTTP response</div>{{ fi }}\n\t\t\t\t<div><i class=\"ti ti-check-square mr5\"></i>{{ if value.user === 1 }}Authorized only{{ else if value.user === 2 }}Unauthorized only{{ else }}All allowed{{ fi }}</div>\n\t\t\t\t{{ if value.partial }}<div><i class=\"ti ti-check-square green mr5\"></i>Partial data</div>{{ fi }}\n\t\t\t\t{{ if value.input }}<div><i class=\"ti ti-check-square green mr5\"></i>Payload</div>{{ fi }}\n\t\t\t\t{{ if value.query }}<div><i class=\"ti ti-check-square green mr5\"></i>URL Query arguments</div>{{ fi }}\n\t\t\t\t{{ if value.params }}<div><i class=\"ti ti-check-square green mr5\"></i>Params</div>{{ fi }}\n\t\t\t\t{{ if value.permissions }}<div><i class=\"ti ti-check-square green mr5\"></i>Permissions</div>{{ fi }}\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (!common.codeactions) {\n\t\t\tcommon.codeactions = {};\n\t\t\tW.codeactionssubmit = function(el) {\n\n\t\t\t\tif (BLOCKED('codeaction', 1000))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar winid = ATTRD(el);\n\t\t\t\tvar id = winid.substring(4);\n\t\t\t\tvar code = common.codeactions[winid];\n\t\t\t\tvar instance = flowinstances.instances[id];\n\t\t\t\tvar config = instance.config;\n\t\t\t\tconfig.code = code;\n\t\t\t\tinstance.reconfigure(config);\n\t\t\t};\n\t\t\tW.codeactionsinit = function(com) {\n\t\t\t\tvar save = () => W.codeactionssubmit(com.element);\n\t\t\t\tvar map = { 'Cmd-S': save, 'Ctrl-S': save };\n\t\t\t\tcom.editor.addKeyMap(map);\n\t\t\t};\n\t\t}\n\n\t\texports.renderschema = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar config = exports.config;\n\n\t\t\tvar write = function(name, label) {\n\t\t\t\tif (config[name]) {\n\t\t\t\t\tbuilder.push('<div class=\"b badge badge-gray\" style=\"display:block\">{0}</div>'.format(label));\n\t\t\t\t\tvar val = config[name].replace(/\\,/g, '\\n');\n\t\t\t\t\tbuilder.push('<div class=\"m mt5\"><code>{0}</code></div>'.format(val));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twrite('params', 'Dynamic parameters');\n\t\t\twrite('query', 'URL query arguments');\n\t\t\twrite('input', 'Payload');\n\n\t\t\treturn builder.join('');\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar key = 'code' + exports.id;\n\t\t\tvar win = common.windows.findItem('id', key);\n\t\t\tif (win) {\n\t\t\t\tvar path = '*codeactions.' + key;\n\t\t\t\tvar prev = GET(path);\n\t\t\t\tif (prev !== exports.config.code)\n\t\t\t\t\tSET(path, exports.config.code);\n\t\t\t\twin.element.find('.CLASS-code-info').html(exports.renderschema());\n\t\t\t}\n\t\t};\n\n\t\texports.sourcecode = function() {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar path = '*codeactions.code' + exports.id;\n\t\t\tvar winid = 'code' + exports.id;\n\n\t\t\tif (common.windows.findItem('id', winid)) {\n\t\t\t\tSETTER('windows/focus', winid);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSET(path, config.code);\n\n\t\t\tPUSH('common.windows', { id: winid, cachekey: 'codeaction', cache: 'readme', html: '<div class=\"CLASS-code invisible\"><div class=\"CLASS-code-info noscrollbar\">{1}</div><div class=\"CLASS-code-editor\"><ui-component name=\"codemirror\" path=\"{0}\" config=\"type:javascript;parent:auto;margin:60;$init:codeactionsinit\"></ui-component></div><div class=\"CLASS-code-button\"><button class=\"button exec\" data-exec=\"codeactionssubmit\">Apply</button></div></div>'.format(path, exports.renderschema()), title: 'Action script: ' + config.name, actions: { move: true, autosave: true, close: true, maximize: true, minimize: false }, offset: { x: ((WW / 2) - 275) >> 0, y: ((WH / 2) - 250) >> 0, width: 750, height: 500, minwidth: 200, minheight: 300, maxwidth: 1200, maxheight: 1200 }, make: function(el) {\n\t\t\t\tel.closest('.ui-windows-item').css('z-index', 50);\n\t\t\t\tel.find('.CLASS-code').rclass('invisible', 500);\n\t\t\t}});\n\t\t};\n\n\t});\n\n</script>",
			"model": "<script total>\n\n\texports.id = 'model';\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'ti ti-file';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\tval = val.parseDate();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!(val instanceof Date) || isNaN(val))\n\t\t\t\t\t\t\tval = null;\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tif (val) {\n\n\t\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Model name</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"hellip\"><span class=\"edit label\" data-edit=\"exec:tmprestmodel.label;required:1\">{{ m.label }}</span><span class=\"monospace edit key\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</span></div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name .label { background-color: #000; outline: 0; padding: 2px 3px; color: #FFF; }\n\t.CLASS-settings figure .name .key { font-weight: bold; margin-left: 5px; outline: 0; }\n\t.CLASS-settings figure .name > div:first-child { outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .name .label { background-color: #FFF; color: #000; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"ti ti-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), label: 'Name', name: 'propname', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.label = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.label = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- {0} `{1} {{2}}`'.format(m.label, m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>"
		},
		"design": {
			"ilzrrpd5d": {
				"id": "ilzrrpd5d",
				"config": {
					"random": false,
					"type": "object",
					"data": "{ id: 'fauzi@gmail.com' }",
					"restart": false,
					"prompt": false
				},
				"x": 25,
				"y": 93,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "ilzrrph3f",
							"index": "create"
						}
					]
				}
			},
			"ilzrrpfn3": {
				"id": "ilzrrpfn3",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 548,
				"y": 167,
				"component": "print",
				"connections": {}
			},
			"ilzrrph3f": {
				"id": "ilzrrph3f",
				"config": {
					"count": 3,
					"type": "pin",
					"length": 6,
					"expire": "5 minutes",
					"lock": "",
					"limit": 1
				},
				"x": 294,
				"y": 163,
				"component": "confirmationcode",
				"connections": {
					"output": [
						{
							"id": "ilzrrpfn3",
							"index": "input"
						}
					]
				}
			},
			"ilzrrs2v1": {
				"id": "ilzrrs2v1",
				"config": {
					"random": false,
					"type": "object",
					"data": "{ id: 'fauzi@gmail.com', value: '976006'}",
					"restart": false,
					"prompt": false
				},
				"x": 24,
				"y": 238,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "ilzrrph3f",
							"index": "verify"
						}
					]
				}
			},
			"ilzrrtvyf": {
				"id": "ilzrrtvyf",
				"config": {
					"url": "/create/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "query",
					"reader": "-"
				},
				"x": 31,
				"y": 386,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzrru22q",
							"index": "create"
						}
					]
				}
			},
			"ilzrrtx3n": {
				"id": "ilzrrtx3n",
				"config": {
					"type": "json",
					"code": 200,
					"path": "response"
				},
				"x": 564,
				"y": 436,
				"component": "tresponse",
				"connections": {
					"output": [
						{
							"id": "ilzrrysgo",
							"index": "input"
						}
					]
				}
			},
			"ilzrrtzya": {
				"id": "ilzrrtzya",
				"config": {
					"url": "/verify/",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "query",
					"reader": "-"
				},
				"x": 22,
				"y": 514,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzrru22q",
							"index": "verify"
						}
					]
				}
			},
			"ilzrru22q": {
				"id": "ilzrru22q",
				"config": {
					"count": 3,
					"type": "pin",
					"length": 6,
					"expire": "5 minutes",
					"lock": "",
					"limit": 1
				},
				"x": 286.5,
				"y": 419.5,
				"component": "confirmationcode",
				"connections": {
					"output": [
						{
							"id": "ilzrrtx3n",
							"index": "input"
						},
						{
							"id": "ilzrrysgo",
							"index": "input"
						}
					]
				}
			},
			"ilzrrysgo": {
				"id": "ilzrrysgo",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 776,
				"y": 550,
				"component": "print",
				"connections": {}
			},
			"ilzrsdr2g": {
				"id": "ilzrsdr2g",
				"config": {
					"repo": false,
					"debug": true,
					"data": true,
					"watch": []
				},
				"x": 294,
				"y": 21,
				"component": "debug",
				"connections": {}
			},
			"ilzrt5fc9": {
				"id": "ilzrt5fc9",
				"config": {
					"url": "/register/",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 767,
				"y": 63,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzrt5j3m",
							"index": "input"
						}
					]
				}
			},
			"ilzrt5j3m": {
				"id": "ilzrt5j3m",
				"config": {
					"schema": "{\n  \"$schema\": \"https://json-schema.org/draft/2020-12/schema\",\n  \"$id\": \"https://example.com/product.schema.json\",\n  \"title\": \"Product\",\n  \"description\": \"A product from Acme's catalog\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"productId\": {\n      \"description\": \"The unique identifier for a product\",\n      \"type\": \"integer\"\n    },\n    \"productName\": {\n      \"description\": \"Name of the product\",\n      \"type\": \"string\"\n    },\n    \"price\": {\n      \"description\": \"The price of the product\",\n      \"type\": \"number\",\n      \"exclusiveMinimum\": 0\n    }\n  },\n  \"required\": [ \"productId\", \"productName\", \"price\" ]\n}\n"
				},
				"x": 1015.5,
				"y": 76.5,
				"component": "json_schema_validator",
				"connections": {
					"schema": [
						{
							"id": "ilzrt5pcd",
							"index": "input"
						}
					],
					"output": [
						{
							"id": "ilzrt5pcd",
							"index": "input"
						},
						{
							"id": "ilzrtwhzh",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "ilzrt5pcd",
							"index": "input"
						}
					]
				}
			},
			"ilzrt5pcd": {
				"id": "ilzrt5pcd",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1495,
				"y": 53,
				"component": "printjson",
				"connections": {}
			},
			"ilzrt8sn1": {
				"id": "ilzrt8sn1",
				"config": {
					"envFile": ".env",
					"name": "",
					"pooling": 0,
					"database": "querybuilderpg"
				},
				"x": 502,
				"y": 10,
				"component": "c8o0cc5da9",
				"connections": {}
			},
			"ilzrthg5w": {
				"id": "ilzrthg5w",
				"config": {
					"count": 3,
					"type": "pin",
					"length": 4,
					"expire": "5 minutes",
					"lock": "",
					"limit": 1
				},
				"x": 1608,
				"y": 226,
				"component": "confirmationcode",
				"connections": {
					"output": [
						{
							"id": "ilzrthq0a",
							"index": "input"
						},
						{
							"id": "ilzru50v1",
							"index": "input"
						}
					]
				}
			},
			"ilzrthq0a": {
				"id": "ilzrthq0a",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1890,
				"y": 164,
				"component": "print",
				"connections": {}
			},
			"ilzrtwhzh": {
				"id": "ilzrtwhzh",
				"config": {
					"partial": false,
					"name": "save-static-register-data",
					"input": "",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\n$.success();",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 1287,
				"y": 204,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "ilzrthg5w",
							"index": "create"
						}
					],
					"error": [
						{
							"id": "ilzrt5pcd",
							"index": "input"
						}
					]
				}
			},
			"ilzru1frq": {
				"id": "ilzru1frq",
				"config": {
					"url": "/register/verify-otp/",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 1260,
				"y": 410,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "ilzrthg5w",
							"index": "verify"
						}
					]
				}
			},
			"ilzru50v1": {
				"id": "ilzru50v1",
				"config": {
					"partial": false,
					"name": "save-register-data",
					"input": "",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\n$.success();",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 1884,
				"y": 387,
				"component": "taction",
				"connections": {}
			}
		},
		"sources": {},
		"size": 122164,
		"variables2": {},
		"directory": "C:\\DAD Project\\ToDoListWebsite\\flow\\flowstream\\"
	},
	"fIpAL0G1c561f": {
		"id": "fIpAL0G1c561f",
		"name": "todo-list",
		"author": "",
		"version": "",
		"icon": "ti ti-microchip",
		"reference": "",
		"group": "",
		"url": "https://",
		"cloning": true,
		"color": "",
		"readme": "",
		"memory": 0,
		"proxypath": "/todo/",
		"variables": {},
		"dtcreated": "2024-08-26T04:00:10.635Z",
		"asfiles": false,
		"worker": "fork",
		"origin": "http://localhost:8000",
		"paused": false,
		"dtupdated": "2024-08-27T02:23:25.201Z",
		"sandbox": false,
		"components": {
			"code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, name: 'Code', code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n\nTo send data to the default output use `send(somedata);`\nTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n- first output--> `send(somedata)` or `$.send('output', somedata)`\n- second output --> `$.send('output2', somedata)`\n- ...\n- 5th output --> `$.send('output5', somedata)`\n- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-10 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.name\">Name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.outputs\" config=\"type:number;format:\">Number of outputs</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></ui-component>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\tTOUCH(function(exports, init) {\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar count = exports.instance.config.outputs;\n\t\t\t\tfor (let i = 1; i <= count; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + (i === 1 ? '' : i), name: (count === 1 ? 'Output' : 'Output #' + i) });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"debug": "<script total>\n\n\texports.id = 'debug';\n\texports.name = 'Debug';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-circle-alt';\n\texports.color = '#E73323';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, debug: true, data: true, watch: [] };\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\n\t\tvar filter = null;\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.main.ondebug = function(a, b, c, d) {\n\n\t\t\tif (filter && !filter[this.id])\n\t\t\t\treturn;\n\n\t\t\tNOW = new Date();\n\n\t\t\tvar output = [];\n\n\t\t\tif (a !== undefined)\n\t\t\t\toutput.push(a);\n\t\t\tif (b !== undefined)\n\t\t\t\toutput.push(b);\n\t\t\tif (c !== undefined)\n\t\t\t\toutput.push(c);\n\t\t\tif (d !== undefined)\n\t\t\t\toutput.push(d);\n\n\t\t\tinstance.status({ name: this.module.name, type: 'debug', date: NOW, data: JSON.stringify(output, serializer) });\n\t\t};\n\n\t\tinstance.logger && instance.logger(function($) {\n\n\t\t\tif (filter && !filter[$.fromid])\n\t\t\t\treturn;\n\n\t\t\tif (!config.data && !config.repo)\n\t\t\t\treturn;\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tNOW = new Date();\n\t\t\toutput && instance.status({ name: $.from.module.name, type: 'message', date: NOW, data: JSON.stringify(output, serializer) });\n\t\t});\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.watch && config.watch.length) {\n\t\t\t\tfilter = {};\n\t\t\t\tfor (var id of config.watch)\n\t\t\t\t\tfilter[id] = 1;\n\t\t\t} else\n\t\t\t\tfilter = null;\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\tvar components = instance.main.meta.components;\n\t\t\tvar schema = instance.main.meta.flow;\n\n\t\t\tfor (var key in schema) {\n\t\t\t\tvar m = schema[key];\n\t\t\t\tif (m.component) {\n\t\t\t\t\tvar c = components[m.component];\n\t\t\t\t\tif (c.name === 'Debug')\n\t\t\t\t\t\tm.status({});\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t\tif (!instance.logger)\n\t\t\tinstance.throw('You need to update Total.js framework');\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS { border-color: #E73323 !important; }\n\t.CLASS .area { background: #FEE7E7; }\n\t.CLASS header i { animation: 1s blink infinite alternate forwards; border-radius: 100px; }\n\t.CLASS footer { padding: 10px; }\n\t.CLASS pre, .debugform pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.debugform .date { font-size: 11px; margin-bottom: 5px; }\n\t.debugform .name { float: right; font-size: 11px; font-weight: bold; }\n\t.debugform pre:before { display: block; color: rgba(0, 0, 0, 0.3); margin-bottom: 5px; }\n\t.debugform .type-debug pre { background: #e6f4f7; }\n\t.debugform .type-debug pre:before { content: 'Debug'; }\n\t.debugform .type-message pre:before { content: 'Message'; }\n\t.ui-dark .CLASS .area { background: #7e4d4d; }\n\t.ui-dark .CLASS pre, .ui-dark .debugform pre { background-color: #404040; }\n\t.ui-dark .debugform pre:before { color: rgba(255, 255, 255, 0.3); }\n\t.ui-dark .debugform .type-debug pre { background: #283857; }\n</style>\n\n<readme>\nThe component can print the payload of incoming messages and `instance.debug()` log messages in JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.debug\" config=\"type:checkbox\">Shows debug messages</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"%debugsearch\" config=\"type:search;placeholder:Search components\" class=\"m\">Search</ui-component>\n\t\t<ui-component name=\"search\" path=\"%debugsearch\" config=\"selector:figure\">\n\t\t\t<ui-component name=\"selection\" path=\"?.watch\" config=\"datasource:flow.instances;click:figure\">\n\t\t\t\t<ui-bind path=\"flow.instances\" config=\"template\" class=\"block listing2 small\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t\t<figure data-search=\"{{ m.id }} {{ m.Component.name }}{{ if m.note }} {{ m.note }}{{ fi }}\">\n\t\t\t\t\t\t\t<section>\n\t\t\t\t\t\t\t\t<span class=\"selection\" data-id=\"{{ m.id }}\"><i class=\"ti ti-eye\"></i></span>{{ m.Component.name }}{{ if m.note }}<span class=\"gray ml10\">{{ m.note }}</span>{{ fi }}\n\t\t\t\t\t\t\t</section>\n\t\t\t\t\t\t</figure>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-bind>\n\t\t\t</ui-component>\n\t\t</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ti ti-bull\" style=\"background:#E73323;color:#FFF\"></i><b>NAME</b>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button\" name=\"toggle\"><i class=\"ti ti-eye\"></i>Toggle</button></div>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar services = [];\n\n\t\tif (!reinit) {\n\n\t\t\tif (!W.debugwindow) {\n\t\t\t\tCACHEPATH('common.$debug', '1 week');\n\t\t\t\tW.debugwindow = [];\n\t\t\t\tW.debugwindowclear = function() {\n\t\t\t\t\tfor (var key in flow.data) {\n\t\t\t\t\t\tvar com = flow.data[key];\n\t\t\t\t\t\tif (com.name === 'debug') {\n\t\t\t\t\t\t\tflowinstances.instances[key].clear();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t$(document.body).append('<ui-component name=\"box\" path=\"common.$debug\" config=\"if:debugform;align:right;width:420;background:false;transparent:true;title:Debug panel;icon:ti ti-bug;zindex:5;$id:debugwindowbox\"><nav><button class=\"exec\" data-exec=\"debugwindowclear\"><i class=\"ti ti-remove red\"></i>Clear</button></nav><div class=\"padding debugform\" id=\"debugformbody\"></div></ui-component>');\n\n\t\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\t\tSET('common.$debug', common.$debug ? '' : 'debugform');\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\texports.close = function() {\n\t\t\tNUL('common.$debug');\n\t\t\tdelete W.debugwindow;\n\t\t\tdelete W.debugwindowclear;\n\t\t\tSETTER('#debugwindowbox/remove');\n\t\t};\n\n\t\texports.clear = function() {\n\t\t\texports.trigger();\n\t\t\t$('#debugformbody').empty();\n\t\t};\n\n\t\texports.status = function(data) {\n\t\t\tif (data && data.date)\n\t\t\t\t$('#debugformbody').prepend('<div class=\"m type-{3}\"><div class=\"name\">{0}</div><div class=\"date\"><i class=\"ti ti-calendar mr5\"></i>{1}</div><pre class=\"json\">{2}</pre></div>'.format(data.name, data.date.format('[ts]'), Thelpers.jsonformat(JSON.stringify(JSON.parse(data.data), '\\t')), data.type || 'message'));\n\t\t};\n\n\t});\n\n</script>",
			"consolelog": "<script total>\n\n\texports.id = 'consolelog';\n\texports.name = 'console.log()';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\tconsole.log($.data);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component prints a message into the console.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"counter": "<script total>\n\n\texports.id = 'counter';\n\texports.name = 'Counter';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-calculator';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance) {\n\n\t\tvar status = { count: 0, ts: null };\n\n\t\tinstance.message = function($) {\n\t\t\tstatus.count++;\n\t\t\tstatus.ts = NOW = new Date();\n\t\t\tinstance.status(status, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function(data) {\n\t\t\tstatus.count = 0;\n\t\t\tstatus.ts = null;\n\t\t\tinstance.status(status);\n\t\t};\n\n\t\tinstance.status(status);\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n\t.CLASS .ts { text-align: center; font-size: 11px; color: #777; padding: 5px 0; border-top: 1px solid rgba(0,0,0,0.1); margin: 0 15px; }\n</style>\n\n<readme>\nThe component counts incoming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Reset</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"template\" class=\"block\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"status\">{{ value.count }}</div>\n\t\t\t\t<div class=\"ts\">{{ if value.ts }}{{ value.ts | format('[ts]') }}{{ else }}---{{ fi }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"delay": "<script total>\n\n\texports.id = 'delay';\n\texports.name = 'Delay';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-hourglass';\n\texports.author = 'Total.js';\n\texports.config = { delay: 1000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar items = [];\n\t\tvar timeout;\n\t\tvar paused = false;\n\t\tvar status = { pending: 0 };\n\n\t\tinstance.checkstatus = function() {\n\t\t\tstatus.pending = items.length;\n\t\t\tinstance.status(status, 1000);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\n\t\t\ttimeout = null;\n\n\t\t\tif (paused)\n\t\t\t\treturn;\n\n\t\t\tvar msg = items.pop();\n\t\t\tif (msg) {\n\t\t\t\tinstance.checkstatus();\n\t\t\t\tmsg.send('output');\n\t\t\t\ttimeout = clearTimeout(timeout);\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\titems.push($);\n\t\t\tinstance.checkstatus();\n\t\t\tif (!timeout)\n\t\t\t\ttimeout = setTimeout(instance.trigger, config.delay);\n\t\t};\n\n\t\tinstance.pause = function(is) {\n\t\t\tpaused = is;\n\t\t\t!is && instance.trigger();\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfor (let $ of items)\n\t\t\t\t$.destroy();\n\t\t\titems = null;\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.trigger);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS .status ui-bind { color: #A0A0A0; }\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS .status ui-bind { color: #777; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-4\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.delay\" config=\"type:number;required:1;format:\">Delay</ui-component>\n\t\t\t\t<div class=\"help\">In milliseconds</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThe component delays processing of a message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button class=\"exec\" data-exec=\"FUNC.fdelay_exec\">Skip</button>\n\t</div>\n\t<footer>\n\t\t<div class=\"status\">\n\t\t\t<div>Timeout: <ui-bind path=\"CONFIG.delay\" config=\"text:(value?value:'0')+'ms'\"></ui-bind></div>\n\t\t\t<div>Delayed messages: <b><ui-bind path=\"STATUS.pending\" config=\"text:value?value.format(0):'0'\"></ui-bind></b></div>\n\t\t</div>\n\t</footer>\n</body>\n\n<script>\n\tFUNC.fdelay_exec = function(el) {\n\t\tif (!BLOCKED('fdelay', 500))\n\t\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>",
			"end": "<script total>\n\n\texports.id = 'end';\n\texports.name = 'End';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-ban';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.kind = 'output';\n\n\texports.make = function(instance) {\n\t\tinstance.message = function($) {\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component destroys the incoming message.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"request": "<script total>\n\n\texports.id = 'request';\n\texports.name = 'HTTP Request';\n\texports.group = 'Common';\n\texports.version = '7';\n\texports.icon = 'ti ti-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, secret: '', nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tvar secret = config.secret ? $.variables(config.secret, true) : null;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (secret && opt.body) {\n\t\t\t\topt.body = U.encrypt_data(opt.body, secret);\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers['X-Encryption'] = 'a';\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (secret && response.headers['x-encryption'])\n\t\t\t\t\tbody = U.decrypt_data(body, secret);\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.indexOf(';', 7);\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 5px 10px 10px; }\n\t.CLASS .status span { padding: 1px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<ui-bind path=\"CONFIG\" config=\"template;show:value.url\" class=\"block status\">\n\t\t<script type=\"text/html\">\n\t\t\t<div class=\"monospace hellip\" title=\"{{ value.url }}\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t</script>\n\t</ui-bind>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH;required:1\">Method</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1\"><b>URL address</b></ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number;format:\">Timeout</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-clock\"></i><ui-bind path=\"?.timeout\" config=\"text:((value||0)/1000).floor(2)+' sec.'\"></ui-bind><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number\">Max. size</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-calculator\"></i><ui-bind path=\"?.limit\" config=\"text:(value||0).filesize()\"></ui-bind><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.serialize\" config=\"dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:None;dirempty:None\" class=\"m\">Data serialization</ui-component>\n\t\t<ui-component name=\"keyvalue\" path=\"?.headers\" config=\"placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</ui-component>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<ui-component name=\"keyvalue\" path=\"?.cookies\" config=\"placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</ui-component>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.parse\" config=\"type:checkbox\">Parse Response to Object</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.dnscache\" config=\"type:checkbox\">Enable DNS cache</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.insecure\" config=\"type:checkbox\">Allow insecure connection</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.xhr\" config=\"type:checkbox\">Add XHR header</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.secret\" config=\"camouflage:1;icon:ti ti-totaljs\">Total.js Encryption/Decryption secret</ui-component>\n\t</div>\n</settings>",
			"merge": "<script total>\n\n\texports.id = 'merge';\n\texports.name = 'Merge';\n\texports.icon = 'ti ti-cashregister';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = { limit: 0, timeout: 2000 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar queue = [];\n\t\tvar refs = {};\n\t\tvar timeout = null;\n\t\tvar status = { count: 0 }\n\n\t\tvar flush = function() {\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\tvar msg = instance.newmessage(queue);\n\n\t\t\tfor (var key in refs)\n\t\t\t\tmsg.refs[key] = refs[key];\n\n\t\t\tqueue = [];\n\t\t\tstatus.count = 0;\n\t\t\tinstance.status(status, 500);\n\t\t\tmsg.send('output');\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tfor (var key in $.refs)\n\t\t\t\trefs[key] = $.refs[key];\n\n\t\t\tqueue.push(data);\n\n\t\t\tif (config.limit && queue.length === config.limit)\n\t\t\t\tflush();\n\t\t\telse if (config.timeout && !timeout)\n\t\t\t\ttimeout = setTimeout(flush, config.timeout);\n\n\t\t\t$.destroy();\n\n\t\t\tstatus.count = queue.length;\n\t\t\tinstance.status(status, 500);\n\t\t};\n\n\t\tinstance.close = function() {\n\n\t\t\tif (timeout) {\n\t\t\t\tclearTimeout(timeout);\n\t\t\t\ttimeout = null;\n\t\t\t}\n\n\t\t\tqueue = null;\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component merges incoming data into an array.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-4\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number\">Limit</ui-component>\n\t\t\t\t<div class=\"help\"><code>0</code> means disabled</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number\">Timeout</ui-component>\n\t\t\t\t<div class=\"help\">In milliseconds. <code>0</code> means disabled</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\tPending: <ui-bind path=\"STATUS\" config=\"text:value?value.count:0\" class=\"b\"></ui-bind>\n\t</footer>\n</body>",
			"print": "<script total>\n\n\texports.id = 'print';\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '5';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = '<Buffer ' + data.toString('hex').substring(0, 10) + '...';\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tif (output) {\n\t\t\t\toutput = JSON.stringify(output, serializer);\n\t\t\t\tinstance.status(output, 200);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-bind { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .json { white-space: pre; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"html pre:Thelpers.jsonformat(JSON.stringify(JSON.parse(value), null, '\\t'));show:value && value.length > 0\" class=\"hidden selectable block\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"ti ti-window\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(JSON.parse(laststatus), null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
			"queue": "<script total>\n\n\texports.id = 'queue';\n\texports.name = 'Queue';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'ti ti-list';\n\texports.author = 'Total.js';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance) {\n\n\t\tvar filename = PATH.databases('queue_' + instance.id + '.json');\n\t\tvar isready = false;\n\t\tvar current = null;\n\t\tvar queue = [];\n\t\tvar timeout;\n\n\t\tinstance.queue_snapshot_force = function() {\n\t\t\ttimeout = null;\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.queue_snapshot = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(instance.queue_snapshot_force, 500);\n\t\t\tPATH.fs.writeFile(filename, JSON.stringify(queue), NOOP);\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t};\n\n\t\tinstance.queue_next = function() {\n\n\t\t\tif (current)\n\t\t\t\treturn;\n\n\t\t\tcurrent = queue[0];\n\n\t\t\tif (current) {\n\t\t\t\tvar msg = instance.newmessage(current.type === 'buffer' ? Buffer.from(current.data, 'Base64') : current.data && typeof(current.data) === 'object' ? CLONE(current.data) : current.data);\n\t\t\t\tmsg.once('something', instance.queue_end);\n\t\t\t\tinstance.send('output', msg);\n\t\t\t}\n\n\t\t\tinstance.status({ pending: queue.length });\n\t\t};\n\n\t\tinstance.queue_end = function() {\n\t\t\tqueue.shift();\n\t\t\tcurrent = null;\n\t\t\tinstance.queue_next();\n\t\t\tinstance.queue_snapshot();\n\t\t};\n\n\t\tinstance.destroy = function() {\n\t\t\tPATH.fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar isbuffer = $.data instanceof Buffer;\n\t\t\tvar data = isbuffer ? $.data.toString('base64') : $.data;\n\n\t\t\tqueue.push({ ts: Date.now(), fromid: $.fromid, data: data, type: isbuffer ? 'buffer' : 'object' });\n\t\t\tisready && instance.queue_snapshot();\n\t\t\tinstance.status({ pending: queue.length });\n\t\t\t$.end();\n\n\t\t\tif (isready && !current)\n\t\t\t\tsetImmediate(instance.queue_next);\n\t\t};\n\n\t\tPATH.fs.readFile(filename, function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar arr = response.toString('utf8').parseJSON(true);\n\t\t\t\tif (arr instanceof Array) {\n\t\t\t\t\tif (queue.length)\n\t\t\t\t\t\tarr.push.apply(arr, queue);\n\t\t\t\t\telse\n\t\t\t\t\t\tqueue = arr;\n\t\t\t\t}\n\t\t\t\tinstance.queue_next();\n\t\t\t}\n\t\t\tisready = true;\n\t\t});\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 10px; }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<script>\n\tFUNC.fqueue_trigger = function(el) {\n\t\tSETTER('websocket/send', { TYPE: 'trigger', id: el.attrd2('id') });\n\t};\n</script>\n\n<readme>\nA simple persistent queue for the incomming messages.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.fqueue_trigger\">Run</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<div class=\"status\">Delayed messages: <b><ui-bind path=\"STATUS.pending\" config=\"text:value?value.format(0):'0'\"></ui-bind></b></div>\n\t</footer>\n</body>",
			"sendandwait": "<script total>\n\n\texports.id = 'sendandwait';\n\texports.name = 'Send and wait';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-send';\n\texports.author = 'Total.js';\n\texports.config = { timeout: 1 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar timeout = null;\n\t\tvar skip = false;\n\t\tvar close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t\tskip = false;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (skip) {\n\t\t\t\t$.destroy();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tskip = true;\n\t\t\ttimeout = setTimeout(close, config.timeout * 60 * 1000);\n\t\t\t$.send('output');\n\t\t};\n\n\t\tinstance.close = close;\n\n\t\tinstance.configure = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = null;\n\t\t\tskip = false;\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number;required:1;format:\">Interval</ui-component>\n\t\t\t\t<div class=\"help\">In minutes</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<readme>\nThis component sends the data next, and then waits for a defined period.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\tTimeout: <ui-bind path=\"$CONFIG.timeout\" config=\"text;empty\"></ui-bind> min.\n\t</footer>\n</body>",
			"input": "<script total>\n\n\texports.id = 'input';\n\texports.name = 'Input';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'ti ti-wifi';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Input', readme: '' };\n\texports.outputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'input';\n\n\texports.make = function(instance, config) {\n\t\tinstance.input = function(fromflowstreamid, fromid, data, reference) {\n\t\t\tvar msg = instance.newmessage(data);\n\t\t\tmsg.refs.reference = reference;\n\t\t\tmsg.send('data');\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\"><b>Input name</b></ui-component>\n\t\t<ui-component name=\"input\" path=\"?.readme\" config=\"monospace:1;type:multiline;height:250\">Readme</ui-component>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component receives data in an encapsulated FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <ui-bind path=\"CONFIG.name\" config=\"text;empty\" class=\"b\"></ui-bind>\n\t</header>\n</body>",
			"output": "<script total>\n\n\texports.id = 'output';\n\texports.name = 'Output';\n\texports.group = 'FlowStream';\n\texports.version = '2';\n\texports.icon = 'ti ti-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { name: 'Output', readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output';\n\texports.kind = 'output';\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tinstance.output($.data, null, null, $.refs.reference);\n\t\t\t$.destroy();\n\t\t};\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\"><b>Output name</b></ui-component>\n\t\t<ui-component name=\"textarea\" path=\"?.readme\" config=\"monospace:1;height:250\">Readme</ui-component>\n\t\t<div class=\"help\">Supports markdown format</div>\n\t</div>\n</settings>\n\n<readme>\nThe component can send data from an encapsulated FlowStream.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>Output: <ui-bind path=\"CONFIG.name\" config=\"text;empty\" class=\"b\"></ui-bind>\n\t</header>\n</body>",
			"throttle": "<script total>\n\n\texports.id = 'throttle';\n\texports.name = 'Throttle';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.icon = 'ti ti-filter';\n\texports.author = 'Total.js';\n\texports.config = { limit: 1, delay: 0 };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Outputs' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar pending = [];\n\t\tvar running = 0;\n\n\t\tvar check = function() {\n\t\t\tif (running < config.limit) {\n\n\t\t\t\tvar diff = config.limit - running;\n\t\t\t\tvar items = pending.splice(0, diff);\n\n\t\t\t\trunning += items.length;\n\n\t\t\t\tif (config.delay) {\n\t\t\t\t\tsetTimeout(function() {\n\t\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\t\titem.send('output');\n\t\t\t\t\t}, config.delay);\n\t\t\t\t} else {\n\t\t\t\t\tfor (var item of items)\n\t\t\t\t\t\titem.send('output');\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tinstance.status(pending.length, 500);\n\t\t};\n\n\t\tvar end = function() {\n\t\t\trunning--;\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\t$.on('end', end);\n\t\t\tpending.push($);\n\t\t\tcheck();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tvar item = pending.shift();\n\t\t\tif (item) {\n\t\t\t\trunning++;\n\t\t\t\titem.send('output');\n\t\t\t}\n\t\t\tcheck();\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component sends only limited count of messages.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;format:\">Limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.delay\" config=\"required:0;align:1;type:number;ricon:!ms;format:\">Delay</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .status { font-size: 35px; margin: 0; padding: 0 10px 10px; font-weight: bold; text-align: center; }\n</style>\n\n<body>\n\t<header>\n\t\t<button class=\"button exec\" data-exec=\"FUNC.trigger\">Send</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><ui-bind path=\"STATUS\" config=\"text:(value || 0).format(0)\" class=\"status block\"></ui-bind></footer>\n</body>",
			"publish": "<script total>\n\n\texports.id = 'publish';\n\texports.name = 'Publish';\n\texports.group = 'FlowStream';\n\texports.version = '5';\n\texports.icon = 'ti ti-crosshairs';\n\texports.author = 'Total.js';\n\texports.config = { readme: '' };\n\texports.inputs = [{ id: 'data', name: 'Data' }];\n\texports.type = 'output2';\n\n\texports.call = function(data, answer) {\n\t\t// \"this\" means FlowStream instance\n\t\tthis.io(function(err, response) {\n\t\t\tvar arr = [];\n\t\t\tfor (var flow of response) {\n\t\t\t\tfor (var com of flow.items) {\n\t\t\t\t\tif (com.type === 'input') {\n\t\t\t\t\t\tcom.id = flow.id + '_' + com.id;\n\t\t\t\t\t\tcom.name = '<b>' + (flow.name || flow.id).encode() + ':</b> ' + (com.name || '').encode();\n\t\t\t\t\t\tarr.push(com);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tarr.quicksort('name');\n\t\t\tanswer(arr);\n\t\t});\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar flowstreamid;\n\t\tvar instanceid;\n\n\t\tinstance.message = function(msg) {\n\t\t\tif (flowstreamid && instanceid)\n\t\t\t\tinstance.toinput(msg.data, flowstreamid, instanceid, msg.refs.reference);\n\t\t\tmsg.destroy();\n\t\t};\n\n\t\tinstance.flowstream = function(id, type) {\n\t\t\tif (!id || (config.id && config.id.split('_')[0] === id))\n\t\t\t\trefresh();\n\t\t};\n\n\t\tvar refresh = function() {\n\t\t\tif (config.id) {\n\t\t\t\tvar arr = config.id.split('_');\n\t\t\t\tflowstreamid = arr[0];\n\t\t\t\tinstanceid = arr[1];\n\t\t\t\tinstance.io(flowstreamid, instanceid, function(err, com) {\n\t\t\t\t\tif (com)\n\t\t\t\t\t\tinstance.status({ name: com.name + '/' + com.item.name });\n\t\t\t\t\telse\n\t\t\t\t\t\tinstance.status({ name: '' });\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tinstance.status({ name: '' });\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\trefresh();\n\t\t};\n\n\t\tsetTimeout(refresh, 3000);\n\t};\n\n</script>\n\n<script>\n\tON('configure_publish', function(data) {\n\t\tdata.call(function(response) {\n\t\t\tSET('%inputs', response);\n\t\t}, true);\n\t});\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.id\" config=\"dirsource:%inputs;dirraw:1;placeholder:Choose a specific input;dirempty:No input\" class=\"m\"><b>Input</b></ui-component>\n\t</div>\n</settings>\n\n<readme>\nThe component publish the data to the specific `Input` component.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME: <ui-bind path=\"STATUS.name\" config=\"text;empty\" class=\"b monospace\"></ui-bind>\n\t</header>\n</body>",
			"taction": "<script total>\n\n\texports.id = 'taction';\n\texports.name = 'Action';\n\texports.icon = 'ti ti-totaljs';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { partial: false, name: 'Unknown', input: '', query: '', color: '#68B25B', params: '', user: 0, permissions: '', code: '// model\\n// $.query\\n// $.params\\n// $.headers\\n// $.user\\n\\n$.success();', strerr: false, path: 'response', autoresponse: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.install = function(com) {\n\n\t\tMAIN.flowtaction = {};\n\n\t\tconst ARGS = /\\{{1,2}[a-z0-9_.-\\s]+\\}{1,2}/gi;\n\t\tconst Options = function($, config) {\n\n\t\t\tvar t = this;\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data || typeof(data) !== 'object')\n\t\t\t\tdata = {};\n\n\t\t\tt.id = config.name;\n\t\t\tt.error = new ErrorBuilder();\n\t\t\tt.controller = $.refs.controller;\n\t\t\tt.payload = data.payload || data.model || data.body;\n\n\t\t\tif (typeof(t.payload) !== 'object' || !t.payload)\n\t\t\t\tt.payload = {};\n\n\t\t\tt.message = $;\n\t\t\tt.config = config;\n\t\t\tt.user = data.user;\n\t\t\tt.query = data.query || {};\n\t\t\tt.params = data.params || {};\n\t\t\tt.url = data.url;\n\t\t\tt.language = data.language;\n\t\t\tt.headers = data.headers || {};\n\t\t\tt.files = data.files || [];\n\t\t\tt.cookies = data.cookies || {};\n\t\t\tt.ip = data.ip;\n\t\t\tt.ua = data.ua;\n\t\t\tt.request = data;\n\t\t};\n\n\t\tOptions.prototype = {\n\n\t\t\tget value() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tget model() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tset value(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t},\n\n\t\t\tset model(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.audit = function(message, type) {\n\t\t\tF.audit(this, message ? this.variables(message) : '', type);\n\t\t};\n\n\t\tOptions.prototype.success = function(value) {\n\t\t\tvar self = this;\n\n\t\t\tself.request[self.config.path] = { success: true, value: value };\n\n\t\t\tif (self.config.autoresponse) {\n\t\t\t\tvar refs = self.message.refs;\n\t\t\t\tif (refs) {\n\t\t\t\t\trefs.controller.json(self.request[self.config.path]);\n\t\t\t\t\trefs.controller = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tself.message.send('output', self.request);\n\t\t};\n\n\t\tOptions.prototype.cancel = function() {\n\t\t\tvar self = this;\n\t\t\tself.message.destroy();\n\t\t};\n\n\t\tOptions.prototype.successful = function(callback) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, a, b, c) {\n\t\t\t\tif (err)\n\t\t\t\t\tself.invalid(err);\n\t\t\t\telse\n\t\t\t\t\tcallback.call(self, a, b, c);\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.send = Options.prototype.callback = function(value) {\n\n\t\t\tvar self = this;\n\n\t\t\tif (arguments.length == 0) {\n\t\t\t\treturn function(err, response) {\n\t\t\t\t\terr && self.error.push(err);\n\t\t\t\t\tself.callback(response);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet msg = self.message;\n\t\t\tlet refs = msg.refs;\n\t\t\tlet cfg = self.config;\n\n\t\t\tif (self.error.items.length) {\n\t\t\t\tself.request[cfg.path] = cfg.strerr ? self.error.toString() : self.error.output();\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.invalid(self.error);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('error', self.request);\n\n\t\t\t} else {\n\n\t\t\t\tself.request[cfg.path] = value;\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.json(value);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('output', self.request);\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.done = function(arg) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.error.push(err);\n\t\t\t\t\tself.callback(null);\n\t\t\t\t} else\n\t\t\t\t\tself.callback({ success: true, value: arg === true ? response : arg });\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.invalid = function(error, path, index) {\n\t\t\tvar self = this;\n\t\t\tself.error.push(error, path, index);\n\t\t\tself.callback(null);\n\t\t};\n\n\t\tOptions.prototype.cookie = function(name, value, expire, options) {\n\t\t\tvar self = this;\n\t\t\tif (value === undefined)\n\t\t\t\treturn self.cookies[name];\n\n\t\t\tif (value === null)\n\t\t\t\texpire = '-1 day';\n\n\t\t\tif (self.controller) {\n\t\t\t\tself.controller.cookie(name, value, expire, options);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tOptions.prototype.variables = function(str, data) {\n\n\t\t\tif (str.indexOf('{') === -1)\n\t\t\t\treturn str;\n\n\t\t\tvar $ = this;\n\n\t\t\treturn str.replace(ARGS, function(text) {\n\t\t\t\tvar l = text[1] === '{' ? 2 : 1;\n\t\t\t\tvar key = text.substring(l, text.length - l).trim();\n\t\t\t\tvar val = null;\n\t\t\t\tvar five = key.substring(0, 5);\n\t\t\t\tif (five === 'user.') {\n\t\t\t\t\tif ($.user) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.user[key] : U.get($.user, key);\n\t\t\t\t\t}\n\t\t\t\t} else if (five === 'data.') {\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? data[key] : U.get(data, key);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar six = key.substring(0, 6);\n\t\t\t\t\tif (six === 'model.' || six === 'value.') {\n\t\t\t\t\t\tif ($.model) {\n\t\t\t\t\t\t\tkey = key.substring(6);\n\t\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.model[key] : U.get($.model, key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (six === 'query.')\n\t\t\t\t\t\tval = $.query[key.substring(6)];\n\t\t\t\t\telse if (key.substring(0, 7) === 'params.')\n\t\t\t\t\t\tval = $.params[key.substring(7)];\n\t\t\t\t}\n\t\t\t\treturn val == null ? text : val;\n\t\t\t});\n\n\t\t};\n\n\t\tMAIN.flowtaction.Options = Options;\n\t\tMAIN.flowtaction.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t};\n\n\texports.uninstall = function() {\n\t\tdelete MAIN.flowtaction;\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar cfg = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar opt = new MAIN.flowtaction.Options($, cfg);\n\t\t\tif (fn) {\n\n\t\t\t\t// check user\n\t\t\t\tif (cfg.user || cfg.permissions) {\n\n\t\t\t\t\tif ((cfg.user === 2 && opt.user) || (cfg.user === 1 && !opt.user)) {\n\t\t\t\t\t\topt.invalid(401);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cfg.user === 1 && cfg.permissions) {\n\t\t\t\t\t\tlet permissions = cfg.permissions.slice(0);\n\t\t\t\t\t\tpermissions.unshift(opt);\n\t\t\t\t\t\tif (UNAUTHORIZED.apply(global, permissions))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check data\n\t\t\t\tlet tmp;\n\n\t\t\t\tif (cfg.input) {\n\t\t\t\t\ttmp = cfg.input.transform(opt.payload, cfg.partial, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.payload = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.query) {\n\t\t\t\t\topt.error.prefix = 'query.';\n\t\t\t\t\ttmp = cfg.query.transform(opt.query, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.query = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.params) {\n\t\t\t\t\topt.error.prefix = 'params.';\n\t\t\t\t\ttmp = cfg.params.transform(opt.params, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.params = tmp.response;\n\t\t\t\t}\n\n\t\t\t\topt.error.prefix = '';\n\n\t\t\t\ttry {\n\t\t\t\t\tfn(opt, opt.payload);\n\t\t\t\t} catch (e) {\n\t\t\t\t\topt.invalid(e);\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\topt.invalid(501);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tfn = config.code.includes('await ') ? new MAIN.flowtaction.AsyncFunction('$', 'model', 'data', 'value', config.code) : new Function('$', 'model', 'data', 'value', config.code);\n\n\t\t\tcfg = {};\n\t\t\tfor (var key in config) {\n\t\t\t\tif (key !== 'code')\n\t\t\t\t\tcfg[key] = config[key];\n\t\t\t}\n\n\t\t\tcfg = instance.replace(cfg);\n\t\t\tcfg.input = cfg.input ? cfg.input.toJSONSchema() : null;\n\t\t\tcfg.query = cfg.query ? cfg.query.toJSONSchema() : null;\n\t\t\tcfg.params = cfg.params ? cfg.params.toJSONSchema() : null;\n\t\t\tcfg.permissions = cfg.permissions ? cfg.permissions.split(',').trim() : null;\n\n\t\t\tif (cfg.permissions && !cfg.permissions.length)\n\t\t\t\tcfg.permissions = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component creates similar functionality as Total.js Actions.\n\n## Payload\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\n## Custom scripting\n\n- supports `await`\n- supports Total.js global functions\n\n__Properties__:\n\n- `$.model {Object}` or `model` parsed payload\n- `$.query {Object}` parsed URL query arguments\n- `$.params {Object}` parsed URL params\n- `$.cookies {Object}` parsed cookies\n- `$.files [Object]` uploaded files\n- `$.user {Object}` user session (optional)\n- `$.headers {Object}` request headers\n- `$.ip {String}` IP address (optional)\n- `$.language {String}` optional\n- `$.ua {String}` parsed user agent (optional)\n- `$.url {String}` URL endpoint\n- `$.message {Object}` Flow message instance\n- `$.request {Object}` Flow message payload data\n\n__Methods__:\n\n- `$.invalid(error)` responds with an error and ends the action\n- `$.success([value])` responds with `{ success: true, value }` object and ends the action\n- `$.send(value)` responds with `value` object and ends the action\n- `$.cancel()` ends the action without response\n- `$.audit(message, [type])` writes audit\n\n## Supported types\n\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\" style=\"padding-bottom:5px\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\">Action name</ui-component>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.color\" config=\"required:1;type:color\">Color</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div class=\"pull-left\">\n\t\t\t\t<div class=\"ui-input-label\">Allow only:</div>\n\t\t\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t\t\t<span>Authorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t\t\t<span>Unauthorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t\t\t<span>Both</span>\n\t\t\t\t\t</div>\n\t\t\t\t</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"pull-left\" style=\"margin-left:20px\">\n\t\t\t\t<div style=\"height:25px\"></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.autoresponse\" config=\"type:checkbox\">Auto HTTP response</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.input\" config=\"monospace:1;maxlength:100000;placeholder:name\\:Name, *email\\:Email\">Payload schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.query\" config=\"monospace:1;maxlength:100000;placeholder:page\\:Number\">Query arguments schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"padding bg-smoke radius npb\">\n\t\t\t\t<div class=\"grid-3\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.params\" config=\"monospace:1;maxlength:100000;placeholder:*id\\:String\">Params schema</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.permissions\" config=\"monospace:1;maxlength:100000;placeholder:admin, director\">Permissions</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;required:1;placeholder:response\">Path for storing a response</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .content { min-width: 200px; }\n\t.CLASS header { color: #FFF; padding: 5px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px 5px; }\n\t.CLASS .ti { color: #999; }\n\t.CLASS footer > div { padding: 10px 10px 0; }\n\t.CLASS-code .CodeMirror { border: 0; border-left: 1px solid #E0E0E0; border-radius: none; }\n\t.CLASS-code-editor { margin-left: 200px; }\n\t.CLASS-code-info { float: left; width: 200px; padding: 12px; font-size: 12px; }\n\t.CLASS-code-info code { overflow-wrap: break-word; white-space: pre-wrap; display: block; padding: 0 3px; }\n\t.CLASS-code-button { padding: 10px; border-top: 1px solid #E0E0E0; }\n\t.CLASS-code-button button { font-size: 14px; height: 36px; font-weight: bold; }\n\t.CLASS-settings .iconmenu { height: 80px; }\n\t.CLASS-settings .iconmenu > div { height: 76px; }\n\t.CLASS-settings .iconmenu span { padding-top: 8px; }\n\t.CLASS-settings .iconmenu i { padding-top: 16px; }\n\t.ui-dark .CLASS-code .CodeMirror { border-left-color: #404040; }\n\t.ui-dark .CLASS-code-button { border-top-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"background-color:{{ value.color }}\">{{ value.name }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button exec\" data-exec=\"=sourcecode\"><i class=\"ti ti-js\"></i>Script</button></div>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\" class=\"block fs11\" style=\"padding:10px\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ if value.autoresponse }}<div class=\"b\"><i class=\"ti ti-check-square green mr5\"></i>Auto HTTP response</div>{{ fi }}\n\t\t\t\t<div><i class=\"ti ti-check-square mr5\"></i>{{ if value.user === 1 }}Authorized only{{ else if value.user === 2 }}Unauthorized only{{ else }}All allowed{{ fi }}</div>\n\t\t\t\t{{ if value.partial }}<div><i class=\"ti ti-check-square green mr5\"></i>Partial data</div>{{ fi }}\n\t\t\t\t{{ if value.input }}<div><i class=\"ti ti-check-square green mr5\"></i>Payload</div>{{ fi }}\n\t\t\t\t{{ if value.query }}<div><i class=\"ti ti-check-square green mr5\"></i>URL Query arguments</div>{{ fi }}\n\t\t\t\t{{ if value.params }}<div><i class=\"ti ti-check-square green mr5\"></i>Params</div>{{ fi }}\n\t\t\t\t{{ if value.permissions }}<div><i class=\"ti ti-check-square green mr5\"></i>Permissions</div>{{ fi }}\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (!common.codeactions) {\n\t\t\tcommon.codeactions = {};\n\t\t\tW.codeactionssubmit = function(el) {\n\n\t\t\t\tif (BLOCKED('codeaction', 1000))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar winid = ATTRD(el);\n\t\t\t\tvar id = winid.substring(4);\n\t\t\t\tvar code = common.codeactions[winid];\n\t\t\t\tvar instance = flowinstances.instances[id];\n\t\t\t\tvar config = instance.config;\n\t\t\t\tconfig.code = code;\n\t\t\t\tinstance.reconfigure(config);\n\t\t\t};\n\t\t\tW.codeactionsinit = function(com) {\n\t\t\t\tvar save = () => W.codeactionssubmit(com.element);\n\t\t\t\tvar map = { 'Cmd-S': save, 'Ctrl-S': save };\n\t\t\t\tcom.editor.addKeyMap(map);\n\t\t\t};\n\t\t}\n\n\t\texports.renderschema = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar config = exports.config;\n\n\t\t\tvar write = function(name, label) {\n\t\t\t\tif (config[name]) {\n\t\t\t\t\tbuilder.push('<div class=\"b badge badge-gray\" style=\"display:block\">{0}</div>'.format(label));\n\t\t\t\t\tvar val = config[name].replace(/\\,/g, '\\n');\n\t\t\t\t\tbuilder.push('<div class=\"m mt5\"><code>{0}</code></div>'.format(val));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twrite('params', 'Dynamic parameters');\n\t\t\twrite('query', 'URL query arguments');\n\t\t\twrite('input', 'Payload');\n\n\t\t\treturn builder.join('');\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar key = 'code' + exports.id;\n\t\t\tvar win = common.windows.findItem('id', key);\n\t\t\tif (win) {\n\t\t\t\tvar path = '*codeactions.' + key;\n\t\t\t\tvar prev = GET(path);\n\t\t\t\tif (prev !== exports.config.code)\n\t\t\t\t\tSET(path, exports.config.code);\n\t\t\t\twin.element.find('.CLASS-code-info').html(exports.renderschema());\n\t\t\t}\n\t\t};\n\n\t\texports.sourcecode = function() {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar path = '*codeactions.code' + exports.id;\n\t\t\tvar winid = 'code' + exports.id;\n\n\t\t\tif (common.windows.findItem('id', winid)) {\n\t\t\t\tSETTER('windows/focus', winid);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSET(path, config.code);\n\n\t\t\tPUSH('common.windows', { id: winid, cachekey: 'codeaction', cache: 'readme', html: '<div class=\"CLASS-code invisible\"><div class=\"CLASS-code-info noscrollbar\">{1}</div><div class=\"CLASS-code-editor\"><ui-component name=\"codemirror\" path=\"{0}\" config=\"type:javascript;parent:auto;margin:60;$init:codeactionsinit\"></ui-component></div><div class=\"CLASS-code-button\"><button class=\"button exec\" data-exec=\"codeactionssubmit\">Apply</button></div></div>'.format(path, exports.renderschema()), title: 'Action script: ' + config.name, actions: { move: true, autosave: true, close: true, maximize: true, minimize: false }, offset: { x: ((WW / 2) - 275) >> 0, y: ((WH / 2) - 250) >> 0, width: 750, height: 500, minwidth: 200, minheight: 300, maxwidth: 1200, maxheight: 1200 }, make: function(el) {\n\t\t\t\tel.closest('.ui-windows-item').css('z-index', 50);\n\t\t\t\tel.find('.CLASS-code').rclass('invisible', 500);\n\t\t\t}});\n\t\t};\n\n\t});\n\n</script>",
			"trigger": "<script total>\n\n\texports.id = 'trigger';\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '4';\n\texports.icon = 'ti ti-start';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false, prompt: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar regprompt = /\\{prompt\\}/g;\n\n\t\tinstance.trigger = function(msg) {\n\n\t\t\tvar random = !config.prompt && config.random;\n\t\t\tvar val = config.data;\n\t\t\tvar prompt = msg.value || '';\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = random ? U.random() : val.replace(regprompt, prompt).parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? Buffer.from(U.random_string()) : Buffer.from(val.replace(regprompt, prompt), 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = random ? NOW.add('-' + U.random(500, 10) + ' seconds') : val.replace(regprompt, prompt).parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? {} : (new Function('return ' + val.replace(regprompt, prompt)))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tvar tmp = random ? '' : val.replace(regprompt, prompt);\n\t\t\t\t\tval = random ? U.random() % 2 === 0 : tmp === 'true' || tmp === 'on' || tmp === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = random ? U.random_string(20) : val.replace(regprompt, prompt);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"mt10 m\">\n\t\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.prompt\" config=\"type:checkbox\">Prompt</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"disabled\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"block hidden m mt10\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.promptlabel\" config=\"placeholder:Enter a value\"><b>Prompt label</b></ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<ui-bind path=\"?\" config=\"hide:value.hide && !value.prompt\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"help hidden\">The prompt value will be assigned to the <code>{prompt}</code> keyword in the code.</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button name=\"run\">Run</button>\n\t</div>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\t\texports.click = function(el) {\n\t\t\tif (exports.config.prompt) {\n\t\t\t\tvar opt = {};\n\t\t\t\topt.name = exports.config.promptlabel || 'Enter a value';\n\t\t\t\topt.value = '';\n\t\t\t\topt.callback = function(val) {\n\t\t\t\t\texports.trigger({ value: val });\n\t\t\t\t};\n\t\t\t\tSETTER('prompt/show', opt);\n\t\t\t} else\n\t\t\t\texports.trigger();\n\t\t};\n\t});\n</script>",
			"tapirouter": "<script total>\n\n\texports.id = 'tapirouter';\n\texports.name = 'API Router';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-crosshairs';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { path: 'response', schema: [{ id: 'o1984', name: 'users_read/{id}' }] };\n\texports.outputs = [];\n\texports.kind = 'action';\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data.payload || $.data.body;\n\t\t\tif (data && typeof(data.schema) === 'string') {\n\n\t\t\t\tvar index;\n\t\t\t\tvar schema = $.refs.schema;\n\n\t\t\t\tif (!schema) {\n\t\t\t\t\tlet tmp = {};\n\t\t\t\t\tlet meta = data.schema;\n\t\t\t\t\tindex = meta.indexOf('?');\n\t\t\t\t\ttmp.query = index === -1 ? '' : meta.substring(index + 1);\n\n\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\tmeta = meta.substring(0, index);\n\n\t\t\t\t\tindex = meta.indexOf('/');\n\t\t\t\t\ttmp.id = index === -1 ? meta : meta.substring(0, index);\n\t\t\t\t\ttmp.params = index === -1 ? EMPTYARRAY : meta.substring(index + 1).split('/').trim();\n\t\t\t\t\t$.refs.schema = tmp;\n\t\t\t\t\tschema = tmp;\n\t\t\t\t}\n\n\t\t\t\tvar meta = compiled[schema.id];\n\t\t\t\tif (meta) {\n\n\t\t\t\t\tif (schema.params.length === meta.params.length) {\n\n\t\t\t\t\t\tvar params = {};\n\t\t\t\t\t\tfor (var i = 0; i < meta.params.length; i++)\n\t\t\t\t\t\t\tparams[meta.params[i]] = schema.params[i];\n\n\t\t\t\t\t\tlet payload = $.data;\n\t\t\t\t\t\tpayload.query = schema.query ? DEF.parsers.urlencoded(schema.query) : {};\n\t\t\t\t\t\tpayload.payload = data.data;\n\t\t\t\t\t\tpayload.params = params;\n\t\t\t\t\t\t$.send(meta.id);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t$.data[config.path] = [{ id: '400', error: 'Invalid schema data' }];\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data[config.path] = [{ id: '404', error: '404' }];\n\t\t\t$.send('error');\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar outputs = [];\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.schema) {\n\n\t\t\t\tif (!item)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tvar params = item.name.split('/').trim();\n\t\t\t\tvar name = params.shift();\n\n\t\t\t\tfor (var i = 0; i < params.length; i++)\n\t\t\t\t\tparams[i] = params[i].replace(/\\{|\\}/g, '');\n\n\t\t\t\tcompiled[name] = { id: item.id, params: params };\n\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\tvar prev = JSON.stringify(instance.outputs);\n\t\t\tvar curr = JSON.stringify(outputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.outputs = outputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component routes incoming Total.js API data according to the defined API schema. The component extends input data (query, payload and params) with parsed data.\n\n__Input & Output data__:\n\n```js\n{\n\t// REQUIRED payload:\n\tpayload: {\n\t\tschema: 'schema_name/{param_1}/{param_2}?query=arguments',\n\t\tdata: {} // optional, request payload\n\t},\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed UA\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\nIn the case of  `error`, the input data is extended by the `response` property with an error.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 26px; border-top: 1px solid #E0E0E0; line-height: 25px; font-size: 13px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { line-height: 14px; margin-right: 30px; }\n\t.CLASS-settings figure .name div { outline: 0; line-height: 23px; padding: 0 5px; min-height: 25px; font-weight: bold; }\n\t.CLASS-settings figure .controls { float: right; width: 90px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 26px; }\n\t.CLASS-settings figure:first-child div { line-height: 26px; }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tapirouter.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Schema</label>\n\t\t\t</div>\n\t\t\t<div class=\"message message-alert\"><i class=\"ti ti-exclamation-triangle\"></i>Every name of identifier must be unique per Flow. You can use dynamic arguments in the form <code>{argument_name}</code></div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.move\" title=\"Up\" data-type=\"up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.move\" title=\"Down\" data-type=\"down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tapirouter.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tapirouter.name;required:1\">{{ m.name }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"help\">Use names in lower-case. We recommend to keep e.g. <code>users_read/{id}</code> or <code>products_read/{id}</code></div>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = {};\n\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tapirouter;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'o' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'users_read/{id}';\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.name = opt.value.toLowerCase();\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\tW.tapirouter = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\n\t\t\tvar changes = exports.instance.changes;\n\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tfor (var item of exports.config.schema)\n\t\t\t\t\toutputs.push({ id: item.id, name: item.name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n\n</script>",
			"split": "<script total>\n\n\texports.id = 'split';\n\texports.name = 'Split';\n\texports.icon = 'ti ti-strikethrough';\n\texports.group = 'Array';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { path: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' } ];\n\texports.meta = { settingswidth: 650 };\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\t\t\tvar arr = config.path ? (config.path.indexOf('.') === -1 ? $.data[config.path] : U.get(config.path, $.data)) : $.data;\n\t\t\t$.destroy();\n\t\t\tif (arr instanceof Array && arr.length) {\n\t\t\t\tfor (var item of arr)\n\t\t\t\t\tinstance.send('output', item);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { height: 40px; line-height: 40px; margin: 0 10px; font-size: 12px; }\n</style>\n\n<readme>\nThe component splits a message with an array of objects on the input into separate messages with individual objects on the output.\n\n__Input example__:\n\n```js\n[\n\t{\n\t\t\"email\": \"michal@totaljs.com\",\n\t\t\"date\": 20220202,\n\t\t\"name\": \"Michal Klacan\"\n\t},\n\t{\n\t\t\"email\": \"martin@totaljs.com\",\n\t\t\"date\": 20220204,\n\t\t\"name\": \"Martin Smola\"\n\t},\n\t{\n\t\t\"email\": \"peter@totaljs.com\",\n\t\t\"datum\": 20220210,\n\t\t\"name\": \"Peter Sirka\"\n\t}\n]\n```\n\n__Output example__:\n\n```js\n{\n\t\"email\": \"michal@totaljs.com\",\n\t\"date\": 20220202,\n\t\"name\": \"Michal Klacan\"\n}\n```\n\n```js\n{\n\t\"email\": \"martin@totaljs.com\",\n\t\"date\": 20220204,\n\t\"name\": \"Martin Smola\"\n}\n```\n\n```js\n{\n\t\"email\": \"peter@totaljs.com\",\n\t\"datum\": 20220210,\n\t\"name\": \"Peter Sirka\"\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.path\" config=\"show;text span\" parent=\"footer\" class=\"block\">\n\t\t\tPath: <span class=\"b\"></span>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t<div class=\"help\">Optional. The data for the splitting will be loaded from the specific property/field.</div>\n\t</div>\n</settings>",
			"stringoperations": "<script total>\n\n\texports.id = 'stringoperations';\n\texports.name = 'String Operations';\n\texports.icon = 'ti ti-font';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = { operation: 'lowercase' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar output;\n\t\t\tswitch(config.operation) {\n\t\t\t\tcase 'lowercase':\n\t\t\t\t\toutput = data.toLowerCase();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'uppercase':\n\t\t\t\t\toutput = data.toUpperCase();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\toutput = data.capitalize();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'slug':\n\t\t\t\t\toutput = data.slug();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'deburr':\n\t\t\t\t\toutput = data.toASCII();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'reverse':\n\t\t\t\t\toutput = data.split('').reverse().join('');\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'spaces':\n\t\t\t\t\toutput = data.replace(/|s/g, '');\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'trim':\n\t\t\t\t\toutput = data.trim();\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (!config.operation)\n\t\t\t\tconfig.operation = 'lowercase';\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis components can apply string operation to your components.\n\n- input: `String`\n- output: `String`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.operation\" config=\"type:select;dirsource:capitalize|Capitalize,lowercase|Lower Case,uppercase|Upper Case,slug|Slug,deburr|Remove diacritic,reverse|Reverse,spaces|Remove spaces\">Operation</ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; font-weight: bold; }\n\t.CLASS footer span { float: right; }\n\t.CLASS footer span i { font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.operation\" config=\"show\" class=\"block\">\n\t\t\tOperation: <span class=\"blue\"><ui-bind path=\"CONFIG.operation\" config=\"text:value.charAt(0).toUpperCase() + value.slice(1)\"></ui-bind></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"todolist": "<script total>\n\n\texports.id = 'todolist';\n\texports.name = 'To Do List Action';\n\texports.icon = 'ti ti-bookmark-alt';\n\texports.author = 'Total.js';\n\texports.version = '1.1';\n\texports.group = 'Common';\n\texports.config = { operation: 'lowercase' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\tconst pg = require('pg');\n\n\t// Database connection configuration\n\tconst configDB = {\n\t\tuser: 'your_db_username',\n\t\thost: 'localhost',\n\t\tdatabase: 'your_db_name',\n\t\tpassword: 'your_db_password',\n\t\tport: 5432,\n\t};\n\tconst pool = new pg.Pool(configDB);\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = async function($) {\n\t\t\tlet data = $.data;\n\t\t\tlet output;\n\n\t\t\ttry {\n\t\t\t\t// Establish connection\n\t\t\t\tconst client = await pool.connect();\n\n\t\t\t\t// Switch case for different operations\n\t\t\t\tswitch(config.operation) {\n\t\t\t\t\tcase 'getall':\n\t\t\t\t\t\toutput = await client.query('SELECT * FROM tasks');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'getbyid':\n\t\t\t\t\t\toutput = await client.query('SELECT * FROM tasks WHERE id = $1', [data.id]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'getbytitle':\n\t\t\t\t\t\toutput = await client.query('SELECT * FROM tasks WHERE title ILIKE $1', ['%' + data.title + '%']);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', output.rows);\n\n\t\t\t\t// Release the client back to the pool\n\t\t\t\tclient.release();\n\t\t\t} catch (err) {\n\t\t\t\tinstance.throw(err);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (!config.operation)\n\t\t\t\tconfig.operation = 'getall';\n\t\t};\n\n\t\tinstance.on('close', function() {\n\t\t\t// Shutdown the connection pool\n\t\t\tpool.end();\n\t\t});\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis components can apply string operation to your components.\n\n- input: `String`\n- output: `String`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.operation\"  config=\"type:select;dirsource:getall|Get All,getbyid|Get by ID,getbytitle|Get by Title\">Operation</ui-component>\n\t\t<ui-bind path=\"?\" config=\"hide:value.hide && !value.prompt\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"help hidden\">The prompt value will be assigned to the <code>{prompt}</code> keyword in the code.</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; font-weight: bold; }\n\t.CLASS footer span { float: right; }\n\t.CLASS footer span i { font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.operation\" config=\"show\" class=\"block\">\n\t\t\tOperation: <span class=\"blue\"><ui-bind path=\"CONFIG.operation\" config=\"text:value.charAt(0).toUpperCase() + value.slice(1)\"></ui-bind></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"taskoperation": "<script total>\n\texports.id = 'taskoperation';\n\texports.name = 'To Do List GEtt';\n\texports.icon = 'ti ti-id-badge';\n\texports.author = 'Fauzii';\n\texports.version = '1.0';\n\texports.group = 'Common';\n\texports.config = { operation: 'lowercase' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\tconst pg = require('pg');\n\n\t// Database connection configuration\n\tconst configDB = {\n\t\tuser: 'your_db_username',\n\t\thost: 'localhost',\n\t\tdatabase: 'your_db_name',\n\t\tpassword: 'your_db_password',\n\t\tport: 5432,\n\t};\n\tconst pool = new pg.Pool(configDB);\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = async function($) {\n\t\t\tlet data = $.data;\n\t\t\tlet output;\n\n\t\t\ttry {\n\t\t\t\t// Establish connection\n\t\t\t\tconst client = await pool.connect();\n\n\t\t\t\t// Switch case for different operations\n\t\t\t\tswitch(config.operation) {\n\t\t\t\t\tcase 'getall':\n\t\t\t\t\t\toutput = await client.query('SELECT * FROM tasks');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'getbyid':\n\t\t\t\t\t\toutput = await client.query('SELECT * FROM tasks WHERE id = $1', [data.id]);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'getbytitle':\n\t\t\t\t\t\toutput = await client.query('SELECT * FROM tasks WHERE title ILIKE $1', ['%' + data.title + '%']);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', output.rows);\n\n\t\t\t\t// Release the client back to the pool\n\t\t\t\tclient.release();\n\t\t\t} catch (err) {\n\t\t\t\tinstance.throw(err);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (!config.operation)\n\t\t\t\tconfig.operation = 'getall';\n\t\t};\n\n\t\tinstance.on('close', function() {\n\t\t\t// Shutdown the connection pool\n\t\t\tpool.end();\n\t\t});\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis components can apply string operation to your components.\n\n- input: `String`\n- output: `String`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.operation\"  config=\"type:select;dirsource:getall|Get All,getbyid|Get by ID,getbytitle|Get by Title\">Operation</ui-component>\n\t\t<ui-bind path=\"?\" config=\"hide:value.hide && !value.prompt\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"help hidden\">The prompt value will be assigned to the <code>{prompt}</code> keyword in the code.</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { font-size: 12px; padding: 10px; font-weight: bold; }\n\t.CLASS footer span { float: right; }\n\t.CLASS footer span i { font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.operation\" config=\"show\" class=\"block\">\n\t\t\tOperation: <span class=\"blue\"><ui-bind path=\"CONFIG.operation\" config=\"text:value.charAt(0).toUpperCase() + value.slice(1)\"></ui-bind></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"tasktrigger": "<script total>\n\texports.id = 'tasktrigger';\n\texports.name = 'Task Command';\n\texports.group = 'Triggers';\n\texports.version = '1.0';\n\texports.icon = 'ti ti-list-check';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.config = {\n\t\taction: 'getall',\n\t\ttaskId: '',\n\t\tkeyword: '',\n\t\tstatus: ''\n\t};\n\texports.outputs = [\n\t\t{ id: 'output', name: 'Output', schema: true },\n\t\t{ id: 'error', name: 'Error Output', schema: true }\n\t];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($){\n\n\t\t\tvar data = $.data;\n\t\t\tvar output = {};\n\t\t\tvar error = null;\n\n\t\t\t// Validasi untuk action 'getbyid'\n\t\t\t// if (config.action === 'getbyid') {\n\t\t\t// }\n\n\t\t\t// Validasi untuk action 'getbystatus'\n\t\t\t// if (config.action === 'getbystatus') {\n\t\t\t// }\n\n\t\t\t// Jika ada error, kirimkan ke error output\n\n\t\t\t// Switch case untuk menangani berbagai aksi berdasarkan input JSON\n\t\t\tswitch(config.action){\n\t\t\t\tcase 'getall':\n\t\t\t\t\toutput = { action: 'getall', message: 'Fetching all tasks', data: data };\n\t\t\t\t\t$.send('output', output);\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'getbyid':\n\t\t\t\t\tconst parameter = parseInt(data.params.id);\n\t\t\t\t\tif (!/^\\d+$/.test(parameter) && typeof(parameter) !== 'string') {\n\t\t\t\t\t\terror = 'Task ID must be a number';\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput = { action: 'getbyid', taskId: parameter, message: `Fetching task by ${parameter} ` };\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'getbykeyword':\n\t\t\t\t\toutput = { action: 'getbykeyword', keyword: data.keyword, message: 'Fetching tasks by keyword' };\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'getbystatus':\n\t\t\t\t\tconst validStatuses = ['pending', 'in-progress', 'completed'];\n\t\t\t\t\tif (validStatuses.indexOf(data.params.id) === -1) {\n\t\t\t\t\t\terror = `Invalid status: ${data.params.id}. Valid statuses are: ${validStatuses.join(', ')}`;\n\t\t\t\t\t} else {\n\t\t\t\t\t\toutput = { action: 'getbystatus', status: data.params.id, message: 'Fetching tasks by status' };\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\t$.send('error', { error: 'Invalid action selected' });\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (error) {\n\t\t\t\t$.send('error', { error: error });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Kirim output yang dihasilkan\n\t\t\t$.send('output', output);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// Setup default action jika tidak ada\n\t\t\tif (!config.action)\n\t\t\t\tconfig.action = 'getall';\n\t\t};\n\n\t\t// Panggil konfigurasi awal\n\t\tinstance.configure();\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 10px; }\n\t.CLASS button { width: 100%; height: 30px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n\t.CLASS footer { font-size: 12px; padding: 10px; font-weight: bold; }\n\t.CLASS footer span { float: right; }\n\t.CLASS footer span i { font-size: 12px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.action\" config=\"dirsource:getall|Get All Tasks,getbyid|Get Task by ID,getbykeyword|Get Task by Keyword,getbystatus|Get Task by Status;required:1\">Action</ui-component>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'getbyid'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.taskId\" config=\"type:text;placeholder:Enter Task ID;required:1\">Task ID</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'getbykeyword'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.keyword\" config=\"type:text;placeholder:Enter Keyword;required:1\">Keyword</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'getbystatus'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.status\" config=\"type:text;placeholder:Enter Status;required:1\">Status</ui-component>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThis component triggers task-related data into the Flow based on the selected action.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.action\" config=\"show\" class=\"block\">\n\t\t\tOperation: <span class=\"blue\"><ui-bind path=\"CONFIG.action\" config=\"text:value.charAt(0).toUpperCase() + value.slice(1)\"></ui-bind></span>\n\t\t</ui-bind>\n\t</footer>\n</body>\n",
			"taskaction": "<script total>\n\texports.id = 'taskaction';\n\texports.name = 'Task Query';\n\texports.group = 'Actions';\n\texports.version = '1.0';\n\texports.icon = 'ti ti-send';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.config = {\n\t\taction: 'add',\n\t\ttaskId: '',\n\t\ttitle: '',\n\t\tdescription: '',\n\t\tstatus: '',\n\t\tpriority: '',\n\t\terror_output: false,\n\t\tautoresponse: true ,\n\t\tpath: 'response',\n\t\tdatasource: [{ name: 'Apalahhhh', id: 1 }, { name: 'dland pasd', id: 2 }, { name: 'Cuanki', id: 3 }]\n\t};\n\texports.outputs = [\n\t\t{ id: 'output', name: 'Output' },\n\t\t{ id: 'error', name: 'Error Output', schema: true }\n\t];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n    instance.message = function($){\n\n        var data = $.data;\n        var output = {};\n        var error = null;\n        var parameter = parseInt(data.params.id);\n\t\tvar builder = DATA.find('pg_catalog.pg_tables').fields('tablename')\n        .where('schemaname', '=', 'public');\n    \tvar tableNames = builder.main.controller.response;\n\n\t\t// Helper function to send success response\n\t\tfunction sendResponse(response) {\n\t\t\tif ($.refs.controller && config.autoresponse) {\n\t\t\t\t$.refs.controller.json({  tableNames: tableNames, response: response });\n\t\t\t}\n\n\t\t\tconst namaTabel = tableNames.map(table => table.tablename);\n\t\t\t// Outputnya\n\t\t\tconsole.log(namaTabel);\n\n\t\t\t$.send('output', {response: response, tableNames: tableNames});\n\t\t}\n\n        // Perform actions based on the selected action type\n        switch (config.action) {\n            case 'add':\n                output = {\n                    action: 'add',\n                    task: data\n                };\n                break;\n            case 'update':\n                output = {\n                    action: 'update',\n                    taskId: parameter,\n                    task: data.body\n                };\n                break;\n            case 'delete':\n                output = {\n                    action: 'delete',\n                    taskId: parameter,\n                    message: `Success deleting task with ID ${parameter}`\n                };\n                break;\n            default:\n                error = 'Invalid action selected';\n                break;\n        }\n\n        // If there is an error, send it to both the error output and HTTP response (if applicable)\n        if (error) {\n            if ($.controller) {\n                $.controller.json({ error: error });\n            }\n            instance.send('error', { error: error });\n            return;\n        }\n\n        // Send the output to the flowchart output\n        sendResponse(output);\n    }\n\n    instance.configure = function() {\n        if (!config.action)\n            config.action = 'add';\n    };\n\n    instance.configure();\n};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 10px; }\n\t.CLASS button { width: 100%; height: 30px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.action\" config=\"dirsource:add|Add Task,update|Update Task,delete|Delete Task;required:1\">Action</ui-component>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'update' || value === 'delete'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.taskId\" config=\"type:text;placeholder:Enter Task ID;required:1\">Task ID</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'add' || value === 'update'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.title\" config=\"type:text;placeholder:Enter Task Title\">Title</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.description\" config=\"type:text;placeholder:Enter Task Description\">Description</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.status\" config=\"type:text;placeholder:Enter Task Status\">Status</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.priority\" config=\"type:text;placeholder:Enter Task Priority\">Priority</ui-component>\n\t\t</ui-bind>\n\n\t\t<!-- Tambahkan setting untuk autoresponse -->\n\t\t<ui-component name=\"checkbox\" path=\"?.autoresponse\" config=\"title:Enable Auto HTTP Response\">Auto HTTP Response</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThis component performs actions on tasks, such as adding, updating, and deleting, with error handling and validation. Now supports auto HTTP response when enabled.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>\n",
			"taskinput": "<script total>\n\texports.id = 'taskinput';\n\texports.name = 'Task Input';\n\texports.group = 'Inputs';\n\texports.version = '1.0';\n\texports.icon = 'ti ti-pencil';\n\texports.author = 'Total.js';\n\texports.config = {\n\t\ttitle: '',\n\t\tdescription: '',\n\t\tstatus: '',\n\t\tpriority: '',\n\t\trequired_fields: true\n\t};\n\texports.outputs = [\n\t\t{ id: 'output', name: 'Output', schema: true },\n\t\t{ id: 'error', name: 'Error Output', schema: true }\n\t];\n\texports.kind = 'input';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tvar output = {};\n\t\t\tvar error = null;\n\n\t\t\t// Basic Validation\n\t\t\tif (config.required_fields) {\n\t\t\t\tif (!config.title) {\n\t\t\t\t\terror = 'Task title is required';\n\t\t\t\t} else if (!config.status) {\n\t\t\t\t\terror = 'Task status is required';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If error exists, send it to error output\n\t\t\tif (error) {\n\t\t\t\tinstance.send('error', { error: error });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Send valid data to output\n\t\t\toutput = {\n\t\t\t\ttitle: config.title,\n\t\t\t\tdescription: config.description,\n\t\t\t\tstatus: config.status,\n\t\t\t\tpriority: config.priority\n\t\t\t};\n\n\t\t\tinstance.send('output', output);\n\t\t};\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 10px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.title\" config=\"type:text;placeholder:Enter Task Title\">Title</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.description\" config=\"type:text;placeholder:Enter Task Description\">Description</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.status\" config=\"type:text;placeholder:Enter Task Status\">Status</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.priority\" config=\"type:text;placeholder:Enter Task Priority\">Priority</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.required_fields\" config=\"type:checkbox\">Require Title and Status</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThis component is used for inputting task details such as Title, Description, Status, and Priority.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button name=\"submit\">Submit</button>\n\t</div>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\t\texports.click = function(el) {\n\t\t\texports.trigger();\n\t\t};\n\t});\n</script>\n",
			"taskdecision": "<script total>\n\texports.id = 'taskdecision';\n\texports.name = 'Task Decision';\n\texports.group = 'Validation';\n\texports.version = '1.0';\n\texports.icon = 'ti ti-check-box';\n\texports.author = 'Total.js';\n\texports.config = {\n\t\tvalidate_status: true,\n\t\tvalid_statuses: ['pending', 'in-progress', 'completed']\n\t};\n\texports.outputs = [\n\t\t{ id: 'output', name: 'Valid Output', schema: true },\n\t\t{ id: 'invalid', name: 'Invalid Output', schema: true }\n\t];\n\texports.kind = 'validation';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.on('data', function(flowdata) {\n\t\t\tvar data = flowdata.data;\n\t\t\tvar isValid = true;\n\t\t\tvar error = null;\n\n\t\t\t// Validation process\n\t\t\tif (config.validate_status && config.valid_statuses.indexOf(data.status) === -1) {\n\t\t\t\tisValid = false;\n\t\t\t\terror = 'Invalid task status: ' + data.status;\n\t\t\t}\n\n\t\t\t// Send to appropriate output\n\t\t\tif (isValid) {\n\t\t\t\tinstance.send('output', data);\n\t\t\t} else {\n\t\t\t\tinstance.send('invalid', { error: error });\n\t\t\t}\n\t\t});\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 10px; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.validate_status\" config=\"type:checkbox\">Validate Status</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.valid_statuses\" config=\"type:tags;placeholder:Enter valid statuses;required:1\">Valid Statuses</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThis component validates task data, such as checking if the task status is valid.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>\n",
			"youridentifier": "<script total>\n\n\t// exports.id = 'youridentifier';\n\texports.name = 'UpperCase';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Custom';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\t// when the component is created\n\texports.make = function(instance, config) {\n\n\t\t// handler when new message is exist\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tif(!data){\n\t\t\t\t$.send('error', 'Invalid input: Expected a string')\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif(typeof(data) !== 'string'){\n\t\t\t\t$.send('error', 'Input must be string')\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$.send('output', data.toUpperCase());\n\t\t\t// or $.send('error', data);\n\t\t\t// or $.destroy();\n\t\t};\n\n\t\t// handler when settings is updated or changed\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component put a string to upper case\n</readme>\n\n<script>\n\n\t// Client-side script\n\t// Optional, you can remove it\n\n\t// A custom helper for the component instances\n\t// The method below captures each instance of this component\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar name = exports.name + ' --> ' + exports.id;\n\n\t\tconsole.log(name, 'initialized' + (reinit ? ' : UPDATE' : ''));\n\n\t\texports.settings = function(meta) {\n\t\t\t// Triggered when the user opens settings\n\t\t\tconsole.log(name, 'settings', meta);\n\t\t};\n\n\t\texports.configure = function(config, isinit) {\n\t\t\t// Triggered when the config is changed\n\t\t\tconsole.log(name, 'configure', config);\n\t\t};\n\n\t\texports.status = function(status, isinit) {\n\t\t\t// Triggered when the status is changed\n\t\t\tconsole.log(name, 'status', status);\n\t\t};\n\n\t\texports.note = function(note, isinit) {\n\t\t\t// Triggered when the note is changed\n\t\t\tconsole.log(name, 'note', note);\n\t\t};\n\n\t\texports.variables = function(variables) {\n\t\t\t// Triggered when the variables are changed\n\t\t\tconsole.log(name, 'variables', variables);\n\t\t};\n\n\t\texports.variables2 = function(variables) {\n\t\t\t// Triggered when the variables2 are changed\n\t\t\tconsole.log(name, 'variables2', variables);\n\t\t};\n\n\t\texports.redraw = function() {\n\t\t\t// Flow design has been redrawn\n\t\t\tconsole.log(name, 'redraw');\n\t\t};\n\n\t\texports.move = function() {\n\t\t\t// Instance has changed position\n\t\t\tconsole.log(name, 'move');\n\t\t};\n\n\t\texports.close = function() {\n\t\t\t// Triggered when the instance is closing due to some reasons\n\t\t\tconsole.log(name, 'close');\n\t\t};\n\n\t});\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>",
			"taskquery": "<script total>\n\texports.id = 'taskquery';\n\texports.name = 'Task Query';\n\texports.group = 'Actions';\n\texports.version = '1.0';\n\texports.icon = 'ti ti-send';\n\texports.author = 'Total.js';\n\texports.config = {\n\t\taction: 'add',\n\t\ttaskId: '',\n\t\ttitle: '',\n\t\tdescription: '',\n\t\tstatus: '',\n\t\tpriority: '',\n\t\terror_output: false\n\t};\n\texports.outputs = [\n\t\t{ id: 'output', name: 'Output' },\n\t\t{ id: 'error', name: 'Error Output', schema: true }\n\t];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tvar output = {};\n\t\t\tvar error = null;\n\n\t\t\t// Validation\n\t\t\tif (!config.action) {\n\t\t\t\terror = 'Action is required';\n\t\t\t} else if (config.action !== 'add' && !config.taskId) {\n\t\t\t\terror = 'Task ID is required for update and delete actions';\n\t\t\t} else if (config.action === 'add' || config.action === 'update') {\n\t\t\t\tif (!config.title) {\n\t\t\t\t\terror = 'Title is required';\n\t\t\t\t} else if (!config.status) {\n\t\t\t\t\terror = 'Status is required';\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// If error exists, send it to error output and return\n\t\t\tif (error) {\n\t\t\t\tinstance.send('error', { error: error });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Perform actions based on the selected action type\n\t\t\tswitch (config.action) {\n\t\t\t\tcase 'add':\n\t\t\t\t\toutput = {\n\t\t\t\t\t\taction: 'add',\n\t\t\t\t\t\ttask: {\n\t\t\t\t\t\t\ttitle: config.title,\n\t\t\t\t\t\t\tdescription: config.description,\n\t\t\t\t\t\t\tstatus: config.status,\n\t\t\t\t\t\t\tpriority: config.priority\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'update':\n\t\t\t\t\toutput = {\n\t\t\t\t\t\taction: 'update',\n\t\t\t\t\t\ttaskId: config.taskId,\n\t\t\t\t\t\ttask: {\n\t\t\t\t\t\t\ttitle: config.title,\n\t\t\t\t\t\t\tdescription: config.description,\n\t\t\t\t\t\t\tstatus: config.status,\n\t\t\t\t\t\t\tpriority: config.priority\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'delete':\n\t\t\t\t\toutput = {\n\t\t\t\t\t\taction: 'delete',\n\t\t\t\t\t\ttaskId: config.taskId\n\t\t\t\t\t};\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\terror = 'Invalid action selected';\n\t\t\t\t\tinstance.send('error', { error: error });\n\t\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tinstance.send('output', output);\n\t\t};\n\t};\n</script>\n\n<style>\n\t.CLASS .padding { padding: 10px; }\n\t.CLASS button { width: 100%; height: 30px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.action\" config=\"dirsource:add|Add Task,update|Update Task,delete|Delete Task;required:1\">Action</ui-component>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'update' || value === 'delete'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.taskId\" config=\"type:text;placeholder:Enter Task ID;required:1\">Task ID</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'add' || value === 'update'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.title\" config=\"type:text;placeholder:Enter Task Title\">Title</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.description\" config=\"type:text;placeholder:Enter Task Description\">Description</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.status\" config=\"type:text;placeholder:Enter Task Status\">Status</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.priority\" config=\"type:text;placeholder:Enter Task Priority\">Priority</ui-component>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThis component performs actions on tasks, such as adding, updating, and deleting, with error handling and validation.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button name=\"run\">Run</button>\n\t</div>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\t\texports.click = function(el) {\n\t\t\texports.trigger();\n\t\t};\n\t});\n</script>\n",
			"troute": "<script total>\n\n\texports.id = 'troute';\n\texports.name = 'Route';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-exchange';\n\texports.version = '2';\n\texports.author = 'Total.js';\n\texports.config = { url: '/', method: 'GET', timeout: 5000, limit: 5120, upload: false, user: 0, send: 'all', reader: '-' };\n\texports.outputs = [{ id: 'output', name: 'Request' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar prev = null;\n\n\t\tinstance.close = function() {\n\t\t\tprev && prev.remove();\n\t\t\tprev = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (prev) {\n\t\t\t\tprev && prev.remove();\n\t\t\t\tprev = null;\n\t\t\t}\n\n\t\t\tif (config.url && config.method) {\n\n\t\t\t\tvar flags = [];\n\n\t\t\t\tconfig.timeout && flags.push(F.is5 ? ('<' + Math.ceil(config.timeout / 1000) + 's') : config.timeout);\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tflags.push('<' + Math.ceil(config.limit / 1024) + 'MB');\n\n\t\t\t\tconfig.upload && flags.push((F.is5 ? '@' : '') + 'upload');\n\n\t\t\t\tvar action = function($) {\n\n\t\t\t\t\tvar ctrl = F.is5 ? $ : this;\n\t\t\t\t\tvar msg = instance.newmessage();\n\t\t\t\t\tvar data;\n\n\t\t\t\t\t// Parse cookies\n\t\t\t\t\tvar cookies = {};\n\t\t\t\t\tvar cookie = ctrl.headers.cookie;\n\n\t\t\t\t\tif (cookie) {\n\t\t\t\t\t\tlet arr = cookie.split(';');\n\t\t\t\t\t\tfor (let c of arr) {\n\t\t\t\t\t\t\tlet line = c.trim();\n\t\t\t\t\t\t\tlet index = line.indexOf('=');\n\t\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\t\tcookies[line.substring(0, index)] = line.substring(index + 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tvar query = ctrl.query;\n\t\t\t\t\tvar body = ctrl.body;\n\t\t\t\t\tvar params = ctrl.params;\n\n\t\t\t\t\tswitch (config.send) {\n\t\t\t\t\t\tcase 'payload':\n\t\t\t\t\t\t\tdata = body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'query':\n\t\t\t\t\t\t\tdata = query;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'files':\n\t\t\t\t\t\t\tdata = ctrl.files;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'params':\n\t\t\t\t\t\t\tdata = params;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'headers':\n\t\t\t\t\t\t\tdata = ctrl.headers;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'user':\n\t\t\t\t\t\t\tdata = ctrl.user;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'cookies':\n\t\t\t\t\t\t\tdata = cookies;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdata = { body: body, query: query, user: ctrl.user, files: ctrl.files, user: ctrl.user, url: ctrl.url, headers: ctrl.headers, params: params, ip: ctrl.ip, split: ctrl.split, cookies: cookies, ua: ctrl.ua };\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\n\t\t\t\t\tmsg.refs.controller = ctrl;\n\n\t\t\t\t\tif (config.upload && config.reader && config.reader !== '-') {\n\t\t\t\t\t\tctrl.files.wait(function(file, next) {\n\t\t\t\t\t\t\tfile.read(function(err, buffer) {\n\t\t\t\t\t\t\t\tvar type = config.reader;\n\t\t\t\t\t\t\t\tif (type === 'datauri')\n\t\t\t\t\t\t\t\t\ttype = 'base64';\n\t\t\t\t\t\t\t\tfile.data = type === 'buffer' ? buffer : buffer.toString(type);\n\t\t\t\t\t\t\t\tif (config.reader === 'datauri')\n\t\t\t\t\t\t\t\t\tfile.data = 'data:' + file.type + ';base64,' + file.data;\n\t\t\t\t\t\t\t\tnext();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}, () => msg.send('output', data));\n\t\t\t\t\t} else\n\t\t\t\t\t\tmsg.send('output', data);\n\n\t\t\t\t};\n\n\t\t\t\tvar auth = config.user == 1 ? '+' : config.user == 2 ? '-' : '';\n\t\t\t\tvar url = config.url.replace(/#/g, instance.main.id);\n\t\t\t\tprev = F.is5 ? ROUTE(auth + config.method + ' ' + url + (config.action && config.method === 'API' ? (' ' + config.action) : '') + ' ' + flags.join(' '), action) : ROUTE(auth + config.method + ' ' + instance.replace(url) + (config.action && config.method === 'API' ? (' ' + config.action) : ''), action, flags, config.limit);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component registers an HTTP Route and sends request data next. It stores `controller` instance in the `message.refs.controller` property. You must respond to the REST response component.\n\n__Output data__:\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number, data:Buffer|String }] // optional\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-bind path=\"flow.head.worker\" config=\"hide:!value || flow.head.origin.length < flow.head.proxyurl.length\" class=\"block\">\n\t\t\t<div class=\"message message-error\"><b><i class=\"ti ti-warning\"></i>No proxy endpoint defined.</b><br>This component will not work until then. Please go to main screen, open settings of this FlowStream instance and set the Endpoint.</div>\n\t\t</ui-bind>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"required:1;dirsource:GET|GET,POST|POST,PUT|PUT,PATCH|PATCH,DELETE|DELETE,API|API\">Method</ui-component>\n\t\t\t\t<div class=\"help\">HTTP method</div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"monospace:1;required:1\">Relative URL address</ui-component>\n\t\t\t\t<div class=\"help\">A relative path to: <ui-bind path=\"flow.head.proxyurl\" config=\"text:value?value:window.location.origin\"></ui-bind><br />It supports wildcard <code>/something/*</code> or dynamic arguments <code>/products/{category}/</code>.<br /><code>#</code> will be replaced with a FlowStream <code>id</code> identifier.</div>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<hr class=\"nmt\" />\n\n\t\t<ui-bind path=\"?.method\" config=\"show:value === 'API'\" class=\"block hidden m padding bg-smoke radius\">\n\t\t\t<ui-component name=\"input\" path=\"?.action\" config=\"monospace:1;required:1;placeholder:+users_read/{id}\">API Action</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-component name=\"input\" path=\"?.upload\" config=\"type:checkbox\" class=\"m\"><b>Allow uploading files (form data)</b></ui-component>\n\t\t<ui-bind path=\"?.upload\" config=\"enabled\">\n\t\t\t<ui-component name=\"input\" path=\"?.reader\" config=\"dirsource:-|Keep as files,buffer|Buffer,utf8|UTF-8,ascii|ASCII,datauri|Data URI,base64|Base64,hex|Hex\">Read files to</ui-component>\n\t\t</ui-bind>\n\t\t<hr />\n\n\t\t<div class=\"ui-input-label mt10\">Continue as:</div>\n\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t<span>Authorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t<span>Unauthorized</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t<span>Both</span>\n\t\t\t</div>\n\t\t</ui-component>\n\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"required:1;type:number;format:\">Timeout</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"required:1;type:number;ricon:!kB;align:1;format:\">Request limit</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,payload|Payload,query|Query arguments,files|Files,params|Dynamic params,headers|Headers,cookies|Cookies,user|User\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; color: #999; }\n\t.CLASS footer .method { background-color: var(--color); color: #FFF; padding: 2px 3px; border-radius: var(--radius); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer class=\"monospace\"></footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tvar template = Tangular.compile('{{ if value.user == 1 }}<i class=\"ti ti-lock red mr10\"></i>{{ else if value.user == 2 }}<i class=\"ti ti-unlock blue mr10\"></i>{{ fi }}<span class=\"method\">{{ value.method }}</span> <a href=\"{{ value.link }}\" target=\"_blank\">{{ value.url }}</a>{{ if value.method === \\'API\\' }} {{ value.action }}{{ fi }}');\n\n\t\tvar reload = function() {\n\t\t\tvar model = CLONE(exports.config);\n\t\t\tmodel.link = model.url = model.url.replace(/#/g, flow.head.id);\n\n\t\t\tif (flow.head.proxypath)\n\t\t\t\tmodel.link = flow.head.origin + (flow.head.proxypath + model.link).replace(/\\/{2,}/g, '/');\n\t\t\telse\n\t\t\t\tmodel.link = flow.head.origin + model.link;\n\n\t\t\texports.element.find('footer').html(template({ value: model }));\n\t\t};\n\n\t\texports.configure = reload;\n\t\treload();\n\t});\n</script>",
			"read": "<script total>\n\n\texports.id = 'read';\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'ti ti-filter';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [], keep: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item, value) {\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'empty':\n\t\t\t\t\treturn value;\n\t\t\t\tcase 'uid':\n\t\t\t\t\treturn UID();\n\t\t\t\tcase 'guid':\n\t\t\t\t\treturn GUID();\n\t\t\t\tcase 'upper':\n\t\t\t\t\treturn value == null ? '' : value.toString().toUpperCase();\n\t\t\t\tcase 'lower':\n\t\t\t\t\treturn value == null ? '' : value.toString().toLowerCase();\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\treturn value == null ? '' : value.toString().capitalize();\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn U.parseFloat(value);\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof(value) === 'string' ? value : value == null ? '' : value.toString();\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBoolean(value);\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (value instanceof Date)\n\t\t\t\t\t\treturn value;\n\t\t\t\t\treturn value == null ? new Date() : typeof(value) === 'number' ? new Date(value) : value.toString().parseDate();\n\t\t\t\tcase 'tobase64':\n\t\t\t\tcase 'tohex':\n\t\t\t\t\treturn value instanceof Buffer ? value.toString(item.convert.substring(2)) : value == null ? '' : Buffer.from(value).toString(item.convert.substring(2));\n\t\t\t\tcase 'frombase64':\n\t\t\t\tcase 'fromhex':\n\t\t\t\t\treturn typeof(value) === 'string' ? (value.indexOf(':') === -1 ? Buffer.from(value, item.convert.substring(4)) : value.base64ToBuffer()) : null;\n\t\t\t\tcase 'tojson':\n\t\t\t\t\treturn JSON.stringify(value);\n\t\t\t\tcase 'fromjson':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.parseJSON(true) : null;\n\t\t\t\tcase 'ascii':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.toASCII() : value == null ? '' : value.toString().toASCII();\n\t\t\t\tcase 'slug':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.slug() : value == null ? '' : value.toString().slug();\n\t\t\t\tcase 'crc32':\n\t\t\t\tcase 'crc32unsigned':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.hash(item.convert) : value == null ? '' : value.toString().hash(item.convert);\n\t\t\t\tcase 'md5':\n\t\t\t\tcase 'sha1':\n\t\t\t\tcase 'sha256':\n\t\t\t\tcase 'sha512':\n\t\t\t\t\treturn value == null ? '' : F.Crypto.createHash(item.convert).update(value instanceof Buffer ? value : value.toString()).digest('hex');\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tvar obj = {};\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = item.pathfrom.indexOf('.') === -1 ? data[item.pathfrom] : U.get(data, item.pathfrom);\n\n\t\t\t\tif (item.convert && item.convert !== 'empty')\n\t\t\t\t\tval = convert(item, val);\n\n\t\t\t\tif (item.pathto) {\n\t\t\t\t\tif (item.pathto.indexOf('.') === -1)\n\t\t\t\t\t\tobj[item.pathto] = val;\n\t\t\t\t\telse\n\t\t\t\t\t\tU.set(obj, item.pathto, val);\n\t\t\t\t} else {\n\t\t\t\t\tobj = val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.keep) {\n\t\t\t\tfor (let key in obj)\n\t\t\t\t\t$.data[key] = obj[key];\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\t\t\t\tif (config.path && config.rewrite)\n\t\t\t\t\tU.set($.data, config.path, obj);\n\t\t\t\t$.send('output', obj);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component reads specific values according to the configured map.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { width: 20%; line-height: 23px; float: left; padding: 0 5px; cursor: pointer; }\n\t.CLASS-settings figure .path { width: 35%; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; }\n\t.CLASS-settings figure .to div { color: #4285F4; }\n\t.CLASS-settings figure .from div { color: #B9261A; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer is=\"is-footer\" path=\"CONFIG.path\" config=\"show;text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<ui-bind path=\"?.path\" config=\"hide\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.keep\" config=\"type:checkbox\"><b>Keep the message data</b> and transform only specific paths</ui-component>\n\t\t\t\t<hr />\n\t\t\t</ui-bind>\n\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpread.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpread.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path from\">\n\t\t\t\t\t\t\t<span>From</span><div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpread.path;required:1\">{{ m.pathfrom }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path to\">\n\t\t\t\t\t\t\t<span>To</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpread.path;selectall:1\">{{ m.pathto }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpread.convert\">{{ m.convert | tmpreadconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { pathfrom: 'Temperature', pathto: 'temperature', convert: 'empty' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpread;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem['path' + opt.element.attrd('type')] = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'empty', name: 'No convertor' });\n\t\t\t\ttmp.convertors.push({ id: 'upper', name: 'Upper case' });\n\t\t\t\ttmp.convertors.push({ id: 'lower', name: 'Lower case' });\n\t\t\t\ttmp.convertors.push({ id: 'capitalize', name: 'Capitalize case' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'To number' });\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'To string' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'To boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'To date' });\n\t\t\t\ttmp.convertors.push({ id: 'ascii', name: 'Remove diacritics' });\n\t\t\t\ttmp.convertors.push({ id: 'slug', name: 'To slug' });\n\t\t\t\ttmp.convertors.push({ id: 'md5', name: 'To MD5' });\n\t\t\t\ttmp.convertors.push({ id: 'sha1', name: 'To SHA1' });\n\t\t\t\ttmp.convertors.push({ id: 'sha256', name: 'To SHA256' });\n\t\t\t\ttmp.convertors.push({ id: 'sha512', name: 'To SHA512' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32', name: 'To CRC32' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32unsigned', name: 'To CRC32 unsigned' });\n\t\t\t\ttmp.convertors.push({ id: 'tobase64', name: 'To BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'tohex', name: 'To Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'tojson', name: 'To JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'frombase64', name: 'From BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'fromhex', name: 'From Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'fromjson', name: 'From JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'uid', name: 'Generate UI' + 'D' });\n\t\t\t\ttmp.convertors.push({ id: 'guid', name: 'Generate GUI' + 'D' });\n\n\t\t\t\tThelpers.tmpreadconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpread = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"tschema": "<script total>\n\n\texports.id = 'tschema';\n\texports.name = 'Data schema';\n\texports.icon = 'ti ti-check-circle';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { schema: '*name:String, *email:Email', partial: false, strerr: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar schema;\n\n\t\tinstance.message = function($) {\n\t\t\tvar output = schema.transform($.data, config.partial);\n\t\t\tif (output.error)\n\t\t\t\t$.send('error', config.strerr ? output.error.toString() : output.error);\n\t\t\telse\n\t\t\t\t$.send('output', output.response);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tschema = config.schema.toJSONSchema();\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component `Schema` can very quickly check incoming data according to the defined schema.\n\n__Supported types__:\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.schema\" config=\"placeholder:name\\:Name, *email\\:Email\">Schema</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.schema\" config=\"text\" class=\"block monospacce\"></ui-bind>\n\t</footer>\n</body>",
			"printjson": "<script total>\n\n\texports.id = 'printjson';\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-component { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .ti-copy, .ui-objecttree .ti-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('ti-copy');\n\t\tel.tclass(iscopy ? 'ti-copy' : 'ti-link').tclass('ti-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('ti-check').tclass(iscopy ? 'ti-copy' : 'ti-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-component name=\"objecttree\" path=\"!STATUS\" config=\"exec:FUNC.printjson_click\" class=\"selectable\"></ui-component>\n\t</footer>\n</body>",
			"datasorter": "<script total>\n\n\texports.id = 'datasorter';\n\texports.name = 'Data sorter';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-vector';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn(instance, $);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.status(e + '');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t}\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\ttry {\n\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data,data=$.data,refs=$.refs,repo=$.repo;' + builder.join('') + '$.send(\\'error\\');');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t\tinstance.status('');\n\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\n\t\t};\n\n\t\t// Due to redrawing of outputs\n\t\tsetTimeout(instance => instance && instance.configure(), 1500, instance);\n\t};\n\n</script>\n\n<readme>\nThe component sorts data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n\t.CLASS footer > ui-bind { padding: 10px; font-size: 12px; }\n\t.CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n\t.CLASS-settings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASS-settings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASS-settings\">\n\t\t<ui-component name=\"listform\" path=\"?.conditions\" config=\"autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"item\"><i class=\"ti ti-arrow-right\"></i>{{ name }}</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1;innerlabel:1__''\" class=\"m\">Name</ui-component>\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.if\" config=\"required:1;innerlabel:1;monospace:1\" default=\"'value != null'\">Condition</ui-component>\n\t\t\t\t\t<div class=\"help m\"><i class=\"ti ti-exclamation-triangle\"></i><code>value</code> represents a message data and <code>refs</code> represents references. Example: <code>value.age > 18</code></div>\n\t\t\t\t\t<ui-component name=\"validate\" path=\"?\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"ti ti-file-code\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</ui-component>\n\t\t\t\t</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Create rule</button></div>\n\t\t\t</script>\n\n\t\t</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS\" config=\"text;show\" class=\"red\"></ui-bind>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar items = exports.config.conditions;\n\t\t\t\tfor (var i = 0; i < items.length; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + i, name: items[i].name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"model": "<script total>\n\n\texports.id = 'model';\n\texports.name = 'Model';\n\texports.group = 'Transformations';\n\texports.icon = 'ti ti-file';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar deferr = 'Invalid value';\n\t\tvar defvalues = {};\n\t\tvar path;\n\n\t\tvar preparenumber = function(val, err, max, min, float) {\n\t\t\tif (val != null && val != '') {\n\t\t\t\tval = typeof(val) === 'string' ? (float ? val.parseFloat() : val.parseInt()) : val;\n\t\t\t\tval = max ? (val > max || val < min ? null : val) : val;\n\t\t\t} else\n\t\t\t\tval = null;\n\t\t\treturn val;\n\t\t};\n\n\t\tinstance.preparedata = function(item, val, err, parent, partial) {\n\n\t\t\tvar path = (parent ? (parent + '.') : '') + item.name;\n\n\t\t\tswitch (item.type) {\n\t\t\t\tcase 'string':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'upper':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toUpperCase() : '';\n\n\t\t\t\tcase 'lower':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.toLowerCase() : '';\n\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val ? val.capitalize() : '';\n\n\t\t\t\tcase 'email':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isEmail() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'phone':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.trim().replace(/\\s|\\.|-|\\(|\\)/g, '');\n\t\t\t\t\tval = val && val.isPhone() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'boolean':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\treturn defvalues[item.name] || false;\n\n\t\t\t\t\treturn val == true || val === 'on' || val === 'true' || val == 1;\n\n\t\t\t\tcase 'zip':\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\t\t\t\t\tval = val.replace(/\\s/g, '');\n\t\t\t\t\tval = val && val.isZIP() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (val) {\n\t\t\t\t\t\tif (val instanceof Date)\n\t\t\t\t\t\t\treturn val;\n\t\t\t\t\t\tswitch (typeof(val)) {\n\t\t\t\t\t\t\tcase 'string':\n\t\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\t\t\tval = val.parseDate();\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!(val instanceof Date) || isNaN(val))\n\t\t\t\t\t\t\tval = null;\n\t\t\t\t\t} else\n\t\t\t\t\t\tval = defvalues[item.name] ? (defvalues[item.name] == NOOP ? new Date() : defvalues[item.name]) : null;\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn null;\n\n\t\t\t\tcase 'object':\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'number':\n\t\t\t\tcase 'float':\n\t\t\t\t\tval = preparenumber(val, err, null, true);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'integer':\n\t\t\t\t\tvar max = 2147483647;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'smallint':\n\t\t\t\t\tvar max = 32768;\n\t\t\t\t\tval = preparenumber(val, err, max, -max);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'tinyint':\n\t\t\t\t\tval = preparenumber(val, err, 255, 0);\n\n\t\t\t\t\tif (val == null && defvalues[item.name] != null)\n\t\t\t\t\t\tval = defvalues[item.name];\n\n\t\t\t\t\tif (item.required && val == null)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val || 0;\n\t\t\t\tcase 'base64':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isBase64() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'json':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isJSON() ? val : '';\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'url':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.isURL() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'uid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tcase 'guid':\n\n\t\t\t\t\tif (val == null)\n\t\t\t\t\t\tval = defvalues[item.name] || '';\n\t\t\t\t\telse\n\t\t\t\t\t\tval += '';\n\n\t\t\t\t\tval = val.trim();\n\t\t\t\t\tval = val.isGUID() ? val : '';\n\n\t\t\t\t\tif (item.required && !val)\n\t\t\t\t\t\terr.push({ name: item.name, path: path, error: item.error || deferr });\n\n\t\t\t\t\treturn val;\n\n\t\t\t\tdefault:\n\t\t\t\t\tvar model = instance.main.meta.flow[item.type];\n\t\t\t\t\treturn model ? model.validatedata(val || {}, err, partial, path).data : null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.validatedata = function(data, err, partial, parent) {\n\n\t\t\tvar obj = {};\n\t\t\tvar plus = parent ? (parent + '.') : '';\n\n\t\t\tif (!err)\n\t\t\t\terr = [];\n\n\t\t\tif (typeof(data) !== 'object') {\n\t\t\t\tdata = data + '';\n\t\t\t\tif (data.isJSON()) {\n\t\t\t\t\tdata = data.parseJSON(true);\n\t\t\t\t} else {\n\t\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\t\treturn { error: err };\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!data) {\n\t\t\t\terr.push({ name: parent, error: 'Invalid data' });\n\t\t\t\treturn { error: err };\n\t\t\t}\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = data[item.name];\n\n\t\t\t\tif (partial && val === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tif (item.array) {\n\n\t\t\t\t\tobj[item.name] = [];\n\n\t\t\t\t\tif (val) {\n\n\t\t\t\t\t\tif (!(val instanceof Array))\n\t\t\t\t\t\t\tval = [val];\n\n\t\t\t\t\t\tfor (var i = 0; i < val.length; i++) {\n\t\t\t\t\t\t\tvar m = val[i];\n\t\t\t\t\t\t\tvar r = instance.preparedata(item, m, err, plus, partial);\n\t\t\t\t\t\t\tobj[item.name].push(r);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t\tif (item.required && !obj[item.name].length)\n\t\t\t\t\t\terr.push({ name: item.name, path: plus + item.name, error: deferr });\n\n\t\t\t\t} else\n\t\t\t\t\tobj[item.name] = instance.preparedata(item, val, err, parent, partial);\n\t\t\t}\n\n\t\t\treturn { data: obj, error: err.length ? err : null };\n\t\t};\n\n\t\tvar findvalue = function(data) {\n\t\t\tvar obj = data;\n\t\t\tfor (var m of path) {\n\t\t\t\tobj = obj[m];\n\t\t\t\tif (!obj)\n\t\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn obj;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (path)\n\t\t\t\tdata = findvalue(data);\n\n\t\t\tvar err = [];\n\t\t\tvar output = instance.validatedata(data, err, $.input === 'partial');\n\n\t\t\tif (output.error) {\n\t\t\t\t$.send('error', output.error);\n\t\t\t} else {\n\t\t\t\tif (path && config.rewrite)\n\t\t\t\t\tdata = output.data;\n\t\t\t\t$.send('output', path && config.rewrite ? $.data : output.data);\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tpath = config.path ? config.path.split('.') : null;\n\t\t\tdefvalues = {};\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tif (item.default) {\n\t\t\t\t\tswitch (item.type) {\n\t\t\t\t\t\tcase 'tinyint':\n\t\t\t\t\t\tcase 'smallint':\n\t\t\t\t\t\tcase 'integer':\n\t\t\t\t\t\tcase 'number':\n\t\t\t\t\t\tcase 'float':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default.parseFloat();\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'object':\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tdefvalues[item.name] = new Function('return ' + item.default)();\n\t\t\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'date':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'now' ? NOOP : item.default.parseDate('yyyy-MM-dd HH:mm:ss');\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'boolean':\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default === 'true' || item.default === 'on' || item.default === '1';\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tdefvalues[item.name] = item.default;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Model name</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"hellip\"><span class=\"edit label\" data-edit=\"exec:tmprestmodel.label;required:1\">{{ m.label }}</span><span class=\"monospace edit key\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</span></div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name .label { background-color: #000; outline: 0; padding: 2px 3px; color: #FFF; }\n\t.CLASS-settings figure .name .key { font-weight: bold; margin-left: 5px; outline: 0; }\n\t.CLASS-settings figure .name > div:first-child { outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .name .label { background-color: #FFF; color: #000; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"ti ti-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), label: 'Name', name: 'propname', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.label = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.label = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- {0} `{1} {{2}}`'.format(m.label, m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>",
			"logger": "<script total>\n\n\texports.id = 'logger';\n\texports.name = 'Logger';\n\texports.group = 'Total.js API';\n\texports.version = '2';\n\texports.icon = 'ti ti-search';\n\texports.author = 'Total.js';\n\texports.config = { token: '', type: 'info', message: '', reference: '', url: '' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.message = function($) {\n\t\t\tvar msg = {};\n\t\t\tmsg.schema = instance.main.$schema.name;\n\t\t\tmsg.ip = $.ip;\n\t\t\tmsg.data = JSON.stringify($.data);\n\t\t\tmsg.url = config.url || instance.href() || CONF.url;\n\t\t\tmsg.app = config.name || CONF.name;\n\t\t\tmsg.type = config.type;\n\t\t\tmsg.message = $.variables(config.message);\n\t\t\t$.destroy();\n\t\t\tTotalAPI($.variables(config.token), 'logger', msg, function(err) {\n\t\t\t\tinstance.status({ response: err ? err.toString() : '' });\n\t\t\t});\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .error { font-size: 12px; padding: 10px; color: red; }\n</style>\n\n<readme>\nThe component logs incoming messages into the Total.js Cloud Logger.\n</readme>\n\n<settings>\n\t<div class=\"padding bg-smoke\">\n\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1;camouflage:*\">Total API token</ui-component>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:info|Info,error|Error,warning|Warning,success|Success;required:1\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.app\">App name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.reference\">Reference</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\">URL address</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-component name=\"input\" path=\"?.message\" config=\"required:1;maxlength:200\">Message</ui-component>\n\t\t<div class=\"help\">Supports dynamic arguments in the form <code>{key}</code></div>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS.response\" config=\"text;show\" class=\"error hidden\"></ui-bind>\n\t</footer>\n</body>",
			"tresponse": "<script total>\n\n\texports.id = 'tresponse';\n\texports.name = 'Response';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-bullhorn';\n\texports.version = '1';\n\texports.author = 'Total.js';\n\texports.config = { type: 'auto', code: 200, path: 'response' };\n\texports.inputs = [{ id: 'input', name: 'Response' }];\n\texports.outputs = [{ id: 'output', name: 'Log' }];\n\texports.kind = 'output';\n\n\texports.make = function(instance, config) {\n\n\t\tvar nested = false;\n\n\t\tinstance.message = function($) {\n\t\t\tvar ctrl = $.refs.controller;\n\t\t\tif (ctrl) {\n\n\t\t\t\tif (F.is5)\n\t\t\t\t\tctrl.response.status = config.code;\n\t\t\t\telse\n\t\t\t\t\tctrl.status = config.code;\n\n\t\t\t\tvar value = config.path ? (nested ? U.get(config.path, $.data) : $.data[config.path]) : $.data;\n\n\t\t\t\tswitch (config.type) {\n\t\t\t\t\tcase 'auto':\n\t\t\t\t\t\tif (value instanceof Array && value.length && value[0].error) {\n\t\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\t\tctrl.response.status = 400;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tctrl.status = 400;\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\t} else\n\t\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\tctrl.json(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\tctrl.binary(typeof(value) === 'string' ? Buffer.from(value, 'utf8') : value, config.ctype);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'success':\n\t\t\t\t\t\tctrl.success();\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'error':\n\t\t\t\t\t\tctrl.invalid(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'html':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.html(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/html');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'xml':\n\t\t\t\t\t\tif (F.is5)\n\t\t\t\t\t\t\tctrl.xml(value);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctrl.content(value, 'text/xml');\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'plain':\n\t\t\t\t\t\tctrl.plain(value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'empty':\n\t\t\t\t\tdefault:\n\t\t\t\t\t\tctrl.empty();\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', value);\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tnested = config.path && config.path.includes('.') ? true : false;\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component can respond to an HTTP request.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.type\" config=\"required:1;dirsource:auto|Auto,json|JSON,success|Success,error|Error,empty|Empty response,plain|Plain text,html|HTML,xml|XML,buffer|Buffer\">Type</ui-component>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.type\" config=\"disabled:value === 'auto'\" class=\"m block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.code\" config=\"required:1;type:number;format:\">Status code</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;align:1\">Path for reading value</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-bind path=\"?.type\" config=\"show:value==='buffer'\" class=\"m block hidden\">\n\t\t\t<div class=\"padding bg-smoke radius\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.ctype\" config=\"required:1;placeholder:text/html\">Content type</ui-component>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS header { padding: 6px !important; }\n\t.CLASS header ui-bind { font-family: var(--monospace); color: #FFF; margin-left: 4px; font-size: 12px; }\n\t.CLASS header ui-bind code { border-radius: var(--radius) 0 0 var(--radius); padding: 2px 3px; }\n\t.CLASS header ui-bind span { background-color: gray; border-radius: 0 var(--radius) var(--radius) 0; padding: 2px 3px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<code style=\"background:{{ if value.code >= 400 }}#E73323{{ else }}#4285F4{{ fi }}\">{{ value.code }}</code><span>{{ value.type }}</span>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n</body>",
			"comment": "<script total>\n\texports.id = 'comment';\n\texports.name = 'Comment';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-comment';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { text: 'Comment' };\n\texports.meta = { settingswidth: 1100 };\n\n\texports.make = function(instance, config) {\n\t};\n\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"codemirror\" path=\"?.text\" config=\"type:markdown;parent:auto;minheight:300;margin:65;linenumbers:0\"></ui-component>\n\t\t<div class=\"help\">Supports Markdown</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { max-width: 500px !important; }\n\t.CLASS header button { margin-left: 10px; }\n\t.CLASS footer .markdown { padding: 10px; font-size: 12px; border-top: 0 !important; color: #000; }\n\t.ui-dark .CLASS footer .markdown { color: #F0F0F0; }\n</style>\n\n<readme>\nThis component renders a small markdown comment inside the body.\n</readme>\n\n<body>\n\t<header>\n\t\t<button class=\"button\">Open in window</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><ui-bind path=\"!CONFIG.text\" config=\"html div:value.markdown(value, { element: el })\" class=\"markdown-small selectable\"><div class=\"markdown\"></div></ui-bind></footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\t\tif (!reinit) {\n\t\t\texports.element.on('click', 'button', function() {\n\t\t\t\tFUNC.readme('Comment', exports.config.text || '');\n\t\t\t});\n\t\t}\n\t});\n\n</script>",
			"mergeinputs": "<script total>\n\n\texports.id = 'mergeinputs';\n\texports.name = 'Merge inputs';\n\texports.icon = 'ti ti-filter';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = { inputs: [] };\n\texports.inputs = [];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar compiled = null;\n\t\tvar checktimeout;\n\t\tvar values = {};\n\t\tvar value = {};\n\n\t\tvar checkforce = function() {\n\n\t\t\tchecktimeout = null;\n\n\t\t\tvar skip = false;\n\n\t\t\tfor (var input of config.inputs) {\n\n\t\t\t\tvar val = values[input.id];\n\t\t\t\tif (val === undefined) {\n\t\t\t\t\tif (input.required) {\n\t\t\t\t\t\tskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (input.assign)\n\t\t\t\t\tU.set(value, input.assign, val);\n\t\t\t\telse\n\t\t\t\t\tU.extend(value, val);\n\n\t\t\t}\n\n\t\t\tif (skip)\n\t\t\t\treturn;\n\n\t\t\tfor (var input of config.inputs) {\n\t\t\t\tif (input.clear)\n\t\t\t\t\tdelete values[input.id];\n\t\t\t}\n\n\t\t\tinstance.newmessage(value).send('output');\n\t\t};\n\n\t\tvar check = function() {\n\t\t\tchecktimeout && clearTimeout(checktimeout);\n\t\t\tchecktimeout = setTimeout(checkforce, 100);\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar input = compiled[$.input];\n\t\t\tif (input) {\n\t\t\t\tvalues[$.input] = input.path ? U.get(data, input.path) : data;\n\t\t\t\tcheck();\n\t\t\t}\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar inputs = [];\n\n\t\t\tif (config.clear) {\n\t\t\t\tvalues = {};\n\t\t\t\tdelete config.clear;\n\t\t\t}\n\n\t\t\tcompiled = {};\n\n\t\t\tfor (var item of config.inputs) {\n\t\t\t\tif (item) {\n\t\t\t\t\tcompiled[item.id] = item;\n\t\t\t\t\tinputs.push({ id: item.id, name: item.name });\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (var key in values) {\n\t\t\t\tif (!compiled[key])\n\t\t\t\t\tdelete values[key];\n\t\t\t}\n\n\t\t\tvar prev = JSON.stringify(instance.inputs);\n\t\t\tvar curr = JSON.stringify(inputs);\n\n\t\t\tif (prev !== curr) {\n\t\t\t\tinstance.inputs = inputs;\n\t\t\t\tinstance.save();\n\t\t\t}\n\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component merges multiple inputs into one object.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\">\n\t\t\t<ui-component name=\"input\" path=\"?.clear\" config=\"type:checkbox\" class=\"m\">Clear cache</ui-component>\n\t\t\t<ui-component name=\"listform\" path=\"?.inputs\" config=\"autofocus:1;empty:You do not have defined any inputs;create:tmpmerge.add\">\n\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<div class=\"item\"><i class=\"ti ti-arrow-right\"></i>{{ if required }}<b>{{fi}}{{ name }}{{ if required }}</b>{{fi}}{{ if assign }}<span class=\"fs11 gray ml5\">{{ assign }}</span>{{ fi }}</div>\n\t\t\t\t</script>\n\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1;innerlabel:1;placeholder:Enter a name\" default=\"''\" class=\"m\">Name</ui-component>\n\t\t\t\t\t\t<div class=\"grid-2\">\n\t\t\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"innerlabel:1;placeholder:path.to.property\" default=\"''\">Path</ui-component>\n\t\t\t\t\t\t\t\t<div class=\"help\">A value will be read according to this path</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.assign\" config=\"innerlabel:1;placeholder:path.to.property\" default=\"''\">Assign to the path</ui-component>\n\t\t\t\t\t\t\t\t<div class=\"help\">A value will be assigned according to this path. Otherwise, the message extends cached data.</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<hr class=\"nmt\" />\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.required\" config=\"type:checkbox\" default=\"false\"><b>Required</b></ui-component>\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.clear\" config=\"type:checkbox\" default=\"false\" class=\"m\">Clear value after use</ui-component>\n\t\t\t\t\t\t<ui-component name=\"validate\" path=\"?\" class=\"toolbar\">\n\t\t\t\t\t\t\t<button name=\"submit\"><i class=\"ti ti-file-code\"></i>Save</button>\n\t\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t\t</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</script>\n\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Add input</button></div>\n\t\t\t\t</script>\n\n\t\t\t</ui-component>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS-settings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASS-settings .item i { margin-right: 5px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px; background-color: #777; color: #FFF; }\n\t.CLASS header div i { background-color: rgba(0,0,0,0.2); }\n\n\t.ui-dark .CLASS header div i { background-color: rgba(255,255,255,0.2); }\n</style>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmpmerge;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(callback) {\n\t\t\t\t\tvar obj = {};\n\t\t\t\t\tobj.id = 'i' + Math.random().toString(36).substring(6);\n\t\t\t\t\tobj.name = 'Name';\n\t\t\t\t\tobj.path = '';\n\t\t\t\t\tobj.clear = false;\n\t\t\t\t\tobj.required = false;\n\t\t\t\t\tcallback(obj);\n\t\t\t\t};\n\n\t\t\t\tW.tmpmerge = tmp;\n\t\t\t}\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar inputs = [];\n\t\t\t\tfor (var item of exports.config.inputs)\n\t\t\t\t\tinputs.push({ id: item.id, name: item.name });\n\t\t\t\texports.instance.inputs = inputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\n\t\t};\n\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"dataparser": "<script total>\n\n\texports.id = 'dataparser';\n\texports.name = 'Data parser';\n\texports.icon = 'ti ti-compress';\n\texports.group = 'Transformations';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.config = { type: '1', convert: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar streamer = null;\n\t\tvar reg = /,|;/;\n\n\t\tvar newmessage = function(data) {\n\n\t\t\tif (config.convert) {\n\t\t\t\tif (config.type === '1') {\n\t\t\t\t\tvar m = data.match(reg);\n\t\t\t\t\tdata = data.parseCSV(m ? m[0] : ',');\n\t\t\t\t} else\n\t\t\t\t\tdata = data.parseXML(true);\n\t\t\t}\n\n\t\t\tinstance.newmessage(data).send('output');\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (typeof(data) === 'string')\n\t\t\t\tdata = Buffer.from(data, 'utf8');\n\n\t\t\t$.destroy();\n\t\t\tdata && streamer && streamer(data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tswitch (config.type) {\n\t\t\t\tcase '1':\n\t\t\t\t\tstreamer = U.streamer('\\n', newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tcase '2':\n\t\t\t\t\tstreamer = U.streamer(config.beg, config.end, newmessage);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tstreamer = null;\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component can parse newline data or begin/end phrases in the buffer or string. In addition, it can help with parsing XML or CSV files.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"choose\" path=\"?.type__selector:div\" class=\"iconmenu m\">\n\t\t\t<div data-id=\"1\">\n\t\t\t\t<i class=\"ti ti-arrow-down ti-sync\"></i>\n\t\t\t\t<span>CSV</span>\n\t\t\t</div>\n\t\t\t<div data-id=\"2\">\n\t\t\t\t<i class=\"ti ti-code\"></i>\n\t\t\t\t<span>XML</span>\n\t\t\t</div>\n\t\t</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.convert\" config=\"type:checkbox\">Convert parsed value to the object</ui-component>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<ui-bind path=\"?.type\" config=\"show:value==='2'\" class=\"padding hidden block\">\n\t\t<div class=\"caption m\">\n\t\t\t<label><i class=\"ti ti-cog\"></i>Advanced settings</label>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.beg\" config=\"required:1;placeholder:&lt;PRODUCT&gt;\">Begin phrase</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.end\" config=\"required:1;placeholder:&lt;/PRODUCT&gt;\">End phrase</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</ui-bind>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; text-align: center; }\n\t.CLASS footer ui-bind { font-family: var(--monospace); }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div>{{ if value.type === '1' }}New line{{ else }}<span>{{ value.beg }}</span> - <span>{{ value.end }}</span>{{ fi }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"tcors": "<script total>\n\n\texports.id = 'tcors';\n\texports.name = 'CORS';\n\texports.group = 'Total.js';\n\texports.icon = 'ti ti-html5';\n\texports.version = '3';\n\texports.author = 'Total.js';\n\texports.config = { hostnames: [] };\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\n\t\tvar route = null;\n\n\t\tinstance.close = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\troute = null;\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\troute && route.remove && route.remove();\n\t\t\tvar url = config.hostnames.join(',');\n\t\t\troute = url ? CORS(url) : CORS();\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component enables Cross-Origin Resource Sharing `CORS`, so the web browser will be able to communicate directly with the REST API. The functionality will work only with a defined Proxy endpoint for this Flow.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"textboxlist\" path=\"?.hostnames\" config=\"maxlength:50;placeholder:https://www.totaljs.com\" class=\"m\">Hostnames with a protocol</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"ti ti-html5\" style=\"font-size:50px;color:#BD6B27\"></i>\n\t\t<div class=\"mt10 fs12\">CORS enabled</div>\n\t</div>\n</body>",
			"flowrecorder": "<script total>\n\n\texports.id = 'flowrecorder';\n\texports.name = 'Flow recorder';\n\texports.icon = 'ti ti-history';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Flow';\n\texports.config = {};\n\texports.meta = { singleton: true };\n\n\texports.make = function(instance, config) {\n\n\t\tvar filename = PATH.logs(instance.main.metadata.name.slug() + '-' + NOW.format('yyyyMMdd-HHmmss') + '.log');\n\t\tvar interval = null;\n\n\t\tvar append = function(arr, id, name, input, output, pending, destroyed, duration) {\n\t\t\tarr.push('| ' + id.padRight(15) + ' | ' + name.max(15).padRight(15, ' ') + ' | ' + input.padLeft(15, ' ') + ' | ' + output.padLeft(15, ' ') + ' | ' + pending.padLeft(15, ' ') + ' | ' + destroyed.padLeft(15, ' ') + ' | ' + duration.padLeft(15, ' ') + ' |');\n\t\t};\n\n\t\tvar keyvalue = function(arr, name, value) {\n\t\t\tarr.push('|- ' + name.max(30).padRight(33, ' ') + ': ' + value);\n\t\t};\n\n\t\tvar record = function() {\n\n\t\t\tvar instances = instance.main.meta.flow;\n\t\t\tvar data = [];\n\t\t\tNOW = new Date();\n\n\t\t\tdata.push('==============================');\n\t\t\tdata.push('----------- SNAPSHOT: ' + NOW.format('HH:mm:ss'));\n\t\t\tappend(data, 'I' + 'D', 'NA' + 'ME', 'INPUT', 'OUTPUT', 'PENDING', 'DESTROYED', 'DURATION');\n\n\t\t\tfor (var key in instances) {\n\t\t\t\tvar obj = instances[key];\n\t\t\t\tif (obj.module) {\n\t\t\t\t\tlet stats = obj.stats || { input: 0, pending: 0, destroyed: 0, output: 0, duration: 0 };\n\t\t\t\t\tappend(data, key, obj.module.name || obj.module.id, stats.input, stats.output, stats.pending, stats.destroyed, stats.duration);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tdata.push('');\n\n\t\t\tvar is = false;\n\n\t\t\tfor (var key in instance.main.traffic) {\n\t\t\t\tif (key !== 'priority') {\n\t\t\t\t\tdata.push(key.padRight(30, ' ') + ' : ' + instance.main.traffic[key]);\n\t\t\t\t\tis = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tis && data.push('');\n\n\t\t\tlet total = instance.main.stats;\n\n\t\t\tkeyvalue(data, 'Total messages', total.messages);\n\t\t\tkeyvalue(data, 'Pending messages', total.pending);\n\t\t\tkeyvalue(data, 'Messages/min', total.mm);\n\n\t\t\tlet stats = F.consumption;\n\t\t\tif (stats) {\n\t\t\t\tkeyvalue(data, 'Memory', stats.memory + ' MB');\n\t\t\t\tkeyvalue(data, 'Usage', stats.usage + ' %');\n\t\t\t\tkeyvalue(data, 'Timeouts', stats.timeouts);\n\t\t\t\tkeyvalue(data, 'Errors', stats.errors);\n\t\t\t\tkeyvalue(data, 'Uptime', stats.uptime);\n\t\t\t\tkeyvalue(data, 'Downloaded', stats.download + ' MB');\n\t\t\t\tkeyvalue(data, 'Uploaded', stats.upload + ' MB');\n\t\t\t\tkeyvalue(data, 'Overloads', stats.overload);\n\t\t\t\tkeyvalue(data, 'Requests/min', stats.rm);\n\t\t\t\tkeyvalue(data, 'Files/min', stats.fm);\n\t\t\t\tkeyvalue(data, 'WebSocket/min', stats.wm);\n\t\t\t\tkeyvalue(data, 'Open files/min', stats.om);\n\t\t\t\tkeyvalue(data, 'External req./min', stats.em);\n\t\t\t\tkeyvalue(data, 'DB writes/min', stats.dbwm);\n\t\t\t\tkeyvalue(data, 'DB reads/min', stats.dbrm);\n\t\t\t}\n\n\t\t\tdata.push('');\n\t\t\tdata.push('');\n\n\t\t\tF.Fs.appendFile(filename, data.join('\\n'), NOOP);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinterval && clearInterval(interval);\n\t\t\tinterval = setInterval(record, 30000);\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (interval) {\n\t\t\t\tclearInterval(interval);\n\t\t\t\tinterval = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nAs the FlowStream worker runs, the component records significant information. The component can reveal hidden bugs or performance issues. The component stores data in the `logs/*` directory.\n</readme>\n\n<style>\n\t.CLASS { font-size: 12px; border-color: #E8483F !important; }\n\t.CLASS .content { min-width: auto; padding-right: 10px; background-color: #E8483F; color: #FFF; }\n\t.CLASS figure > div { height: 24px; line-height: 24px; }\n\t.CLASS figure i { width: 16px; height: 16px; font-size: 16px; line-height: 16px; text-align: center; float: left; margin: 4px 5px 0 4px; }\n</style>\n\n<body>\n\t<div>\n\t\t<i class=\"ti ti-clock ti-spin\"></i>Flow <b>recorder</b>\n\t</div>\n</body>",
			"categoryAction": "<script total>\n\texports.id = 'categoryAction';\n\texports.name = 'New Category';\n\texports.group = 'Actions';\n\texports.version = '1.0';\n\texports.icon = 'ti ti-send';\n\texports.author = 'Total.js';\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.config = {\n\t\taction: 'add_category',\n\t\ttaskId: '',\n\t\ttitle: '',\n\t\tdescription: '',\n\t\tstatus: '',\n\t\tpriority: '',\n\t\terror_output: false,\n\t\tautoresponse: true ,\n\t\tpath: 'response'\n\t};\n\texports.outputs = [\n\t\t{ id: 'add_new', name: 'Add new category' },\n\t\t{ id: 'select_exist', name: 'Select exist category'},\n\t\t{ id: 'error', name: 'Error Output', schema: true }\n\t];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n    instance.message = function($){\n\n        var data = $.data;\n        var output = {};\n        var error = null;\n        var parameter = parseInt(data.params.id);\n\n\t\t// Helper function to send success response\n\t\tfunction sendResponse(response) {\n\t\t\tif ($.refs.controller && config.autoresponse) {\n\t\t\t\t$.refs.controller.json(response);\n\t\t\t}\n\t\t\t$.send('add_new', { value: response})\n\t\t}\n\n        // Perform actions based on the selected action type\n\t\tswitch (config.action) {\n\t\t\tcase 'add_category':\n\t\t\t\tconst parameter = data.body.task;\n\t\t\t\tif (parameter instanceof Array) {\n\t\t\t\t\terror = 'Task ID must be a number';\n\t\t\t\t} else {\n\t\t\t\t\toutput = { action: 'getbyid', taskId: parameter, message: `Fetching task by ${parameter} ` };\n\t\t\t\t}\n\t\t\t\t// if (typeof(data.body.description) == 'string') {\n\t\t\t\t\t// output = {\n\t\t\t\t\t\t// message: 'data task banyakk',\n\t\t\t\t\t\t// task: data.body\n\t\t\t\t\t// };\n\t\t\t\t// } else {\n\t\t\t\t\t// output = {\n\t\t\t\t\t\t// message: 'data task cuma 1',\n\t\t\t\t\t\t// task: data.body\n\t\t\t\t\t// }\n\t\t\t\t// }\n\t\t\t\t// output = { message: 'gagal validasi tapi masuk datanya', data: data.body.task }\n\t\t\t\tbreak;\n            case 'update':\n                output = {\n                    action: 'update',\n                    taskId: parameter,\n                    task: data.body\n                };\n                break;\n            case 'delete':\n                output = {\n                    action: 'delete',\n                    taskId: parameter,\n                    message: `Success deleting task with ID ${parameter}`\n                };\n                break;\n            default:\n                error = 'Invalid action selected';\n                break;\n        }\n\n        // If there is an error, send it to both the error output and HTTP response (if applicable)\n        if (error) {\n            if ($.refs.controller) {\n                $.refs.controller.json({ error: error });\n            }\n            instance.send('error', { error: error });\n            return;\n        }\n\n        // Send the output to the flowchart output\n        sendResponse(output);\n    }\n\n    instance.configure = function() {\n        // Setup default action jika tidak ada\n        if (!config.action)\n            config.action = 'add_category';\n    };\n\n    instance.configure();\n};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 10px; }\n\t.CLASS button { width: 100%; height: 30px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.action\" config=\"dirsource:add_category|Add New Category,update|Update Task,delete|Delete Task;required:1\">Action</ui-component>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'update' || value === 'delete'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.taskId\" config=\"type:text;placeholder:Enter Task ID;required:1\">Task ID</ui-component>\n\t\t</ui-bind>\n\n\t\t<ui-bind path=\"?.action\" config=\"show:value === 'add' || value === 'update'\" class=\"block hidden mt10\">\n\t\t\t<ui-component name=\"input\" path=\"?.title\" config=\"type:text;placeholder:Enter Task Title\">Title</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.description\" config=\"type:text;placeholder:Enter Task Description\">Description</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.status\" config=\"type:text;placeholder:Enter Task Status\">Status</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.priority\" config=\"type:text;placeholder:Enter Task Priority\">Priority</ui-component>\n\t\t</ui-bind>\n\n\t\t<!-- Tambahkan setting untuk autoresponse -->\n\t\t<ui-component name=\"checkbox\" path=\"?.autoresponse\" config=\"title:Enable Auto HTTP Response\">Auto HTTP Response</ui-component>\n\t</div>\n</settings>\n\n<readme>\nThis component performs actions on tasks, such as adding, updating, and deleting, with error handling and validation. Now supports auto HTTP response when enabled.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n</body>",
			"vs": "<script total>\n\n\texports.id = 'vs';\n\texports.name = 'Variable symbol';\n\texports.icon = 'ti ti-plus';\n\texports.author = 'Peter Å irka / Total.js';\n\texports.version = '1';\n\texports.group = 'Generators';\n\texports.config = { format: 'yyyy####', path: '', autoreset: 'yyyy', start: 0, reset: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n\t\tvar filename = PATH.databases('vs_' + instance.id) + '.json';\n\t\tvar meta = { index: 0, prev: 0 };\n\t\tvar timeout;\n\n\t\tvar save = function() {\n\t\t\ttimeout = null;\n\t\t\tF.Fs.writeFile(filename, JSON.stringify(meta), NOOP);\n\t\t};\n\n\t\tF.Fs.readFile(filename, 'utf8', function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar tmp = response.parseJSON();\n\t\t\t\tif (tmp && tmp.index)\n\t\t\t\t\tmeta = tmp;\n\t\t\t}\n\t\t});\n\n\t\tinstance.destroy = function() {\n\t\t\tF.Fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (config.reset) {\n\t\t\t\tmeta.index = config.start || 0;\n\t\t\t\tconfig.reset = false;\n\t\t\t\tinstance.status('');\n\t\t\t}\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar curr = NOW.format(config.autoreset);\n\n\t\t\tif (!meta.index && config.start)\n\t\t\t\tmeta.index = config.start;\n\n\t\t\tif (meta.prev !== curr) {\n\t\t\t\tmeta.index = 0;\n\t\t\t\tmeta.prev = curr;\n\t\t\t}\n\n\t\t\tvar number = config.format.replace(/y+|m+|d+/g, function(text) {\n\t\t\t\tvar diff = text.length % 2;\n\t\t\t\tif (diff) {\n\t\t\t\t\tfor (let i = 0; i < diff; i++)\n\t\t\t\t\t\ttext += text[0];\n\t\t\t\t}\n\t\t\t\treturn NOW.format(text.toUpperCase());\n\t\t\t}).replace(/#+/g, function(text) {\n\t\t\t\tmeta.index++;\n\t\t\t\treturn meta.index.padLeft(text.length, '0');\n\t\t\t});\n\n\t\t\tinstance.status(number, 100);\n\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(save, 500);\n\n\t\t\tif (config.path) {\n\t\t\t\tif (config.path.indexOf('.') === -1)\n\t\t\t\t\tdata[config.path] = number;\n\t\t\t\telse\n\t\t\t\t\tU.set(data, config.path, number);\n\t\t\t} else\n\t\t\t\tdata = number;\n\n\t\t\t$.send('output', data);\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nThe component will generate a variable symbol according to a custom format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"grid-4\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.format\" config=\"required:1\">Format</ui-component>\n\t\t\t\t<div class=\"help\"><code>y</code> year, <code>m</code> month, <code>#</code> indexer</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\">Path</ui-component>\n\t\t\t\t<div class=\"help\">Where to assign a value?</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.autoreset\" config=\"dirsource:yyyy|Yearly,MM|Monthly,dd|Daily\">Auto-reset</ui-component>\n\t\t\t\t<div class=\"help\">Auto-reset for indexer</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.start\" config=\"type:number;format:\" default=\"0\">Start from</ui-component>\n\t\t\t\t<div class=\"help\">Start index</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.reset\" config=\"type:checkbox\">Reset indexer</ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer class=\"selectable\">Last: <ui-bind path=\"STATUS\" config=\"text;empty\"></ui-bind></footer>\n</body>",
			"ccraxdd35c": "<script total>\n\n\texports.name = 'PostgreSQL Connection from .env';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Databases';\n\texports.config = { envFile: '.env', name: '', pooling: 0, database: 'querybuilderpg' };\n\n\tconst dotenv = require('dotenv');\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\tconst envPath = PATH.root(config.envFile);\n\t\t\tconst envConfig = dotenv.config({ path: envPath });\n\n\t\t\tif (envConfig.error) {\n\t\t\t\tconsole.error('Failed to read .env file:', envConfig.error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst connectionString = `postgres://${envConfig.parsed.DB_USER}:${envConfig.parsed.DB_PASSWORD}` +\n\t\t\t\t`@${envConfig.parsed.DB_HOST}:${envConfig.parsed.DB_PORT}/${envConfig.parsed.DB_NAME}`;\n\n\t\t\tNPMINSTALL(config.database, function() {\n\t\t\t\trequire(config.database).init(config.name || 'default', connectionString, config.pooling || null);\n\t\t\t\tconsole.log('Sukses koneksiin ke PostgreSQL lewat .env');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component reads the PostgreSQL connection details from a specified `.env` file in the root directory and uses them to establish a connection to a PostgreSQL database via QueryBuilder. The database library is automatically installed if not already present.\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"$ICON\" style=\"font-size:50px;color:#5C1DC4\"></i>\n\t\t<div class=\"fs12 mt10\">$NAME</div>\n\t</div>\n</body>\n",
			"tesssss": "<script total>\n\n\texports.id = 'tesssss';\n\texports.name = 'Decision tesss';\n\texports.group = 'Actions';\n\texports.icon = 'ti ti-flow';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { name: 'Model', path: '', schema: [], rewrite: true };\n\texports.inputs = [{ id: 'input', name: 'Data' }, { id: 'partial', name: 'Partial data' }];\n\texports.outputs = [];\n\texports.meta = { settingswidth: 1200 };\n\n\t// exports.npm = ['npm_module_1', 'npm_module_2@version'];\n\t// exports.meta = { readonly: false, singleton: false, hidden: false };\n\n\texports.make = function(instance, config) {\n\n\t\t// instance.main.variables {Object}\n\t\t// instance.main.variables2 {Object}\n\t\t// instance.save();\n\t\t// instance.replace(str); // replaces {variable_name} for values from \"variables\" and \"variables2\"\n\t\t// instance.status(obj, [refresh_delay_in_ms]);\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\tif (eval(item.if)) {\n\t\t\t\t\t$.send('output' + i, data);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$.send('error', data);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\ttry {\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data,data=$.data,refs=$.refs,repo=$.repo;' + builder.join('') + '$.send(\\'error\\');');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t\tinstance.status('');\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\t// this instance is closed\n\t\t};\n\n\t\tinstance.vary = function(type) {\n\t\t\t// @type {String} variables|variables2|secrets\n\t\t\t// FlowStream variables are changed\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component prepares incoming data according to the defined schema. Output is prepared model or Error.\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Model name</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmprestmodel.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Fields</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\"{{ if m.required }} class=\"isrequired\"{{ fi }}>\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"up\" title=\"Move up\"><i class=\"ti ti-arrow-up\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.move\" data-type=\"down\" title=\"Move down\"><i class=\"ti ti-arrow-down\"></i></span>\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmprestmodel.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"required exec{{ if m.required }} is{{ fi }}\" data-exec=\"tmprestmodel.required\">required</div>\n\t\t\t\t\t\t<div class=\"array exec{{ if m.array }} is{{ fi }}\" data-exec=\"tmprestmodel.array\">Array</div>\n\t\t\t\t\t\t<div class=\"type hellip exec monospace\" data-exec=\"tmprestmodel.type\">{{ m.type | restmodeltype | raw }}</div>\n\t\t\t\t\t\t<div class=\"default\">\n\t\t\t\t\t\t\t<div class=\"edit monospace b\" data-edit=\"exec:tmprestmodel.default;selectall:1\">{{ m.default | empty }}</div>\n\t\t\t\t\t\t\t<div class=\"help nmt\">Default value</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"name\">\n\t\t\t\t\t\t\t<div class=\"hellip\"><span class=\"edit label\" data-edit=\"exec:tmprestmodel.label;required:1\">{{ m.label }}</span><span class=\"monospace edit key\" data-edit=\"exec:tmprestmodel.name;required:1\">{{ m.name }}</span></div>\n\t\t\t\t\t\t\t<div class=\"error\">Error message: <span class=\"edit hellip\" data-edit=\"exec:tmprestmodel.error;required:1\">{{ m.error | empty('Invalid value') }}</span></div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"message message-alert\">If you want to declare a nested object, then you can create another model and link it with this model.</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS { min-width: 220px; }\n\t.CLASS footer { padding: 10px; font-size: 11px; }\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 40px; border-top: 1px solid #E0E0E0; line-height: 39px; font-size: 12px; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 40px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .name { margin-right: 350px; padding: 6px 8px 0; line-height: 14px; }\n\t.CLASS-settings figure .name .label { background-color: #000; outline: 0; padding: 2px 3px; color: #FFF; }\n\t.CLASS-settings figure .name .key { font-weight: bold; margin-left: 5px; outline: 0; }\n\t.CLASS-settings figure .name > div:first-child { outline: 0; }\n\t.CLASS-settings figure .error { font-size: 11px; color: #888; }\n\t.CLASS-settings figure .error span { color: #B9261A; outline: 0; min-width: 150px; }\n\t.CLASS-settings figure .default { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; line-height: 16px; padding-top: 4px; height: 40px; }\n\t.CLASS-settings figure .type { float: right; width: 180px; border-left: 1px solid #E0E0E0; padding: 0 8px; cursor: pointer; background-color: rgba(0,0,0,0.03); }\n\t.CLASS-settings figure .required { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through; }\n\t.CLASS-settings figure .required.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .array { float: right; width: 70px; padding: 0 8px; border-left: 1px solid #E0E0E0; text-align: center; font-size: 11px; cursor: pointer; text-decoration: line-through;}\n\t.CLASS-settings figure .array.is { font-weight: bold; text-decoration: none; color: #EC8632; }\n\t.CLASS-settings figure .controls { float: right; width: 70px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.3); }\n\t.CLASS-settings figure.ismoved { background-color: rgba(92,29,196,0.3) !important; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure.isrequired { background-color: rgba(255,254,209,0.1); }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #363636; }\n\t.ui-dark .CLASS-settings figure .default { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .type { border-left-color: #404040; background-color: rgba(100,100,100,0.1); }\n\t.ui-dark .CLASS-settings figure .required { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .array { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n\t.ui-dark .CLASS-settings figure .name .label { background-color: #FFF; color: #000; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i><b>Model:</b> <ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind>\n\t</header>\n\t<footer>\n\t\t<span class=\"exec link\" data-exec=\"/copy\"><i class=\"ti ti-copy mr5\"></i>Copy fields as Markdown</span>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar tmp = W.tmprestmodel;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tscope.push('schema', { id: Math.random().toString(36).substring(4), label: 'Name', name: 'propname', type: 'string', required: true, array: false });\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.type = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.types;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.type = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.name = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.name = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.label = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.trim();\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.label = opt.value;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.move = function(el) {\n\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar container = el.closest('figure');\n\t\t\t\t\tvar schema = scope.get().schema;\n\t\t\t\t\tvar index = schema.findIndex('id', id);\n\t\t\t\t\tvar is = false;\n\t\t\t\t\tvar isup = el.attrd('type') === 'up';\n\n\t\t\t\t\tif (isup) {\n\t\t\t\t\t\tif (index > 0) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index - 1];\n\t\t\t\t\t\t\tschema[index - 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (index <= schema.length - 2) {\n\t\t\t\t\t\t\tvar a = schema[index];\n\t\t\t\t\t\t\tschema[index] = schema[index + 1];\n\t\t\t\t\t\t\tschema[index + 1] = a;\n\t\t\t\t\t\t\tis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (is) {\n\t\t\t\t\t\tNODEMOVE(container, isup);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tcontainer.aclass('ismoved').rclass('ismoved', 500);\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\ttmp.default = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\n\t\t\t\t\t\tif (opt.value === '---')\n\t\t\t\t\t\t\tdelete opt.value;\n\n\t\t\t\t\t\titem.default = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.error = function(opt, next) {\n\t\t\t\t\tif (opt.value) {\n\t\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\titem.error = opt.value || undefined;\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t\tnext(true);\n\t\t\t\t\t} else\n\t\t\t\t\t\tnext(opt.html);\n\t\t\t\t};\n\n\t\t\t\ttmp.required = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.required = !item.required;\n\t\t\t\t\tel.tclass('is', item.required);\n\t\t\t\t\tel.closest('figure').tclass('isrequired', item.required);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.array = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem.array = !item.array;\n\t\t\t\t\tel.tclass('is', item.array);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\tThelpers.restmodeltype = function(val) {\n\t\t\t\t\treturn tmp.types.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmprestmodel = tmp;\n\t\t\t}\n\n\t\t\ttmp.types = [];\n\t\t\ttmp.types.push({ id: 'string', name: 'String' });\n\t\t\ttmp.types.push({ id: 'number', name: 'Number' });\n\t\t\ttmp.types.push({ id: 'email', name: 'Email address' });\n\t\t\ttmp.types.push({ id: 'phone', name: 'Phone number' });\n\t\t\ttmp.types.push({ id: 'boolean', name: 'Boolean' });\n\t\t\ttmp.types.push({ id: 'zip', name: 'ZIP' });\n\t\t\ttmp.types.push({ id: 'date', name: 'Date' });\n\t\t\ttmp.types.push({ id: 'float', name: 'Float' });\n\t\t\ttmp.types.push({ id: 'integer', name: 'Integer' });\n\t\t\ttmp.types.push({ id: 'tinyint', name: 'Tinyint' });\n\t\t\ttmp.types.push({ id: 'smallint', name: 'Smallint' });\n\t\t\ttmp.types.push({ id: 'upper', name: 'String - Upper case' });\n\t\t\ttmp.types.push({ id: 'lower', name: 'String - Lower case' });\n\t\t\ttmp.types.push({ id: 'slug', name: 'String - Slug' });\n\t\t\ttmp.types.push({ id: 'capitalize', name: 'String - Capitalize' });\n\t\t\ttmp.types.push({ id: 'uid', name: 'UI' + 'D' });\n\t\t\ttmp.types.push({ id: 'guid', name: 'GUI' + 'D' });\n\t\t\ttmp.types.push({ id: 'object', name: 'Object' });\n\t\t\ttmp.types.push({ id: 'json', name: 'JSON' });\n\t\t\ttmp.types.push({ id: 'base64', name: 'Base64' });\n\n\t\t\tfor (var key in flow.data) {\n\t\t\t\tvar m = flow.data[key];\n\t\t\t\tif (m.Component && m.Component.name === 'Model')\n\t\t\t\t\ttmp.types.push({ id: m.id, name: 'Model: <b>' + m.config.name.encode() + '</b>' });\n\t\t\t}\n\n\t\t};\n\n\t\texports.copy = function(el) {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar builder = [];\n\n\t\t\tbuilder.push('__Model: ' + config.name + '__:');\n\t\t\tbuilder.push('');\n\n\t\t\tfor (var m of config.schema) {\n\n\t\t\t\tvar type = m.type;\n\t\t\t\tif (type.charAt(0) === 'i' && type !== 'integer') {\n\t\t\t\t\tvar tmp = flow.data[type];\n\t\t\t\t\tif (tmp)\n\t\t\t\t\t\ttype = tmp.config.name;\n\t\t\t\t\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tbuilder.push('- {0} `{1} {{2}}`'.format(m.label, m.name, type) + (m.array ? ' array' : '') + (m.required ? ' __required__' : ''));\n\t\t\t}\n\n\t\t\tSETTER('clipboard/copy', builder.join('\\n'));\n\t\t\tSETTER('notify/success', 'The schema has been copied into the clipboard');\n\t\t};\n\n\t});\n\n</script>",
			"decision": "<script total>\n\n  exports.id = 'decision'; // Consistent naming with Salesforce Flow\n  exports.name = 'Decision';\n  exports.group = 'Common';\n  exports.icon = 'ti ti-flag-alt'; // Use the decision icon\n  exports.author = 'Total.js';\n  exports.version = '1.4'; // Updated version\n\n  exports.config = {\n    name: 'Decision Name',\n    conditions: [], // Array to hold decision conditions\n    operators: [ // List of supported operators\n      { value: 'equals', label: 'Equals' },\n      { value: 'notEquals', label: 'Does Not Equal' },\n      { value: 'greaterThan', label: 'Greater Than' },\n      { value: 'lessThan', label: 'Less Than' },\n      { value: 'contains', label: 'Contains' },\n      { value: 'isNull', label: 'Is Null' },\n      // Add more operators as needed\n    ],\n    values: [], // Values to compare with\n    table: '', // Table to check (if data source is a table)\n  };\n\n  exports.inputs = [{ id: 'input', name: 'Input' }]; // Input data\n\n  exports.make = function(instance, config) {\n\n    var fn = null;\n\n    // Function to handle the decision logic\n    function handleDecision(data) {\n      var conditionMet = false;\n\n      for (var i = 0; i < config.conditions.length; i++) {\n        var condition = config.conditions[i];\n        var fieldValue = data[condition.field]; // Get field value from data\n        var operator = config.operators.find(op => op.value === condition.operator); // Find operator by value\n        var value = condition.values[0]; // Assuming a single value for simplicity\n\n        if (operator) {\n          switch (operator.value) {\n            case 'equals':\n              conditionMet = fieldValue === value;\n              break;\n            case 'notEquals':\n              conditionMet = fieldValue !== value;\n              break;\n            // ... handle other operators ...\n            default:\n              conditionMet = false;\n              break;\n          }\n        } else {\n          console.warn('Invalid operator:', condition.operator);\n        }\n\n        if (conditionMet) {\n          $.send('output' + i); // Use dynamic output name based on condition index\n          return;\n        }\n      }\n\n      $.send('default'); // Send to default output if no condition is met\n    }\n\n    instance.message = function($) {\n      if (fn) {\n        try {\n          fn(instance, $); // Pass the input data to decision handler\n        } catch (e) {\n          console.error('Error executing decision function:', e);\n          $.destroy();\n          instance.status('Error executing decision function: ' + e);\n        }\n      } else {\n        console.warn('No decision function defined.');\n        $.destroy();\n      }\n    };\n\n    instance.configure = async function() {\n      var old = JSON.stringify(instance.outputs || []);\n\n      var outputs = [];\n      for (var i = 0; i < config.conditions.length; i++) {\n        outputs.push({ id: 'output' + i, name: config.conditions[i].name }); // Use condition name for output name\n      }\n      outputs.push({ id: 'default', name: 'Default' });\n\n      try {\n        fn = new Function('instance', '$', 'var value=$.data,data=$.data,refs=$.refs,repo=$.repo;' + `if (true) { $.send('default'); }`); // Initial function to avoid errors\n\n        if (JSON.stringify(outputs) !== old) {\n          instance.outputs = outputs;\n          instance.save();\n        }\n\n        instance.status('');\n\n      } catch (e) {\n        instance.status(e + '');\n      }\n    };\n\n    // Initial configuration\n    setTimeout(instance => instance && instance.configure(), 1500, instance);\n  };\n\n</script>\n\n<settings>\n    <div class=\"padding CLASS-settings\">\n        <div class=\"padding bg-smoke header-input\">\n            <ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\" onfig=\"innerlabel=1\">Decision Name</ui-component>\n            <ui-component name=\"input\" path=\"?.componentDesc\">Description</ui-component>\n\n            <ui-component name=\"listform\" path=\"?.conditions\" config=\"autofocus=1;empty=Define conditions for decision-making\">\n                <label>Conditions</label>\n                <script type=\"text/html\">\n                    <div class=\"item\"><i class=\"ti ti-arrow-right\"></i>{{ name }}</div>\n                </script>\n\n                <script type=\"text/html\">\n                    <div class=\"padding\">\n                        <ui-component name=\"input\" path=\"?.name\" config=\"required=1;innerlabel=1\" class=\"m\">Condition Name</ui-component>\n\n                        <ui-component name=\"input\" path=\"?.field\" config=\"required=1;innerlabel=1;placeholder=Field in Data\" class=\"m\">Field</ui-component>\n\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.operator\" config=\"placeholder:Choose an operator;dirsource:1|Equal,2|Does Not Equal,3|Contain,4|Is Null\" class=\"m\">Operator</ui-component>\n\n                        <ui-component name=\"inputtags\" path=\"?.values\" config=\"innerlabel=true\">Value</ui-component>\n\n                        <ui-component name=\"input\" path=\"?.desc\" config=\"innerlabel=1;monospace=1\" placeholder=\"e.g., field === 'approved'\">Condition Logic</ui-component>\n\n                        <div class=\"help m\"><i class=\"ti ti-exclamation-triangle\"></i><code>field</code> refers to the field in the data. Example: <code>field === 'approved'</code></div>\n\n                        <ui-component name=\"validate\" path=\"?\" class=\"toolbar\">\n                            <button name=\"submit\"><i class=\"ti ti-file-code\"></i>Save</button>\n                            <button name=\"remove\">Remove</button>\n                            <button name=\"cancel\">Cancel</button>\n                        </ui-component>\n                    </div>\n                </script>\n\n                <script type=\"text/html\">\n                    <div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Create condition</button></div>\n                </script>\n            </ui-component>\n        </div>\n    </div>\n</settings>\n\n<body>\n   <header>\n        <i class=\"ICON\"></i><b>Decision:</b> <ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind>\n    </header>\n    <footer>\n        <ui-bind path=\"STATUS\" config=\"text;show\" class=\"red\"></ui-bind>\n    </footer>\n</body>\n\n<script>\n    TOUCH(function(exports, reinit) {\n        exports.configure = function() {\n            var changes = exports.instance.changes;\n            if (changes && changes.newbie) {\n                var outputs = [];\n                var items = exports.config.conditions;\n                for (var i = 0; i < items.length; i++)\n                    outputs.push({ id: 'output' + i, name: items[i].name });\n                outputs.push({ id: 'default', name: 'Default' });\n                exports.instance.outputs = outputs;\n                UPD('flow.data');\n            }\n        };\n    });\n</script>\n",
			"newDecision": "<script total>\n    exports.id = 'newDecision';\n    exports.name = 'Decision';\n    exports.group = 'Common';\n    exports.icon = 'ti ti-flag-alt';\n    exports.author = 'Total.js';\n    exports.version = '1.2';\n    exports.config = {\n        name: 'Decision Name',\n        conditions: [],\n\t\toperator: '',\n\t\tvalues: [],\n        table: '',\n\t\tdesc: '',\n    };\n    exports.inputs = [{ id: 'input', name: 'Input' }];\n\n    exports.make = function(instance, config) {\n        var fn = null;\n\n        async function getTableNames() {\n            try {\n                var queryBuilder = DATA.find('pg_catalog.pg_tables').fields('tablename').where('schemaname', '=', 'public');\n                var response = await queryBuilder.promise();\n                if (response && response.length) {\n                    return response.map(table => ({ name: table.tablename, id: table.tablename }));\n                }\n                return [];\n            } catch (error) {\n                console.error('Error fetching table names:', error);\n                return [];\n            }\n        }\n\n        instance.message = function($) {\n            // if (fn) {\n//                 try {\n//                     fn(instance, $);\n//                 } catch (e) {\n//                     console.error('Error executing decision function:', e);\n//                     $.destroy();\n//                     instance.status('Error executing decision function: ' + e);\n//                 }\n//             } else {\n//                 console.warn('No decision function defined.');\n//                 $.destroy();\n//             }\n        }\n\n        instance.configure = async function() {\n            var old = JSON.stringify(instance.outputs || []);\n            var tableNames = await getTableNames();\n\n            if (!tableNames.length) {\n                instance.status('No tables found.');\n                return;\n            }\n\n            const formattedData = tableNames.map(item => `${item.id.toLowerCase()}|${item.name}`).join(',');\n\n\t\t\tconsole.log(formattedData);\n\t\t\tconsole.log(tableNames);\n\t\t\tconsole.log(instance.config.operator);\n\t\t\tconsole.log(instance.config.values);\n\n            instance.config.datasource = JSON.stringify(tableNames);\n            instance.config.formatData = formattedData;\n            instance.save();\n\n            var builder = [];\n            var outputs = [];\n\n            for (var i = 0; i < config.conditions.length; i++) {\n                var item = config.conditions[i];\n                outputs.push({ id: 'output' + i, name: item.name });\n                builder.push(`if(${item.desc}){ $.send('output${i}'); return; }`);\n            }\n\n            outputs.push({ id: 'default', name: 'Default' }); // Default outcome\n\n            try {\n                fn = new Function('instance', '$', 'var value=$.data, data=$.data, refs=$.refs, repo=$.repo;' + builder.join('') + `$.send('default');`);\n\n                if (JSON.stringify(outputs) !== old) {\n                    instance.outputs = outputs;\n                    instance.save();\n                }\n\n                instance.status('Tables Loaded: ' + tableNames.length);\n                instance.save();  // Trigger UI update\n\n            } catch (e) {\n                instance.status('Error creating function: ' + e);\n            }\n        };\n\n        // Initial configuration\n        setTimeout(instance => instance && instance.configure(), 1500, instance);\n    };\n</script>\n\n<readme>\nThe component sorts data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n    .CLASS footer > ui-bind { padding: 10px; font-size: 12px; }\n    .CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n    .CLASS-settings .item { padding: 8px 10px; font-size: 12px; }\n    .CLASS-settings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n    <div class=\"padding CLASS-settings\">\n        <div class=\"padding bg-smoke header-input\">\n            <ui-component name=\"input\" path=\"?.name\" config=\"required:1\" class=\"m\">Decision Name</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.desc\" config=\"required:1\">Resource</ui-component>\n\t\t\t<script>\n\t\t\t\tconst { Pool } = require('pg');\n\t\t\t\tvar tableNames;\n\n\t\t\t\tasync function getTableNames(connectionString) {\n\t\t\t\t  const client = new Pool({ connectionString });\n\n\t\t\t\t  try {\n\t\t\t\t\tawait client.connect();\n\n\t\t\t\t\tconst query = `\n\t\t\t\t\t  SELECT tablename\n\t\t\t\t\t  FROM pg_catalog.pg_tables\n\t\t\t\t\t  WHERE schemaname = $1\n\t\t\t\t\t`;\n\n\t\t\t\t\tconst result = await client.query(query, ['public']);\n\n\t\t\t\t\tif (result.rows && result.rows.length) {\n\t\t\t\t\t  return result.rows.map(table => ({ name: table.tablename, id: table.tablename }));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn [];\n\t\t\t\t  } catch (error) {\n\t\t\t\t\tconsole.error('Error fetching table names:', error);\n\t\t\t\t\treturn [];\n\t\t\t\t  } finally {\n\t\t\t\t\tawait client.end();\n\t\t\t\t  }\n\t\t\t\t}\n\n\t\t\t\tconst connectionString = 'postgres://postgres:postgresqljancok@localhost:5432/user_management';\n\t\t\t\ttableNames = await getTableNames(connectionString);\n\n\t\t\t\tvar datasource = tableNames;\n\n\t\t\t\tvar form = {};\n\t\t\t</script>\n            <div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n            <ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n                <hr />\n                <ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n            </ui-bind>\n        </div>\n\n        <ui-component name=\"listform\" path=\"?.conditions\" config=\"autofocus=1;empty=Define conditions for decision-making\">\n            <label>Outcome Orders</label>\n            <script type=\"text/html\">\n                <div class=\"item\"><i class=\"ti ti-arrow-right\"></i>{{ name }}</div>\n            </script>\n\n            <script type=\"text/html\">\n                <div class=\"padding\">\n                    <ui-component name=\"input\" path=\"?.name\" config=\"required=1;innerlabel=1\" class=\"m\">Outcome Name</ui-component>\n\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.datasource\" config=\"type:text;placeholder:Optional API or DB Source URL\">Data Source</ui-component>\n\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.operator\" config=\"placeholder:Choose a framework;dirsource:1|Equal,2|Does Not Equal,3|Contain,4|Is Null\" class=\"m\">Operator</ui-component>\n\n\t\t\t\t\t<ui-component name=\"inputtags\" path=\"?.values\" config=\"innerlabel:true\">Value</ui-component>\n\n                    <ui-component name=\"input\" path=\"?.desc\" config=\"required=1;innerlabel=1;monospace=1\" placeholder=\"e.g., value.status == 'approved'\">Condition</ui-component>\n                    <div class=\"help m\"><i class=\"ti ti-exclamation-triangle\"></i><code>value</code> refers to the message data. Example: <code>value.status == 'approved'</code></div>\n                    <ui-component name=\"validate\" path=\"?\" class=\"toolbar\">\n                        <button name=\"submit\"><i class=\"ti ti-file-code\"></i>Save</button>\n                        <button name=\"remove\">Remove</button>\n                        <button name=\"cancel\">Cancel</button>\n                    </ui-component>\n                </div>\n            </script>\n\n            <script type=\"text/html\">\n                <div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Create condition</button></div>\n            </script>\n\t\t\t<script>\n\t\t\t\tasync function getTableNames() {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tconst result = await client.query(\"SELECT tablename FROM pg_catalog.pg_tables WHERE schemaname = 'public'\");\n\t\t\t\t\t\treturn result.rows;\n\t\t\t\t\t} catch (error) {\n\t\t\t\t\t\tconsole.error('Error fetching table names:', error);\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tvar tableNames = await getTableNames();\n\n\t\t\t\tvar frameworks = [{ id: 0, name: 'Nothing', template: '<b>{{ name }}</b>' }, { id: 1, name: 'jComponent' }, { id: 2, name: 'Angular.js' }, { id: 3, name: 'React' }];\n\t\t\t\tvar cities = ['Slovakia', 'Poland', 'Hungary', 'Germany'];\n\t\t\t\tvar form = {};\n\t\t\t\tform.age = 30;\n\t\t\t</script>\n        </ui-component>\n    </div>\n</settings>\n\n<body>\n   <header>\n        <i class=\"ICON\"></i><b>Decision:</b> <ui-bind path=\"CONFIG.name\" config=\"text\"></ui-bind>\n    </header>\n    <footer>\n        <ui-bind path=\"STATUS\" config=\"text;show\" class=\"red\"></ui-bind>\n    </footer>\n</body>\n\n<script>\n    TOUCH(function(exports, reinit) {\n        exports.configure = function() {\n            var changes = exports.instance.changes;\n            if (changes && changes.newbie) {\n                var outputs = [];\n                var items = exports.config.conditions;\n                for (var i = 0; i < items.length; i++)\n                    outputs.push({ id: 'output' + i, name: items[i].name });\n                outputs.push({ id: 'default', name: 'Default' });\n                exports.instance.outputs = outputs;\n                UPD('flow.data');\n            }\n        };\n    });\n</script>\n",
			"postgresql": "<script total>\n\n\texports.id = 'postgresql';\n\texports.name = 'PostgreSQL';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['pg'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst { Pool } = require('pg')\n\t\tvar PG;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!PG || !PG.pool)\n\t\t\t\treturn $.send('output', { error: 'Postgre connection not configured' });\n\n\t\t\tPG.pool.query(data.query, (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\t\t\t\t\t\n\t\t\t\tvar { command, rows, rowCount } = response;\n\t\t\t\t$.send('output', { command, rows, rowCount });\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (PG && PG.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tPG = exports.POOLS[config.connection];\n\t\t\t\tPG.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = new Pool({ connectionString: config.connection });\n\t\t\tPG = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.on('error', (err, client) => {\n\t\t\t\tconsole.log('[PG] Unexpected error on idle client', err);\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (PG) {\n\t\t\t\tPG.count--;\n\t\t\t\tif (PG.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tPG.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tPG = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nPostgreSQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\nOutput:\n```javascript\n{\n\tcommand: 'INSERT', // SELECT, etc.\n\trows: [], // \n\trowCount: 1\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.connection\" config=\"required:1\">Connection string</ui-component>\n\t\t\t\t<div class=\"help\">e.g.: postgresql://user:password@localhost:5432/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.error\" config=\"text\" class=\"red\"></ui-bind>\n\t</footer>\n</body>",
			"influxdb": "<script total>\n\n\texports.id = 'influxdb';\n\texports.name = 'Influxdb';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Martin Smola';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['@influxdata/influxdb-client'];\n\texports.DBS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst { InfluxDB, Point } = require('@influxdata/influxdb-client');\n\n\t\tvar INFLUX;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!INFLUX)\n\t\t\t\treturn $.send('output', { error: 'InfluxDB connection not configured' });\n\n            if (config.api === 'write') {\n\n                const point = new Point(data.measurement);\n                config.tags.forEach(t => {\n                    point.tag(t, data.tags[t]);\n                });\n\n                for (const field in config.fields) {\n                    switch(config.fields[field]) {\n                        case 'boolean':\n                            point.booleanField(field, data.fields[field]);\n                            break;\n                        case 'float':\n                            point.floatField(field, data.fields[field]);\n                            break;\n                        case 'int':\n                            point.intField(field, data.fields[field]);\n                            break;\n                        case 'string':\n                            point.stringField(field, data.fields[field]);\n                            break;\n                    }\n                }\n\n                const writeApi = INFLUX.client.getWriteApi(config.org, config.bucket);\n                writeApi.writePoint(point);\n                writeApi\n                    .close()\n                    .then(() => {\n                        console.log('FINISHED')\n                    })\n                    .catch(e => {\n                        console.error(e)\n                        console.log('Finished ERROR')\n                    })\n\n            } else if (config.api === 'query') {\n\n                const queryApi = INFLUX.client.getQueryApi(config.org);\n\n                const rows = [];\n                queryApi.queryRows(data.query, {\n                    next(row, tableMeta) {\n                        const o = tableMeta.toObject(row);\n                        rows.push(o);\n                    },\n                    error(error) {\n                        console.error(error);\n                        instance.throw('InfluDB:Query failed:' + error);\n                    },\n                    complete() {\n                        instance.send('output', rows);\n                    },\n                });\n\n            } else\n                instance.throw({ error: 'Unknown action:' + config.api });\n\t\t};\n\n\t\tinstance.close = function(callback) {\n\t\t\tif (INFLUX) {\n\t\t\t\tINFLUX.count--;\n\t\t\t\tif (INFLUX.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tdelete exports.DBS[config.connection];\n\t\t\t\t}\n\t\t\t\tINFLUX = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\n            const id = `${config.url}-${config.token}`;\n\n\t\t\t// same connection, ignore\n\t\t\tif (INFLUX && INFLUX.id === id)\n\t\t\t\treturn;\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.DBS[id]) {\n\t\t\t\tINFLUX = exports.DBS[id];\n\t\t\t\tINFLUX.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n            const { url, token } = config;\n            const client = new InfluxDB({ url, token });\n\n\t\t\tINFLUX = exports.DBS[id] = {\n\t\t\t\tclient,\n\t\t\t\tcount: 1,\n\t\t\t\tid\n\t\t\t};\n\n\t\t\tinstance.status({ error: '', msg: '' });\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\n## Input\n\nExpected data for \"Write data\":\n\n```js\n{\n    measurement: '<measurement-name>',\n\tfields: {\n        fieldname: <fieldvalue>,\n    },\n    tags: {\n        tagname: '<tagvalue>'\n    }\n}\n```\n\nExpected data for \"Execute a Flux query\":\n\n```js\n{\n    query: 'from(bucket: \"Some Bucket\") |> range(start: -1h)'\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"placeholder:https\\://example.com;required:1\" class=\"m\">Server url</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.token\" config=\"required:1\" class=\"m\">Token</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.org\" config=\"required:1\" class=\"m\">Organization</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.bucket\" config=\"required:1\" class=\"m\">Bucket</ui-component>\n                <hr>\n\t\t\t\t<ui-component name=\"input\" path=\"?.api\" config=\"dirsource:write|Write data,query|Execute a Flux query\" default=\"'write'\" class=\"m\">Action</ui-component>\n\t\t\t\t<ui-bind path=\"?.api\" config=\"show:value==='write'\">\n\t\t\t\t\t<ui-component name=\"keyvalue\" path=\"?.fields\" config=\"placeholderkey:Enter property name;placeholdervalue:Enter the property type and hit enter\">Fields</ui-component>\n\t\t\t\t\t<div class=\"help m\">List of supported types: boolean, int, float and string</div>\n\t\t\t\t\t<ui-component name=\"textboxlist\" path=\"?.tags\" config=\"placeholderkey:Enter tag name\">Tags</ui-component>\n\t\t\t\t</ui-bind>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.error\" config=\"text\" class=\"red\"></ui-bind>\n\t</footer>\n</body>",
			"localstorage": "<script total>\n\n\texports.id = 'localstorage';\n\texports.name = 'Local storage';\n\texports.icon = 'ti ti-hdd';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Databases';\n\texports.config = { savekey: 'id', readkey: 'id', path: '', remove: true, expire: '1 hour' };\n\texports.inputs = [{ id: 'save', name: 'Save' }, { id: 'read', name: 'Read' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar filename = PATH.databases('localstorage_' + instance.id + '.json');\n\t\tvar repo = {};\n\t\tvar timeout = null;\n\n\t\tvar saveforce = function() {\n\t\t\ttimeout = null;\n\t\t\tF.Fs.writeFile(filename, JSON.stringify(repo), NOOP);\n\t\t};\n\n\t\tvar save = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t\ttimeout = setTimeout(saveforce, 500);\n\t\t};\n\n\t\tF.Fs.readFile(filename, 'utf8', function(err, response) {\n\t\t\tif (response) {\n\t\t\t\tvar tmp = response.parseJSON(true);\n\t\t\t\tif (tmp)\n\t\t\t\t\trepo = tmp;\n\t\t\t}\n\t\t});\n\n\t\tinstance.destroy = function() {\n\t\t\tF.Fs.unlink(filename, NOOP);\n\t\t};\n\n\t\tinstance.message_save = function($) {\n\t\t\tvar data = $.data;\n\t\t\tvar key = config.savekey.indexOf('.') === -1 ? data[config.savekey] : U.get(data, config.savekey);\n\t\t\trepo[key] = { ts: NOW.add(config.expire), data: CLONE(data) };\n\t\t\t$.send('output', data);\n\t\t\tsave();\n\t\t};\n\n\t\tinstance.message_read = function($) {\n\n\t\t\tvar data = $.data;\n\t\t\tvar key = config.readkey.indexOf('.') === -1 ? data[config.readkey] : U.get(data, config.readkey);\n\t\t\tvar item = repo[key];\n\n\t\t\tif (item) {\n\n\t\t\t\tif (config.path) {\n\t\t\t\t\tif (config.path.indexOf('.') === -1)\n\t\t\t\t\t\tdata[config.path] = item.data;\n\t\t\t\t\telse\n\t\t\t\t\t\tU.set(data, config.path, item.data);\n\t\t\t\t} else {\n\t\t\t\t\tfor (let key in item.data)\n\t\t\t\t\t\tdata[key] = item.data[key];\n\t\t\t\t}\n\n\t\t\t\tif (config.remove) {\n\t\t\t\t\tdelete repo[key];\n\t\t\t\t\tsave();\n\t\t\t\t}\n\n\t\t\t\t$.send('output', data);\n\n\t\t\t} else\n\t\t\t\t$.send('error', '404: ' + key);\n\t\t};\n\n\t\tinstance.service = function() {\n\n\t\t\tvar is = false;\n\t\t\tfor (var key in repo) {\n\t\t\t\tif (repo[key].ts < NOW) {\n\t\t\t\t\tdelete repo[key];\n\t\t\t\t\tis = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tis && save();\n\n\t\t};\n\n\t};\n\n</script>\n\n<readme>\nA small and simple persistent storage component is provided by this component. Data can be stored for a short period of time and read when needed.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\n\t\t<div class=\"caption m\">\n\t\t\t<label>Save input</label>\n\t\t</div>\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.savekey\" config=\"required:1;monospace:1\">Save key</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.expire\" config=\"required:1;monospace:1\">Expiration</ui-component>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"caption m\">\n\t\t\t<label>Read input</label>\n\t\t</div>\n\n\t\t<div class=\"grid-3\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.readkey\" config=\"required:1;monospace:1\">Read key</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;placeholder:path.to.property\">Where to save data?</ui-component>\n\t\t\t\t<div class=\"help\">Otherwise the message will be extended.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.remove\" config=\"type:checkbox\">Remove the item after reading</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"switch": "<script total>\n\n\texports.id = 'switch';\n\texports.name = 'Switch';\n\texports.icon = 'ti ti-sitemap';\n\texports.group = 'Common';\n\texports.author = 'Total.js';\n\texports.version = '4';\n\texports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output1', name: 'Output #1' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar check, getValue1;\n\t\tvar COND = [];\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tvar getValue2 = (path, type, data, repo) => {\n\n\t\t\tvar source;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'data':\n\t\t\t\t\tsource = data;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'repo':\n\t\t\t\t\tsource = repo;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables':\n\t\t\t\t\tsource = instance.main.variables;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables2':\n\t\t\t\t\tsource = instance.main.variables2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!path)\n\t\t\t\treturn source;\n\n\t\t\tif (typeof source === 'object' && !Array.isArray(source) && source != null)\n\t\t\t\treturn get(source, path);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = getValue1($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\n\t\t\tvar sent = false;\n\t\t\tfor (let i = 0; i < COND.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ok = COND[i](data, $.data, $.repo);\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t$.send('output' + (i + 1), $.data);\n\t\t\t\t\t\tsent = true;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tconsole.error('muj error', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t!sent && $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.source || !config.conditions.length)\n\t\t\t\treturn;\n\n\t\t\tconst conditions = config.conditions;\n\t\t\tCOND = [];\n\n\t\t\tconditions.forEach(function eachCondition(cond, index){\n\t\t\t\tconst { operator, value, type } = cond;\n\n\t\t\t\tswitch (operator) {\n\t\t\t\t\tcase 'isnull':\n\t\t\t\t\t\tCOND[index] = (v) => v == null;\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'true':\n\t\t\t\t\tcase 'false':\n\t\t\t\t\t\tCOND[index] = (v) => v == operator.parseBoolean();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'isempty':\n\t\t\t\t\t\tCOND[index] = (v) => typeof(v) == 'string' && v == '';\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'haskey':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (typeof v !== 'object' || Array.isArray(v) || v == null)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\treturn v.hasOwnProperty(val);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'includes':\n\t\t\t\t\t\tif (type === 'number')\n\t\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v => v.includes(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\t\t\t\t\t\tCOND[index] = (v, data, repo) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar result = fn(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tconsole.log('invalid expresion', fn.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v.indexOf(value) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tCOND[index] = compile[type](operator, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'data':\n\t\t\t\t\tcase 'repo':\n\t\t\t\t\tcase 'variables':\n\t\t\t\t\tcase 'variables2':\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn, fnEx;\n\t\t\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\t\t\tfn = (data, val) => {\n\t\t\t\t\t\t\t\tconst [ v1, v2 ] = val.split(',').trim();\n\t\t\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (ops.list.includes(operator)) {\n\t\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfn = NOOP;\n\t\t\t\t\t\t\tconsole.log('Invalid operator', operator);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === 'expression')\n\t\t\t\t\t\t\tfnEx = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\n\t\t\t\t\t\tCOND[index] = (val1, data, repo) => {\n\t\t\t\t\t\t\tvar val2;\n\t\t\t\t\t\t\tif (type === 'expression') {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tval2 = fnEx(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t\tconsole.error('Invalid function or expresion', fn.toString());\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tval2 = getValue2(value, type, data, repo, fnEx);\n\n\t\t\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinstance.outputs = [];\n\n\t\t\tCOND.forEach((fn, i) => {\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });\n\t\t\t\tif (typeof fn !== 'function')\n\t\t\t\t\tinstance.throw('Invalid settings for output: ' + (i + 1));\n\t\t\t});\n\n\t\t\tif (config.source === 'expression')\n\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', 'return ' + config.path + ';');\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = 'if ({2} && (typeof {0} !== \\'object\\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \\'{1}\\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');\n\t\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tinstance.save();\n\t\t};\n\n\t\tconst ops = {};\n\t\tops.gt = (v1, v2) => v1 > v2;\n\t\tops.ge = (v1, v2) => v1 >= v2;\n\t\tops.lt = (v1, v2) => v1 < v2;\n\t\tops.le = (v1, v2) => v1 <= v2;\n\t\tops.eq = (v1, v2) => v1 == v2;\n\t\tops.seq = (v1, v2) => v1 === v2;\n\t\tops.neq = (v1, v2) => v1 != v2;\n\t\tops.sneq = (v1, v2) => v1 !== v2;\n\t\tops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;\n\t\tops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;\n\t\tops.indexOf = (v1, v2) => v1.indexOf(v2) > -1;\n\n\t\tops.list = Object.keys(ops);\n\n\t\tconst compile = {\n\t\t\tnumber_ops: [ 'gt', 'lt', 'eq', 'seq', 'neq', 'sneq', 'ge', 'le', 'between', 'notbetween', 'indexOf' ],\n\t\t\tnumber: (operator, val2) => {\n\n\t\t\t\tif (!compile.number_ops.includes(operator))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar fn;\n\n\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\tfn = (data) => {\n\t\t\t\t\t\tconst [ v1, v2 ] = val2.split(',').trim();\n\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tval2 = U.parseFloat(val2);\n\t\t\t\t\tif (isNaN(val2))\n\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\tfn = (val1) => ops[operator](val1, val2);\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'number')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1);\n\t\t\t\t};\n\n\t\t\t},\n\t\t\tstring: (operator, val2) => {\n\n\t\t\t\tvar fn;\n\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase 'eq':\n\t\t\t\t\tcase 'neq':\n\t\t\t\t\tcase 'seq':\n\t\t\t\t\tcase 'sneq':\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'startsWith':\n\t\t\t\t\tcase 'endsWith':\n\t\t\t\t\t\tfn = val1 => val1[operator](val2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'regex':\n\t\t\t\t\t\tvar match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));\n\t\t\t\t\t\tif (!match || !match.length || match.length < 2)\n\t\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfn = val1 => new RegExp(match[1], match[2]).test(val1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n## Source and Path\nUse the **Source** dropdown to select where to look for the value to use in the conditions check.\nSet a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.\n**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, repo, variables, variables2\n**Expressions example:**\n```js\ndata.value - variables.offset\n```\n\n## Conditions\nEach of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.\n\n**Operator**\nNot all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.\n*index of* only works for data of type array or string.\n**Expression operator**\nIn this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, repo, variables, variables2.\nExpressions operator example:\n```js\ndata.value > variables.threshold;\n```\nor with a conditions\n```js\nif (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);\n```\n\n**Expression type**\nThe expression in the **value** field must return a value which will be used in the given operation. Available variables: data, repo, variables, variables2.\nExpressions example:\n```js\ndata.value - variables.offset\n```\n\n**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t\t<label class=\"ui-input-label\">Source + Path to the value</label>\n\t\t<div class=\"switch-input-group wide m\">\n\t\t\t<ui-component name=\"input\" path=\"?.source\" config=\"dirsource:REPO.switch_datasources\" default=\"'data'\"></ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\"></ui-component>\n\t\t</div>\n\t\t<section class=\"switch-conditions m\">\n\t\t\t<label class=\"ui-input-label\">Switch conditions</label>\n\t\t\t<div class=\"switch-thead\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-1\">#</div>\n\t\t\t\t\t<div class=\"col-md-2\">Operator</div>\n\t\t\t\t\t<div class=\"col-md-6\">Type + Value</div>\n\t\t\t\t\t<div class=\"col-md-2\">Output name</div>\n\t\t\t\t\t<div class=\"col-md-1\">Action</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.conditions\" config=\"template:.switch-condition -> data-index\" clas=\"block\">\n\t\t\t\t<ui-component name=\"movable\" path=\"?.conditions\" config=\"selector:.dragme;exec:FUNC.switch_condition_dragged\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach con in value }}\n\t\t\t\t\t\t<div class=\"switch-condition dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t\t{{ ($index + 1) }}.\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].operator\" config=\"dirsource:REPO.switch_operators\"></ui-component>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.conditions[{{ $index }}].operator\" config=\"hide:value == 'true' || value == 'false' || value == 'isnull' || value == 'isempty';.switch-input-group:value!=='expression'\" class=\"block\">\n\t\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.conditions[{{ $index }}].operator\" config=\"hide:value==='expression'\">\n\t\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].type\" config=\"dirsource:REPO.switch_valuetypes\"></ui-component>\n\t\t\t\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].value\" config=\"placeholder:value\"></ui-component>\n\t\t\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].name\"></ui-component>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t\t<i class=\"ti ti-trash red exec\" data-exec=\"FUNC.switch_remove_condition\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"help m\">Each condition corresponds to an output index. First condition --> First output, etc.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.switch_add_condition\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.switch_readme\"><i class=\"ti ti-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.switch_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.switch_add_condition = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });\n\t};\n\n\tFUNC.switch_remove_condition = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.switch-condition').attrd('index');\n\t\tconfig.conditions.splice(index, 1);\n\t\tSET(path, config);\n\t\tconsole.log(config);\n\t};\n\n\tFUNC.switch_condition_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.conditions.splice(dragged_index, 1)[0];\n\t\tconfig.conditions.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.switch_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.switch_datasources = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_valuetypes = 'number|Number,string|String,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,sneq|!==,ge|>=,le|<=,between|between,isnull|is null,isempty|is empty,indexOf|index of,startsWith|starts with,endsWith|ends with,regex|regular expression,true|is true,false|is false,includes|includes,haskey|has key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; background-color: #202020; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.switch-input-group { clear: both; height: 36px; }\n\t.switch-input-group > ui-component:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.switch-input-group > ui-component:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.switch-input-group.wide > ui-component:first-child .ui-input-control { width: 200px; }\n\t.switch-input-group.wide > ui-component:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.switch-thead { padding: 8px; margin-bottom:4px; }\n\n\t.ui-dark .switch-conditions { border-color: #404040; }\n\t.ui-dark .switch-condition { border-color: #404040; }\n\t.ui-dark .switch-help { border-color: #404040; }\n\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"json_schema_validator": "<script total>\n\texports.id = 'json_schema_validator';\n\texports.name = 'JSON Schema validator';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total Avengers';\n\texports.version = '1';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }, { id: 'schema', name: 'Schema' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'schema', name: 'Schema' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar schema;\n\n\t\tinstance.message = function($) {\n\t\t\tif (!schema) {\n\t\t\t\t$.send('error', { error: 'Not ready' });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif ($.input === 'schema') {\n\t\t\t\t$.send('schema', { schema });\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar data = $.data;\n\t\t\tJSONSCHEMA(schema, data, function(error, response){\n\t\t\t\tif (error)\n\t\t\t\t\t$.send('error', { msg: 'Invalid data', error });\n\t\t\t\telse\n\t\t\t\t\t$.send('output', data);\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\t// \"config\" is changed\n\t\t\tschema = config.schema && config.schema.parseJSON();\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n[JSON schema documentation](https://json-schema.org/learn/getting-started-step-by-step.html)\n\n## Inputs\n\n- `input` validates data and send the result to output if no error, otherwise send error to error output\n- `schema` reads the schema and send it to the schema output\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"codemirror\" path=\"?.schema\" config=\"type:javascript;required:true;height:500\">JSON schema</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>"
		},
		"design": {
			"im0q38k0y": {
				"id": "im0q38k0y",
				"config": {
					"url": "http://localhost:1337/api/rooms/1",
					"method": "GET",
					"dnscache": true,
					"insecure": true,
					"secret": "",
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": null,
					"send": "response"
				},
				"x": 575.5,
				"y": 324.5,
				"component": "request",
				"connections": {
					"error": [
						{
							"id": "im0q39cgw",
							"index": "input"
						}
					],
					"response": [
						{
							"id": "im0q39ju6",
							"index": "input"
						},
						{
							"id": "im0q39cgw",
							"index": "input"
						}
					]
				}
			},
			"im0q38v35": {
				"id": "im0q38v35",
				"config": {
					"random": false,
					"type": "string",
					"data": "{\n    \"name\": \"Ruang 7.1\"\n}",
					"restart": false,
					"prompt": false
				},
				"x": 344.5,
				"y": 409.5,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "im0q38k0y",
							"index": "payload"
						}
					]
				}
			},
			"im0q39cgw": {
				"id": "im0q39cgw",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 974.5,
				"y": 598.5,
				"component": "print",
				"connections": {}
			},
			"im0q39dto": {
				"id": "im0q39dto",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1197.5,
				"y": 533.5,
				"component": "print",
				"connections": {}
			},
			"im0q39ju6": {
				"id": "im0q39ju6",
				"config": {
					"path": "",
					"schema": [
						{
							"pathfrom": "data",
							"pathto": "Data",
							"convert": "empty",
							"id": "8mlyme2b5"
						}
					],
					"keep": false,
					"rewrite": true
				},
				"x": 947.5,
				"y": 379.5,
				"component": "read",
				"connections": {
					"output": [
						{
							"id": "im0q39dto",
							"index": "input"
						},
						{
							"id": "im0q3cedo",
							"index": "input"
						}
					]
				}
			},
			"im0q3bt5l": {
				"id": "im0q3bt5l",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1466.5,
				"y": 355.5,
				"component": "print",
				"connections": {}
			},
			"im0q3cedo": {
				"id": "im0q3cedo",
				"config": {
					"conditions": [
						{
							"operator": "eq",
							"value": "War Room",
							"type": "string",
							"name": "== War Room"
						},
						{
							"operator": "includes",
							"type": "string",
							"value": "Ruang",
							"name": "include \"Ruang\""
						}
					],
					"source": "data",
					"path": "Data.attributes.name"
				},
				"x": 1215.5,
				"y": 176.5,
				"component": "switch",
				"connections": {
					"output2": [
						{
							"id": "im0q3bt5l",
							"index": "input"
						}
					],
					"output1": [
						{
							"id": "im0q5f2vx",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output1",
						"name": "== War Room"
					},
					{
						"id": "output2",
						"name": "include \"Ruang\""
					}
				]
			},
			"im0q5f2vx": {
				"id": "im0q5f2vx",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1469.5,
				"y": 91.5,
				"component": "print",
				"connections": {}
			},
			"im0q5jdwv": {
				"id": "im0q5jdwv",
				"config": {
					"action": "add",
					"taskId": "",
					"title": "",
					"description": "",
					"status": "",
					"priority": "",
					"error_output": false,
					"autoresponse": true,
					"path": "response",
					"datasource": [
						{
							"name": "Apalahhhh",
							"id": 1
						},
						{
							"name": "dland pasd",
							"id": 2
						},
						{
							"name": "Cuanki",
							"id": 3
						}
					]
				},
				"x": 632.5,
				"y": 140.5,
				"component": "taskaction",
				"connections": {}
			},
			"im0q6n2j4": {
				"id": "im0q6n2j4",
				"config": {
					"url": "http://localhost:1337/api/projects",
					"method": "POST",
					"dnscache": true,
					"insecure": true,
					"secret": "",
					"nocookies": true,
					"xhr": true,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": "json",
					"send": "all"
				},
				"x": 1347,
				"y": 732,
				"component": "request",
				"connections": {
					"response": [
						{
							"id": "im0qgjyb9",
							"index": "input"
						},
						{
							"id": "im0udhs7u",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0qgjyb9",
							"index": "input"
						}
					]
				}
			},
			"im0q6n2j6": {
				"id": "im0q6n2j6",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1027.5,
				"y": 1149.5,
				"component": "print",
				"connections": {}
			},
			"im0q6n2j9": {
				"id": "im0q6n2j9",
				"config": {
					"conditions": [
						{
							"operator": "expression",
							"value": "data.data.name !== \"\" && data.data.description !== \"\" && data.data.status !== \"\" && data.data.dates !== \"\" && data.data.priority !== \"\";",
							"type": "number",
							"name": "all field required"
						},
						{
							"operator": "expression",
							"type": "string",
							"value": "data.data.name == \"\" || data.data.description == \"\" || data.data.status == \"\" || data.data.dates == \"\" || data.data.priority == \"\";",
							"name": "field null"
						}
					],
					"source": "data",
					"path": "data"
				},
				"x": 1030,
				"y": 829,
				"component": "switch",
				"connections": {
					"output2": [
						{
							"id": "im0uc10k6",
							"index": "input"
						}
					],
					"output1": [
						{
							"id": "im0q6n2j4",
							"index": "payload"
						}
					]
				},
				"outputs": [
					{
						"id": "output1",
						"name": "all field required"
					},
					{
						"id": "output2",
						"name": "field null"
					}
				]
			},
			"im0q6xd4s": {
				"id": "im0q6xd4s",
				"config": {
					"path": "body",
					"schema": [
						{
							"pathfrom": "data",
							"pathto": "data",
							"convert": "empty",
							"id": "8mlyme2b5"
						}
					],
					"keep": true,
					"rewrite": true
				},
				"x": 712.5,
				"y": 953.5,
				"component": "read",
				"connections": {
					"output": [
						{
							"id": "im0q6n2j9",
							"index": "input"
						},
						{
							"id": "im0q6n2j6",
							"index": "input"
						},
						{
							"id": "im0uc10k6",
							"index": "input"
						}
					]
				}
			},
			"im0qesgns": {
				"id": "im0qesgns",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false,
					"prompt": false
				},
				"x": 1757.5,
				"y": 106.5,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "im0qesn3s",
							"index": "payload"
						}
					]
				}
			},
			"im0qesn3s": {
				"id": "im0qesn3s",
				"config": {
					"url": "",
					"method": "GET",
					"dnscache": true,
					"insecure": false,
					"secret": "",
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": null,
					"send": "all"
				},
				"x": 2022.5,
				"y": 99.5,
				"component": "request",
				"connections": {
					"error": [
						{
							"id": "im0qet10w",
							"index": "input"
						}
					],
					"response": [
						{
							"id": "im0qespju",
							"index": "input"
						}
					]
				}
			},
			"im0qespju": {
				"id": "im0qespju",
				"config": {
					"path": "",
					"schema": [],
					"keep": false
				},
				"x": 2279.5,
				"y": 124.5,
				"component": "read",
				"connections": {
					"output": [
						{
							"id": "im0qet10w",
							"index": "input"
						},
						{
							"id": "im0qesvzc",
							"index": "input"
						}
					]
				}
			},
			"im0qesvzc": {
				"id": "im0qesvzc",
				"config": {
					"conditions": [
						{
							"operator": "eq",
							"value": "Hello world",
							"type": "string"
						}
					]
				},
				"x": 2527.5,
				"y": 75.5,
				"component": "switch",
				"connections": {
					"output1": [
						{
							"id": "im0qetywg",
							"index": "input"
						}
					]
				}
			},
			"im0qet10w": {
				"id": "im0qet10w",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2524.5,
				"y": 289.5,
				"component": "print",
				"connections": {}
			},
			"im0qetvfe": {
				"id": "im0qetvfe",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1731.5,
				"y": 1224.5,
				"component": "print",
				"connections": {}
			},
			"im0qetywg": {
				"id": "im0qetywg",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2798.5,
				"y": 162.5,
				"component": "print",
				"connections": {}
			},
			"im0qgesh3": {
				"id": "im0qgesh3",
				"config": {
					"url": "/projects",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 458,
				"y": 891,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "im0q6xd4s",
							"index": "input"
						}
					]
				}
			},
			"im0qgjyb9": {
				"id": "im0qgjyb9",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1726,
				"y": 887,
				"component": "print",
				"connections": {}
			},
			"im0rq2alf": {
				"id": "im0rq2alf",
				"config": {
					"name": "Model",
					"path": "",
					"schema": [
						{
							"id": "njs5c3v",
							"label": "Name",
							"name": "propname",
							"type": "string",
							"required": true,
							"array": false
						},
						{
							"id": "42pl2ks4",
							"label": "Name",
							"name": "propname",
							"type": "string",
							"required": true,
							"array": false
						},
						{
							"id": "l57vlyak8",
							"label": "Name",
							"name": "propname",
							"type": "string",
							"required": true,
							"array": false
						}
					],
					"rewrite": true
				},
				"x": 316.5,
				"y": 637.5,
				"component": "model",
				"connections": {}
			},
			"im0uc10k6": {
				"id": "im0uc10k6",
				"config": {
					"partial": false,
					"name": "Error response",
					"input": "",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\n$.send({\n  status: 400,\n  message: \"Data yang anda masukkan kosong\",\n});",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 1351,
				"y": 987,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "im0qetvfe",
							"index": "input"
						}
					]
				}
			},
			"im0uc11dc": {
				"id": "im0uc11dc",
				"config": {
					"url": "/projects",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 451.5,
				"y": 1592.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "im0ucjups",
							"index": "payload"
						}
					]
				}
			},
			"im0ucj0no": {
				"id": "im0ucj0no",
				"config": {
					"type": "json",
					"code": 200,
					"path": "response"
				},
				"x": 1328,
				"y": 1571,
				"component": "tresponse",
				"connections": {
					"output": [
						{
							"id": "im0uckpwz",
							"index": "input"
						}
					]
				}
			},
			"im0ucjups": {
				"id": "im0ucjups",
				"config": {
					"url": "http://localhost:1337/api/projects",
					"method": "GET",
					"dnscache": true,
					"insecure": false,
					"secret": "",
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": null,
					"send": "all"
				},
				"x": 695.5,
				"y": 1622.5,
				"component": "request",
				"connections": {
					"response": [
						{
							"id": "im0uckb3e",
							"index": "input"
						},
						{
							"id": "im0ud2gue",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0uckb3e",
							"index": "input"
						}
					]
				}
			},
			"im0uckb3e": {
				"id": "im0uckb3e",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1074.5,
				"y": 1803.5,
				"component": "print",
				"connections": {}
			},
			"im0uckpwz": {
				"id": "im0uckpwz",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1552,
				"y": 1639,
				"component": "print",
				"connections": {}
			},
			"im0ud2gue": {
				"id": "im0ud2gue",
				"config": {
					"partial": false,
					"name": "Unknown",
					"input": "",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\n$.send({\n\tstatus: 200,\n\tmessage: \"\",\n\tdata: $.request.body.data\n})",
					"strerr": false,
					"path": "response",
					"autoresponse": false
				},
				"x": 1075.5,
				"y": 1588.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "im0ucj0no",
							"index": "input"
						}
					]
				}
			},
			"im0udhs7s": {
				"id": "im0udhs7s",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 2019.5,
				"y": 641.5,
				"component": "print",
				"connections": {}
			},
			"im0udhs7u": {
				"id": "im0udhs7u",
				"config": {
					"partial": false,
					"name": "Error response",
					"input": "",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\n$.send({\n\tstatus: 200,\n\tmessage: \"\",\n\tdata: $.request.body.data\n});",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 1724,
				"y": 665,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "im0udhs7s",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0udhs7s",
							"index": "input"
						}
					]
				}
			},
			"im0ueuckn": {
				"id": "im0ueuckn",
				"config": {
					"hostnames": []
				},
				"x": 451.5,
				"y": 1383.5,
				"component": "tcors",
				"connections": {}
			},
			"im0vwzuar": {
				"id": "im0vwzuar",
				"config": {
					"url": "/tasks",
					"method": "GET",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 483.5,
				"y": 2377.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "im0vx37n6",
							"index": "payload"
						}
					]
				}
			},
			"im0vx37n6": {
				"id": "im0vx37n6",
				"config": {
					"url": "http://localhost:1337/api/tasks",
					"method": "GET",
					"dnscache": true,
					"insecure": false,
					"secret": "",
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": null,
					"send": "all"
				},
				"x": 693.5,
				"y": 2373.5,
				"component": "request",
				"connections": {
					"response": [
						{
							"id": "im0vx3v97",
							"index": "input"
						},
						{
							"id": "im0vx50hc",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0vx50hc",
							"index": "input"
						}
					]
				}
			},
			"im0vx3v97": {
				"id": "im0vx3v97",
				"config": {
					"partial": false,
					"name": "Response Success",
					"input": "",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "$.send({\n\tcode: 200,\n\tmessage: \"Successfully fetching data\",\n\tdata: $.request.body.data\n})",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 1066.5,
				"y": 2329.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "im0vx4spu",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0vx4spu",
							"index": "input"
						}
					]
				}
			},
			"im0vx4spu": {
				"id": "im0vx4spu",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1363.5,
				"y": 2349.5,
				"component": "print",
				"connections": {}
			},
			"im0vx50hc": {
				"id": "im0vx50hc",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1074.5,
				"y": 2569.5,
				"component": "print",
				"connections": {}
			},
			"im0xher5k": {
				"id": "im0xher5k",
				"config": {
					"url": "/tasks",
					"method": "POST",
					"timeout": 5000,
					"limit": 5120,
					"upload": false,
					"user": 0,
					"send": "all",
					"reader": "-"
				},
				"x": 465.5,
				"y": 2975.5,
				"component": "troute",
				"connections": {
					"output": [
						{
							"id": "im0xhgqs5",
							"index": "input"
						}
					]
				}
			},
			"im0xhf6vn": {
				"id": "im0xhf6vn",
				"config": {
					"url": "http://localhost:1337/api/tasks",
					"method": "POST",
					"dnscache": true,
					"insecure": true,
					"secret": "",
					"nocookies": true,
					"xhr": false,
					"parse": true,
					"timeout": 10000,
					"limit": 512000,
					"responsebody": true,
					"headers": {},
					"cookies": {},
					"serialize": null,
					"send": "all"
				},
				"x": 1155.5,
				"y": 2678.5,
				"component": "request",
				"connections": {
					"response": [
						{
							"id": "im0xhfec5",
							"index": "input"
						},
						{
							"id": "im0xhfju0",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0xhfju0",
							"index": "input"
						}
					]
				}
			},
			"im0xhfec5": {
				"id": "im0xhfec5",
				"config": {
					"partial": false,
					"name": "Unknown",
					"input": "",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "// model\n// $.query\n// $.params\n// $.headers\n// $.user\n\n$.success();",
					"strerr": false,
					"path": "response",
					"autoresponse": false
				},
				"x": 1515.5,
				"y": 2673.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "im0xhfkw3",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0xhfkw3",
							"index": "input"
						}
					]
				}
			},
			"im0xhfju0": {
				"id": "im0xhfju0",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1512.5,
				"y": 2870.5,
				"component": "print",
				"connections": {}
			},
			"im0xhfkw3": {
				"id": "im0xhfkw3",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1815.5,
				"y": 2665.5,
				"component": "print",
				"connections": {}
			},
			"im0xhgqs5": {
				"id": "im0xhgqs5",
				"config": {
					"path": "body",
					"schema": [
						{
							"pathfrom": "data",
							"pathto": "data",
							"convert": "empty",
							"id": "er59um6cs"
						}
					],
					"keep": false
				},
				"x": 681.5,
				"y": 2935.5,
				"component": "read",
				"connections": {
					"output": [
						{
							"id": "im0xhgzky",
							"index": "input"
						},
						{
							"id": "im0xhlbif",
							"index": "input"
						}
					]
				}
			},
			"im0xhgzky": {
				"id": "im0xhgzky",
				"config": {
					"conditions": [
						{
							"operator": "expression",
							"value": "data.data.description !== null;",
							"type": "string",
							"name": "notNull"
						},
						{
							"operator": "expression",
							"type": "string",
							"value": "data.data.description == null;",
							"name": "isNull"
						}
					],
					"source": "data",
					"path": "data"
				},
				"x": 895.5,
				"y": 2844.5,
				"component": "switch",
				"connections": {
					"output1": [
						{
							"id": "im0xhfju0",
							"index": "input"
						}
					],
					"output2": [
						{
							"id": "im0xi1wlc",
							"index": "input"
						},
						{
							"id": "im0xjm69j",
							"index": "input"
						}
					]
				},
				"outputs": [
					{
						"id": "output1",
						"name": "notNull"
					},
					{
						"id": "output2",
						"name": "isNull"
					}
				]
			},
			"im0xhlbif": {
				"id": "im0xhlbif",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 884.5,
				"y": 3071.5,
				"component": "printjson",
				"connections": {}
			},
			"im0xi1wlc": {
				"id": "im0xi1wlc",
				"config": {
					"partial": false,
					"name": "Error Null Data",
					"input": "",
					"query": "",
					"color": "#68B25B",
					"params": "",
					"user": 0,
					"permissions": "",
					"code": "$.send({\n\tstatus: \"Bad Request\",\n\tstatusCode: 400,\n\tmessage: \"Maaf data yang kamu masukkan masih kosong\"\n})",
					"strerr": false,
					"path": "response",
					"autoresponse": true
				},
				"x": 1170.5,
				"y": 3092.5,
				"component": "taction",
				"connections": {
					"output": [
						{
							"id": "im0xi2e4b",
							"index": "input"
						},
						{
							"id": "im0xica05",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0xi2e4b",
							"index": "input"
						}
					]
				}
			},
			"im0xi2e4b": {
				"id": "im0xi2e4b",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1515.5,
				"y": 3110.5,
				"component": "printjson",
				"connections": {}
			},
			"im0xica05": {
				"id": "im0xica05",
				"config": {
					"limit": 3,
					"delay": 1000
				},
				"x": 1516.5,
				"y": 2952.5,
				"component": "throttle",
				"connections": {
					"output": [
						{
							"id": "im0xicva9",
							"index": "input"
						}
					]
				}
			},
			"im0xicva9": {
				"id": "im0xicva9",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 1787.5,
				"y": 2953.5,
				"component": "print",
				"connections": {}
			},
			"im0xjm69j": {
				"id": "im0xjm69j",
				"config": {},
				"x": 1170.5,
				"y": 2931.5,
				"component": "counter",
				"connections": {}
			},
			"groups": [
				{
					"id": "gm0vwzhfz",
					"x": 440.5,
					"y": 2225.5,
					"width": 1873,
					"height": 1237,
					"name": "Group"
				}
			]
		},
		"sources": {},
		"size": 280710
	},
	"fIq9YKv1c461f": {
		"id": "fIq9YKv1c461f",
		"name": "SQL Server Config",
		"author": "",
		"version": "",
		"icon": "ti ti-database-alt",
		"reference": "",
		"group": "",
		"url": "https://",
		"cloning": true,
		"color": "",
		"readme": "",
		"memory": 0,
		"proxypath": "",
		"variables": {},
		"dtcreated": "2024-09-12T01:15:38.132Z",
		"asfiles": false,
		"worker": "fork",
		"origin": "http://localhost:8000",
		"paused": false,
		"sandbox": false,
		"components": {
			"code": "<script total>\n\n\texports.id = 'code';\n\texports.name = 'Code';\n\texports.group = 'Common';\n\texports.version = '4';\n\texports.icon = 'ti ti-code';\n\texports.author = 'Total.js';\n\texports.config = { outputs: 1, name: 'Code', code: '// instance {FlowStreamInstance};\\n// $ {FlowStreamMessage};\\n// vars {Object};\\n// repo {Object};\\n// data {String/Number/Boolean/Date/Buffer/Object};\\n// $.send(\\'output\\', data); // or simply send(data); which uses the first output\\n// $.destroy();\\n// $.throw(err);\\n\\n// IMPORTANT: If you do not perform re-send, you need to destroy this message via $.destroy() method\\n// IMPORTANT: methods $.send(), $.destroy() and $.throw() can be executed only once\\n\\n// $.send(\\'output\\', data);\\n$.destroy();' };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.meta = { settingswidth: 1200 };\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tvar send = data => $.send('output', data);\n\t\t\t\t\tfn($.data, instance, $, $, F.require, send, $.repo, $.vars, $.data);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.throw(e);\n\t\t\t\t\t$.destroy();\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tinstance.outputs = [];\n\t\t\tfor (let i = 1; i <= config.outputs; i++)\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i === 1 ? '' : i), name: 'Output #' + i });\n\t\t\tinstance.save();\n\n\t\t\ttry {\n\t\t\t\tif (config.code) {\n\t\t\t\t\tinstance.status(1);\n\t\t\t\t\tfn = new Function('value', 'instance', '$', 'message', 'require', 'send', 'repo', 'vars', 'data', config.code);\n\t\t\t\t} else {\n\t\t\t\t\tinstance.status(0);\n\t\t\t\t\tfn = null;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\tfn = null;\n\t\t\t\tinstance.throw('Code: ' + e.message);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tfn = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component executes a custom JavaScript code as it is.\n\nTo send data to the default output use `send(somedata);`\nTo send data to specific output when number of outputs > 1 use `$.send('outputX', somedata)` where `X` is output index, see example bellow:\n- first output--> `send(somedata)` or `$.send('output', somedata)`\n- second output --> `$.send('output2', somedata)`\n- ...\n- 5th output --> `$.send('output5', somedata)`\n- etc.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-10 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.name\">Name</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-2 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.outputs\" config=\"type:number;format:\">Number of outputs</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"ui-input-label\">Code:</div>\n\t\t<div class=\"m\">\n\t\t\t<ui-component name=\"codemirror\" path=\"?.code\" config=\"type:javascript;minheight:300;parent:auto;margin:60;tabs:true;trim:true\"></ui-component>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\tTOUCH(function(exports, init) {\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar count = exports.instance.config.outputs;\n\t\t\t\tfor (let i = 1; i <= count; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + (i === 1 ? '' : i), name: (count === 1 ? 'Output' : 'Output #' + i) });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t}\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"datasorter": "<script total>\n\n\texports.id = 'datasorter';\n\texports.name = 'Data sorter';\n\texports.group = 'Common';\n\texports.icon = 'ti ti-vector';\n\texports.author = 'Total.js';\n\texports.version = '3';\n\texports.config = { conditions: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar fn = null;\n\n\t\tinstance.message = function($) {\n\t\t\tif (fn) {\n\t\t\t\ttry {\n\t\t\t\t\tfn(instance, $);\n\t\t\t\t} catch (e) {\n\t\t\t\t\t$.destroy();\n\t\t\t\t\tinstance.status(e + '');\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\t$.destroy();\n\t\t}\n\n\t\tinstance.configure = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar old = JSON.stringify(instance.outputs || []);\n\n\t\t\tvar outputs = [];\n\n\t\t\tfor (var i = 0; i < config.conditions.length; i++) {\n\t\t\t\tvar item = config.conditions[i];\n\t\t\t\toutputs.push({ id: 'output' + i, name: item.name });\n\t\t\t\tbuilder.push('if(' + item.if + '){$.send(\\'output' + i + '\\');return;}');\n\t\t\t}\n\n\t\t\toutputs.push({ id: 'error', name: '404' });\n\n\t\t\ttry {\n\n\t\t\t\tfn = new Function('instance', '$', 'var value=$.data,data=$.data,refs=$.refs,repo=$.repo;' + builder.join('') + '$.send(\\'error\\');');\n\n\t\t\t\tif (JSON.stringify(outputs) !== old) {\n\t\t\t\t\tinstance.outputs = outputs;\n\t\t\t\t\tinstance.save();\n\t\t\t\t}\n\n\t\t\t\tinstance.status('');\n\n\t\t\t} catch (e) {\n\t\t\t\tinstance.status(e + '');\n\t\t\t}\n\n\t\t};\n\n\t\t// Due to redrawing of outputs\n\t\tsetTimeout(instance => instance && instance.configure(), 1500, instance);\n\t};\n\n</script>\n\n<readme>\nThe component sorts data according to the custom defined conditions. You can define unlimited count of outputs with various conditions.\n</readme>\n\n<style>\n\t.CLASS footer > ui-bind { padding: 10px; font-size: 12px; }\n\t.CLASS.isnewbie footer .newbie { display: block; font-size: 12px; color: red; }\n\t.CLASS-settings .item { padding: 8px 10px; font-size: 12px; }\n\t.CLASS-settings .item i { margin-right: 5px; }\n</style>\n\n<settings>\n\t<div class=\"padding CLASS-settings\">\n\t\t<ui-component name=\"listform\" path=\"?.conditions\" config=\"autofocus:1;empty:You do not have defined any rules\">\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"item\"><i class=\"ti ti-arrow-right\"></i>{{ name }}</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div class=\"padding\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1;innerlabel:1__''\" class=\"m\">Name</ui-component>\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.if\" config=\"required:1;innerlabel:1;monospace:1\" default=\"'value != null'\">Condition</ui-component>\n\t\t\t\t\t<div class=\"help m\"><i class=\"ti ti-exclamation-triangle\"></i><code>value</code> represents a message data and <code>refs</code> represents references. Example: <code>value.age > 18</code></div>\n\t\t\t\t\t<ui-component name=\"validate\" path=\"?\" class=\"toolbar\">\n\t\t\t\t\t\t<button name=\"submit\"><i class=\"ti ti-file-code\"></i>Save</button>\n\t\t\t\t\t\t<button name=\"remove\">Remove</button>\n\t\t\t\t\t\t<button name=\"cancel\">Cancel</button>\n\t\t\t\t\t</ui-component>\n\t\t\t\t</div>\n\t\t\t</script>\n\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"margin-top:10px\"><button class=\"button button-inline\" name=\"create\"><i class=\"ti ti-plus-circle green\"></i>Create rule</button></div>\n\t\t\t</script>\n\n\t\t</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS\" config=\"text;show\" class=\"red\"></ui-bind>\n\t</footer>\n</body>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.configure = function() {\n\t\t\tvar changes = exports.instance.changes;\n\t\t\tif (changes && changes.newbie) {\n\t\t\t\tvar outputs = [];\n\t\t\t\tvar items = exports.config.conditions;\n\t\t\t\tfor (var i = 0; i < items.length; i++)\n\t\t\t\t\toutputs.push({ id: 'output' + i, name: items[i].name });\n\t\t\t\toutputs.push({ id: 'error', name: '404' });\n\t\t\t\texports.instance.outputs = outputs;\n\t\t\t\tUPD('flow.data');\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"request": "<script total>\n\n\texports.id = 'request';\n\texports.name = 'HTTP Request';\n\texports.group = 'Common';\n\texports.version = '7';\n\texports.icon = 'ti ti-cloud-download';\n\texports.author = 'Total.js';\n\texports.config = { url: '', method: 'GET', dnscache: true, insecure: false, secret: '', nocookies: true, xhr: false, parse: true, timeout: 10000, limit: 1024 * 500, responsebody: true, headers: {}, cookies: {}, serialize: null, send: 'all' };\n\texports.inputs = [{ id: 'payload', name: 'Payload' }];\n\texports.outputs = [{ id: 'response', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.message(instance.newmessage({}));\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tif (!config.url) {\n\t\t\t\t$.end();\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar opt = {};\n\n\t\t\tfor (var key in config.headers) {\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers[$.variables(key, true)] = $.variables(config.headers[key], true);\n\t\t\t}\n\n\t\t\tfor (var key in config.cookies) {\n\t\t\t\tif (!opt.cookies)\n\t\t\t\t\topt.cookies = {};\n\t\t\t\topt.cookies[$.variables(key, true)] = $.variables(config.cookies[key], true);\n\t\t\t}\n\n\t\t\topt.method = $.variables(config.method, true);\n\t\t\topt.url = $.variables(config.url, true);\n\t\t\topt.cook = true;\n\n\t\t\tvar secret = config.secret ? $.variables(config.secret, true) : null;\n\n\t\t\tif (config.serialize) {\n\t\t\t\tswitch (config.serialize) {\n\n\t\t\t\t\tcase 'json':\n\t\t\t\t\t\topt.type = 'json';\n\t\t\t\t\t\tif (opt.method !== 'GET')\n\t\t\t\t\t\t\topt.body = JSON.stringify($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'urlencoded':\n\t\t\t\t\t\topt.type = 'urlencoded';\n\t\t\t\t\t\tif (opt.method === 'GET')\n\t\t\t\t\t\t\topt.query = U.toURLEncode($.data);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\topt.body = U.toURLEncode($.data);\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tcase 'buffer':\n\t\t\t\t\t\topt.type = 'raw';\n\t\t\t\t\t\topt.body = $.data;\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (secret && opt.body) {\n\t\t\t\topt.body = U.encrypt_data(opt.body, secret);\n\t\t\t\tif (!opt.headers)\n\t\t\t\t\topt.headers = {};\n\t\t\t\topt.headers['X-Encryption'] = 'a';\n\t\t\t}\n\n\t\t\tif (config.dnscache)\n\t\t\t\topt.dnscache = true;\n\n\t\t\tif (config.insecure)\n\t\t\t\topt.insecure = true;\n\n\t\t\tif (config.nocookies)\n\t\t\t\topt.nocookies = true;\n\n\t\t\tif (config.xhr)\n\t\t\t\topt.xhr = true;\n\n\t\t\tif (config.timeout)\n\t\t\t\topt.timeout = config.timeout;\n\n\t\t\tif (config.limit)\n\t\t\t\topt.limit = config.limit;\n\n\t\t\tif (config.send === 'chunks')\n\t\t\t\topt.custom = true;\n\n\t\t\topt.callback = function(err, response) {\n\n\t\t\t\tif (err) {\n\t\t\t\t\t$.data = err + '';\n\t\t\t\t\t$.send('error');\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (opt.custom) {\n\t\t\t\t\tresponse.stream.on('data', data => $.send('response', data));\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'headers') {\n\t\t\t\t\t$.send('response', response.headers);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (config.send === 'status') {\n\t\t\t\t\t$.send('response', response.status);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tbody = response.body;\n\n\t\t\t\tif (secret && response.headers['x-encryption'])\n\t\t\t\t\tbody = U.decrypt_data(body, secret);\n\n\t\t\t\tif (config.parse) {\n\t\t\t\t\tvar type = response.headers['content-type'] || '';\n\t\t\t\t\tif (type) {\n\t\t\t\t\t\tvar index = type.indexOf(';', 7);\n\t\t\t\t\t\tif (index !== -1)\n\t\t\t\t\t\t\ttype = type.substring(0, index).trim();\n\t\t\t\t\t}\n\t\t\t\t\tswitch (type.toLowerCase()) {\n\t\t\t\t\t\tcase 'text/xml':\n\t\t\t\t\t\tcase 'application/xml':\n\t\t\t\t\t\t\tbody = body ? body.parseXML(true) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/x-www-form-urlencoded':\n\t\t\t\t\t\t\tbody = body ? DEF.parsers.urlencoded(body) : {};\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase 'application/json':\n\t\t\t\t\t\tcase 'text/json':\n\t\t\t\t\t\t\tbody = body ? body.parseJSON(true) : null;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\tbody = body && body.isJSON() ? body.parseJSON(true) : body;\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tswitch (config.send) {\n\t\t\t\t\tcase 'all':\n\t\t\t\t\t\t$.data = { headers: response.headers, cookies: response.cookies, status: response.status, host: response.host, body: body };\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'response':\n\t\t\t\t\t\t$.data = body;\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\t$.send('response');\n\t\t\t};\n\n\t\t\tREQUEST(opt);\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS .status { font-size: 12px; margin: 0; padding: 5px 10px 10px; }\n\t.CLASS .status span { padding: 1px 3px; border-radius: var(--radius); color: #FFF; }\n</style>\n\n<readme>\nThe component makes a HTTP request. The response data will be serialized as the payload.\n\n__Response__:\n\n```json\n{\n\tstatus: Number,\n\theaders: { key: value },\n\tcookies: { key: value },\n\thost: String,\n\tbody: String/Object/Buffer\n}\n```\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<ui-bind path=\"CONFIG\" config=\"template;show:value.url\" class=\"block status\">\n\t\t<script type=\"text/html\">\n\t\t\t<div class=\"monospace hellip\" title=\"{{ value.url }}\"><span style=\"background:{{ value.method | color }}\">{{ value.method }}</span> {{ value.url }}</div>\n\t\t</script>\n\t</ui-bind>\n</body>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Method, URL address, headers and Cookies support dynamic variables. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code></div>\n\t</div>\n\t<div class=\"padding bg-smoke npb\">\n\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.method\" config=\"dirsource:GET|GET,POST|POST,PUT|PUT,DELETE|DELETE,PATCH|PATCH;required:1\">Method</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.url\" config=\"required:1\"><b>URL address</b></ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number;format:\">Timeout</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-clock\"></i><ui-bind path=\"?.timeout\" config=\"text:((value||0)/1000).floor(2)+' sec.'\"></ui-bind><br />Timeout <b>in milliseconds</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.limit\" config=\"type:number\">Max. size</ui-component>\n\t\t\t\t<div class=\"help\"><i class=\"ti ti-calculator\"></i><ui-bind path=\"?.limit\" config=\"text:(value||0).filesize()\"></ui-bind><br />Response max. size <b>in bytes</b></div>\n\t\t\t</div>\n\t\t\t<div class=\"col-md-6 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.send\" config=\"required:1;dirsource:all|Everything,response|Response body,chunks|Chunks of buffer,headers|Headers only,status|Status code\">Send to output</ui-component>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t<hr class=\"nmt nmb\" />\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.serialize\" config=\"dirsource:json|JSON,urlencoded|URL encode,buffer|Buffer;dirraw:1;placeholder:None;dirempty:None\" class=\"m\">Data serialization</ui-component>\n\t\t<ui-component name=\"keyvalue\" path=\"?.headers\" config=\"placeholderkey:Header name;placeholdervalue:Header value and press enter\">Headers</ui-component>\n\t\t<div class=\"help m\">Headers support dynamic variables in the form <code>{key}</code></div>\n\t\t<ui-component name=\"keyvalue\" path=\"?.cookies\" config=\"placeholderkey:Cookie name;placeholdervalue:Cookie value and press enter\">Cookies</ui-component>\n\t\t<div class=\"help m\">Cookies support dynamic variables in the form <code>{key}</code></div>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.parse\" config=\"type:checkbox\">Parse Response to Object</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.dnscache\" config=\"type:checkbox\">Enable DNS cache</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.insecure\" config=\"type:checkbox\">Allow insecure connection</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.xhr\" config=\"type:checkbox\">Add XHR header</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.secret\" config=\"camouflage:1;icon:ti ti-totaljs\">Total.js Encryption/Decryption secret</ui-component>\n\t</div>\n</settings>",
			"maparray": "<script total>\n\n\texports.id = 'maparray';\n\texports.name = 'Map array';\n\texports.icon = 'ti ti-table';\n\texports.author = 'Total.js';\n\texports.group = 'Common';\n\texports.version = '1';\n\texports.config = { rules: [] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar Rules = [];\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar arr, newarr = [];\n\n\t\t\tif (config.path) {\n\t\t\t\ttry {\n\t\t\t\t\tarr = get(config.path);\n\t\t\t\t} catch(e) {}\n\t\t\t} else {\n\t\t\t\tarr = $.data;\n\t\t\t}\n\n\t\t\tif (!config.map)\n\t\t\t\treturn instance.throw('No configuration');\n\t\t\tif (!Array.isArray(arr))\n\t\t\t\treturn instance.throw('Input data is not an array');\n\n\t\t\tvar len = arr.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tvar item = arr[i];\n\t\t\t\t\tif (typeof(item) !== 'object' || Array.isArray(item))\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\tvar val = getNewObj(arr[i], config.map);\n\t\t\t\t\tnewarr[i] = val;\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$.data = newarr;\n\t\t\t$.send('output', );\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\n\t\t};\n\n\t\tinstance.configure();\n\t\t// from obj to result -> obj.name to result.name\n\t\tconst getNewObj = (obj, map) => {\n\t\t\tvar result = config.array ? [] : {};\n\t\t\tvar len = map.length;\n\t\t\tfor (let i = 0; i < len; i++) {\n\t\t\t\tvar paths = map[i]; // { source: 'path.to.value', target: 'new.path.to.value' }\n\t\t\t\tvar val = get(obj, paths.source);\n\n\t\t\t\tif (val) {\n\t\t\t\t\tif (config.array) {\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!paths.target)// no path, ignore it\n\t\t\t\t\t\tcontinue;\n\n\t\t\t\t\tif (paths.target === '...') // keep the same path\n\t\t\t\t\t\tpaths.target = paths.source;\n\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(val);\n\t\t\t\t\telse\n\t\t\t\t\t\tset(result, paths.target, val);\n\t\t\t\t} else {\n\t\t\t\t\tif (config.array)\n\t\t\t\t\t\tresult.push(null);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn result;\n\t\t};\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\t\tconst set = (obj, path, value) => {\n\t\t\tvar ok = true;\n\t\t\tvar props = path.split('.').trim();\n\n\t\t\tvar plen = props.length;\n\t\t\tif (!plen)\n\t\t\t\treturn false;\n\n\t\t\tvar path = props.map(p => isNaN(p) ? p : `[${p}]`).join('.').replace(/\\.\\[/g, '[');\n\t\t\tvar paths = [];\n\t\t\tprops.reduce((prev, curr) => {\n\t\t\t\tcurr = isNaN(curr) ? curr : `[${curr}]`;\n\t\t\t\tlet p = prev + (prev && curr[0] !== '[' ? '.' : '') + curr;\n\t\t\t\tpaths.push(p);\n\t\t\t\treturn p;\n\t\t\t}, '');\n\n\t\t\tif (path[0] !== '[')\n\t\t\t\tpath = '.' + path;\n\t\t\tvar fn = new Function('o', 'v', 'o' + path + ' = v;');\n\n\t\t\tif (plen === 1) {\n\t\t\t\tvar isobject = isNaN(props[0]);\n\t\t\t\tif ((isobject && typeof(obj) === 'object') || (!isobject && obj instanceof Array))\n\t\t\t\t\tobj[props[0]] = value;\n\t\t\t\telse\n\t\t\t\t\tok = false;\n\t\t\t} else {\n\t\t\t\tpaths.forEach((p, index) => {\n\t\t\t\t\tvar islast = plen === index + 1;\n\t\t\t\t\tif (!islast) {\n\t\t\t\t\t\tvar t = get(obj, p);\n\t\t\t\t\t\tvar type = isNaN(paths[index + 1]) ? '{}' : '[]';\n\n\t\t\t\t\t\tif (t == null)\n\t\t\t\t\t\t\tnew Function('target', 'set', 'target' + (p[0] === '[' ? '' : '.') + p + ' = ' + type + ';')(obj, set);\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfn(obj, value);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\n\t\t\treturn ok;\n\t\t}\n\t};\n\n</script>\n\n<readme>\nThis component can iterate over an array and only take properties listed in the configuration. __The input must be an array of objects!__\n\n### Example data\n\n```js\n[\n\t{ sensor: { temperature: 25, humidity: 50, ... some more properties }},\n\t{ sensor: { temperature: 24, humidity: 55, ... some more properties }},\n\t{ sensor: { temperature: 23, humidity: 60, ... some more properties }}\n]\n```\n### Example configuration\n\n- `sensor.temperature` -> `temp`\n- `sensor.humidity` -> `hum`\n\n### Example output\n\n```js\n[\n\t{ temp: 25, hum: 50 },\n\t{ temp: 24, hum: 55 },\n\t{ temp: 23, hum: 60 }\n]\n```\n\nIf `Return an Array of Arrays` is checked then\neach of the Map properties will be pushed to a new array, see example bellow\n\n### Example given the data above and this configuration:\n\n`Return an Array of Arrays` -> **checked**\n\n**Map**:\n\n- `sensor.temperature`\n- `sensor.humidity`\n\n### Example output:\n\n```js\n[\n\t[25, 50],\n\t[24, 55],\n\t[23, 60],\n]\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.array\" config=\"type:checkbox\" class=\"m\">Return an Array of Arrays (Default: Array of Objects)</ui-component>\n\t\t<section class=\"maparray-section m\">\n\t\t\t<label>Map</label>\n\t\t\t<!--<ui-component name=\"keyvalue\" path=\"?.map\" config=\"placeholderkey:Type a path to property;placeholdervalue:Type a new path to a property\" class=\"maparray-keyvalue\"></ui-component>-->\n\n\t\t\t<div data-bind=\"?.map__template:.maparray-item -> data-index\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach item in value }}\n\t\t\t\t\t<div class=\"maparray-item\" data-index=\"{{ $index }}\">\n\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t<ui-bind path=\"?.array\" config=\".col-md-11:value__.col-md-5:!value\" class=\"block\">\n\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.map[{{ $index }}].source\" class=\"m\"></ui-component>\n\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t<div class=\"col-md-1\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<div class=\"m\" style=\"line-height: 35px;\">--&gt;</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-5\" data-bind=\"?.array__hide\">\n\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.map[{{ $index }}].target\"></ui-component>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t<i class=\"ti ti-trash red exec\" data-exec=\"FUNC.maparray_remove_item\" data-index=\"{{ $index }}\"></i>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.array\" config=\"hide\" class=\"help block m\">You can use 3 dots(...) in the right field to keep the same path.</ui-bind>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.maparray_add_item\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.maparray_readme\"><i class=\"ti ti-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.maparray_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.maparray_add_item = function(el) {\n\t\tconsole.log('ADDING', el);\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.map', { source: '', target: '' });\n\t};\n\n\tFUNC.maparray_remove_item = function(el) {\n\t\tconsole.log('REMOVING', el);\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.attrd('index');\n\t\tconfig.map.splice(index, 1);\n\t\tSET(path, config);\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.CLASS .button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.CLASS .button-add:hover { background-color: #F8F8F8; }\n\t.CLASS .button-add:active { background-color: #E0E0E0; }\n\n\t.CLASS .ui-dark .button-add { border-color: #404040; color: #FFF; }\n\t.CLASS .ui-dark .button-add:hover { background-color: #303030; }\n\t.CLASS .ui-dark .button-add:active { background-color: #404040; }\n\n\t.maparray-section > label { display: block; background-color: #f0f0f0; margin: -8px -8px 8px; padding: 8px; border-bottom: 1px solid #e0e0e0; }\n\t.maparray-section { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.maparray-keyvalue .ui-keyvalue-item-key { width: 50% !important; }\n\t.maparray-keyvalue .ui-keyvalue-item-value { margin: 0 32px 0 50% !important; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"print": "<script total>\n\n\texports.id = 'print';\n\texports.name = 'Print';\n\texports.group = 'Common';\n\texports.version = '5';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Total.js';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\n\t\tfunction serializer(key, value) {\n\t\t\treturn value && value.type === 'Buffer' && value.data ? ('<Buffer ' + value.data.splice(0, 10).map(n => n.toString(16).padLeft(2, '0')).join('') + '...') : value;\n\t\t}\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = '<Buffer ' + data.toString('hex').substring(0, 10) + '...';\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\tif (output) {\n\t\t\t\toutput = JSON.stringify(output, serializer);\n\t\t\t\tinstance.status(output, 200);\n\t\t\t}\n\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t};\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-bind { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS .json { white-space: pre; }\n\t.CLASS .noscrollbar { max-height: 250px; }\n\t.CLASS .readme { position: absolute; position: absolute; font-size: 11px; right: 5px; margin-top: -5px; cursor: pointer; }\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<body>\n\t<header>\n\t\t<button class=\"exec button\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"!STATUS\" config=\"html pre:Thelpers.jsonformat(JSON.stringify(JSON.parse(value), null, '\\t'));show:value && value.length > 0\" class=\"hidden selectable block\">\n\t\t\t<span class=\"readme\" title=\"Open in new window\"><i class=\"ti ti-window\"></i></span>\n\t\t\t<div class=\"noscrollbar mt5\">\n\t\t\t\t<pre class=\"json\"></pre>\n\t\t\t</div>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (reinit)\n\t\t\treturn;\n\n\t\tvar laststatus;\n\n\t\texports.status = function(status, isinit) {\n\t\t\tlaststatus = status;\n\t\t};\n\n\t\texports.element.on('click', '.readme', function() {\n\t\t\tFUNC.readme('Debug', '```json\\n' + JSON.stringify(JSON.parse(laststatus), null, '  ') + '\\n```');\n\t\t});\n\n\t});\n</script>",
			"printjson": "<script total>\n\n\texports.id = 'printjson';\n\texports.name = 'Print JSON';\n\texports.group = 'Common';\n\texports.version = '2';\n\texports.icon = 'ti ti-print';\n\texports.author = 'Martin Smola';\n\texports.config = { repo: false, data: true };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.data !== false) {\n\t\t\t\tif (data instanceof Buffer)\n\t\t\t\t\tdata = data.toString('hex').substring(0, 200);\n\t\t\t}\n\n\t\t\tvar count = 0;\n\n\t\t\tfor (var key in config) {\n\t\t\t\tif (config[key])\n\t\t\t\t\tcount++;\n\t\t\t}\n\n\t\t\tvar output = count > 1 ? {} : null;\n\n\t\t\tif (config.repo) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.repo = $.repo;\n\t\t\t\telse\n\t\t\t\t\toutput = $.repository;\n\t\t\t}\n\n\t\t\tif (config.data) {\n\t\t\t\tif (output)\n\t\t\t\t\toutput.data = $.data;\n\t\t\t\telse\n\t\t\t\t\toutput = $.data;\n\t\t\t}\n\n\t\t\toutput && instance.status(output, 200);\n\t\t\t$.destroy();\n\t\t};\n\n\t\tinstance.trigger = function() {\n\t\t\tinstance.status('');\n\t\t}\n\n\t};\n\n</script>\n\n<style>\n\t.CLASS footer > ui-component { margin: 10px; }\n\t.CLASS pre { font-size: 10px; margin: 0; padding: 5px; background-color: #F0F0F0; border-radius: var(--radius); }\n\t.CLASS button { float: right; height: 20px; font-size: 11px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: transparent; margin: 0; padding: 0 5px; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.CLASS .ui-objecttree { background-color: #f0f0f0; padding: 4px; }\n\n\t.ui-dark .CLASS pre { background-color: #404040; tab-size: 2; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<readme>\nThe component prints incoming data in a JSON format.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.repo\" config=\"type:checkbox\">Shows repository</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.data\" config=\"type:checkbox\">Shows data</ui-component>\n\t</div>\n</settings>\n\n<script>\n\tFUNC.printjson_click = function(type, data) { // type = path/data\n\t\tnavigator.clipboard.writeText(type === 'path' ? data : STRINGIFY(data)).catch(e => console.error(e));\n\t};\n\n\t$('body').on('click', '.ui-objecttree .ti-copy, .ui-objecttree .ti-link', function(){\n\t\tvar el = $(this);\n\t\tvar iscopy = el.hclass('ti-copy');\n\t\tel.tclass(iscopy ? 'ti-copy' : 'ti-link').tclass('ti-check');\n\t\tsetTimeout(function(){\n\t\t\tel.tclass('ti-check').tclass(iscopy ? 'ti-copy' : 'ti-link');\n\t\t}, 2000);\n\t});\n</script>\n\n<body>\n\t<header>\n\t\t<button class=\"exec\" data-exec=\"FUNC.trigger\">Clear</button>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-component name=\"objecttree\" path=\"!STATUS\" config=\"exec:FUNC.printjson_click\" class=\"selectable\"></ui-component>\n\t</footer>\n</body>",
			"read": "<script total>\n\n\texports.id = 'read';\n\texports.name = 'Read';\n\texports.group = 'Common';\n\texports.version = '3';\n\texports.icon = 'ti ti-filter';\n\texports.author = 'Total.js';\n\texports.config = { path: '', schema: [], keep: false };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'action';\n\n\texports.make = function(instance, config) {\n\n\t\tvar convert = function(item, value) {\n\t\t\tswitch (item.convert) {\n\t\t\t\tcase 'empty':\n\t\t\t\t\treturn value;\n\t\t\t\tcase 'uid':\n\t\t\t\t\treturn UID();\n\t\t\t\tcase 'guid':\n\t\t\t\t\treturn GUID();\n\t\t\t\tcase 'upper':\n\t\t\t\t\treturn value == null ? '' : value.toString().toUpperCase();\n\t\t\t\tcase 'lower':\n\t\t\t\t\treturn value == null ? '' : value.toString().toLowerCase();\n\t\t\t\tcase 'capitalize':\n\t\t\t\t\treturn value == null ? '' : value.toString().capitalize();\n\t\t\t\tcase 'number':\n\t\t\t\t\treturn U.parseFloat(value);\n\t\t\t\tcase 'string':\n\t\t\t\t\treturn typeof(value) === 'string' ? value : value == null ? '' : value.toString();\n\t\t\t\tcase 'boolean':\n\t\t\t\t\treturn U.parseBoolean(value);\n\t\t\t\tcase 'date':\n\t\t\t\t\tif (value instanceof Date)\n\t\t\t\t\t\treturn value;\n\t\t\t\t\treturn value == null ? new Date() : typeof(value) === 'number' ? new Date(value) : value.toString().parseDate();\n\t\t\t\tcase 'tobase64':\n\t\t\t\tcase 'tohex':\n\t\t\t\t\treturn value instanceof Buffer ? value.toString(item.convert.substring(2)) : value == null ? '' : Buffer.from(value).toString(item.convert.substring(2));\n\t\t\t\tcase 'frombase64':\n\t\t\t\tcase 'fromhex':\n\t\t\t\t\treturn typeof(value) === 'string' ? (value.indexOf(':') === -1 ? Buffer.from(value, item.convert.substring(4)) : value.base64ToBuffer()) : null;\n\t\t\t\tcase 'tojson':\n\t\t\t\t\treturn JSON.stringify(value);\n\t\t\t\tcase 'fromjson':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.parseJSON(true) : null;\n\t\t\t\tcase 'ascii':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.toASCII() : value == null ? '' : value.toString().toASCII();\n\t\t\t\tcase 'slug':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.slug() : value == null ? '' : value.toString().slug();\n\t\t\t\tcase 'crc32':\n\t\t\t\tcase 'crc32unsigned':\n\t\t\t\t\treturn typeof(value) === 'string' ? value.hash(item.convert) : value == null ? '' : value.toString().hash(item.convert);\n\t\t\t\tcase 'md5':\n\t\t\t\tcase 'sha1':\n\t\t\t\tcase 'sha256':\n\t\t\t\tcase 'sha512':\n\t\t\t\t\treturn value == null ? '' : F.Crypto.createHash(item.convert).update(value instanceof Buffer ? value : value.toString()).digest('hex');\n\t\t\t}\n\n\t\t\treturn value;\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = $.data;\n\n\t\t\tif (config.path)\n\t\t\t\tdata = config.path ? U.get(data, config.path) : $.data;\n\n\t\t\tvar obj = {};\n\n\t\t\tfor (var item of config.schema) {\n\t\t\t\tvar val = item.pathfrom.indexOf('.') === -1 ? data[item.pathfrom] : U.get(data, item.pathfrom);\n\n\t\t\t\tif (item.convert && item.convert !== 'empty')\n\t\t\t\t\tval = convert(item, val);\n\n\t\t\t\tif (item.pathto) {\n\t\t\t\t\tif (item.pathto.indexOf('.') === -1)\n\t\t\t\t\t\tobj[item.pathto] = val;\n\t\t\t\t\telse\n\t\t\t\t\t\tU.set(obj, item.pathto, val);\n\t\t\t\t} else {\n\t\t\t\t\tobj = val;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (config.keep) {\n\t\t\t\tfor (let key in obj)\n\t\t\t\t\t$.data[key] = obj[key];\n\t\t\t\t$.send('output');\n\t\t\t} else {\n\t\t\t\tif (config.path && config.rewrite)\n\t\t\t\t\tU.set($.data, config.path, obj);\n\t\t\t\t$.send('output', obj);\n\t\t\t}\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThis component reads specific values according to the configured map.\n</readme>\n\n<style>\n\t.CLASS-settings .fields { border: 1px solid #E0E0E0; border-radius: var(--radius); }\n\t.CLASS-settings figure { height: 24px; border-top: 1px solid #E0E0E0; line-height: 23px; font-size: 11px; }\n\t.CLASS-settings figure .edit-open { background-color: #F0F0F0; }\n\t.CLASS-settings figure .convert { width: 20%; line-height: 23px; float: left; padding: 0 5px; cursor: pointer; }\n\t.CLASS-settings figure .path { width: 35%; line-height: 14px; float: left; }\n\t.CLASS-settings figure .path span { float: left; width: 50px; line-height: 23px; text-align: center; }\n\t.CLASS-settings figure .path div { outline: 0; margin-left: 50px; line-height: 23px; padding: 0 5px; min-height: 23px; }\n\t.CLASS-settings figure .to div { color: #4285F4; }\n\t.CLASS-settings figure .from div { color: #B9261A; }\n\t.CLASS-settings figure .controls { float: right; width: 30px; padding: 0; margin: 0; border-left: 1px solid #E0E0E0; text-align: center; }\n\t.CLASS-settings figure .controls span { cursor: pointer; margin-left: 5px; }\n\t.CLASS-settings figure .controls span:first-child { margin-left: 0; }\n\t.CLASS-settings figure:first-child { border-top: 0; line-height: 24px; }\n\t.CLASS-settings figure:first-child div { line-height: 24px; }\n\t.CLASS footer { height: 40px; line-height: 40px; padding: 0 10px; font-size: 12px; }\n\n\t.ui-dark .CLASS-settings .fields { border-color: #404040; }\n\t.ui-dark .CLASS-settings figure { border-top-color: #404040; }\n\t.ui-dark .CLASS-settings figure .edit-open { background-color: #404040; }\n\t.ui-dark .CLASS-settings figure .controls { border-left-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer is=\"is-footer\" path=\"CONFIG.path\" config=\"show;text span\">\n\t\tPath: <span class=\"b\"></span>\n\t</footer>\n</body>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"placeholder:path.to.property;monospace:1\">Load data from the specific property/field</ui-component>\n\t\t\t<div class=\"help\">Optional. The data for the model will be loaded from the specific property/field.</div>\n\t\t\t<ui-bind path=\"?.path\" config=\"show\" class=\"hidden block\">\n\t\t\t\t<hr />\n\t\t\t\t<ui-component name=\"input\" path=\"?.rewrite\" config=\"type:checkbox\"><b>Rewrite value only</b> (otherwise, it will replace entire message data)</ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<ui-bind path=\"?.path\" config=\"hide\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.keep\" config=\"type:checkbox\"><b>Keep the message data</b> and transform only specific paths</ui-component>\n\t\t\t\t<hr />\n\t\t\t</ui-bind>\n\n\t\t\t<div class=\"caption m\">\n\t\t\t\t<div class=\"toolbar\">\n\t\t\t\t\t<nav>\n\t\t\t\t\t\t<button class=\"exec\" data-exec=\"tmpread.add\"><i class=\"ti ti-plus-circle\"></i>Add</button>\n\t\t\t\t\t</nav>\n\t\t\t\t</div>\n\t\t\t\t<label>Paths</label>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.schema\" config=\"template:figure --> data-id;show:value && value.length\" class=\"fields m block\">\n\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t{{ foreach m in value }}\n\t\t\t\t\t<figure data-id=\"{{ m.id }}\">\n\t\t\t\t\t\t<div class=\"controls\">\n\t\t\t\t\t\t\t<span class=\"exec\" data-exec=\"tmpread.rem\" title=\"Remove\"><i class=\"ti ti-trash red\"></i></span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path from\">\n\t\t\t\t\t\t\t<span>From</span><div class=\"monospace edit hellip\" data-type=\"from\" data-edit=\"exec:tmpread.path;required:1\">{{ m.pathfrom }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"path to\">\n\t\t\t\t\t\t\t<span>To</span><div class=\"edit monospace hellip\" data-type=\"to\" data-edit=\"exec:tmpread.path;selectall:1\">{{ m.pathto }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"convert\">\n\t\t\t\t\t\t\t<div class=\"exec hellip\" data-exec=\"tmpread.convert\">{{ m.convert | tmpreadconvert }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</figure>\n\t\t\t\t\t{{ end }}\n\t\t\t\t</script>\n\t\t\t</ui-bind>\n\t\t</div>\n\t</div>\n</settings>\n\n<script>\n\n\tTOUCH(function(exports, reinit) {\n\n\t\texports.settings = function(meta) {\n\n\t\t\tvar defitem = { pathfrom: 'Temperature', pathto: 'temperature', convert: 'empty' };\n\n\t\t\tif (!meta.config.schema.length) {\n\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\tmeta.config.schema.push(obj);\n\t\t\t}\n\n\t\t\tvar tmp = W.tmpread;\n\n\t\t\tif (!tmp) {\n\n\t\t\t\ttmp = {};\n\t\t\t\ttmp.add = function(el) {\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar obj = CLONE(defitem);\n\t\t\t\t\tobj.id = Math.random().toString(36).substring(4);\n\t\t\t\t\tscope.push('schema', obj);\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.rem = function(el) {\n\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\tvar model = scope.get();\n\t\t\t\t\tvar index = model.schema.findIndex('id', id);\n\t\t\t\t\tmodel.schema.splice(index, 1);\n\t\t\t\t\tscope.update('schema');\n\t\t\t\t\tscope.change('*');\n\t\t\t\t};\n\n\t\t\t\ttmp.path = function(opt, next) {\n\t\t\t\t\topt.value = opt.value.replace(/(;|\\s|,)/g, '').trim();\n\t\t\t\t\tvar scope = opt.element.scope();\n\t\t\t\t\tvar id = ATTRD(opt.element);\n\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\titem['path' + opt.element.attrd('type')] = opt.value;\n\t\t\t\t\tscope.change('*');\n\t\t\t\t\tnext(true);\n\t\t\t\t};\n\n\t\t\t\ttmp.convert = function(el) {\n\t\t\t\t\tvar opt = {};\n\t\t\t\t\topt.element = el;\n\t\t\t\t\topt.align = 'left';\n\t\t\t\t\topt.raw = true;\n\t\t\t\t\topt.items = tmp.convertors;\n\t\t\t\t\topt.callback = function(selected) {\n\t\t\t\t\t\tvar scope = el.scope();\n\t\t\t\t\t\tvar id = ATTRD(el);\n\t\t\t\t\t\tvar item = scope.get().schema.findItem('id', id);\n\t\t\t\t\t\tif (item)\n\t\t\t\t\t\t\titem.convert = selected.id;\n\t\t\t\t\t\tel.html(selected.name);\n\t\t\t\t\t\tscope.change('*');\n\t\t\t\t\t};\n\t\t\t\t\tSETTER('directory/show', opt);\n\t\t\t\t};\n\n\t\t\t\ttmp.convertors = [];\n\t\t\t\ttmp.convertors.push({ id: 'empty', name: 'No convertor' });\n\t\t\t\ttmp.convertors.push({ id: 'upper', name: 'Upper case' });\n\t\t\t\ttmp.convertors.push({ id: 'lower', name: 'Lower case' });\n\t\t\t\ttmp.convertors.push({ id: 'capitalize', name: 'Capitalize case' });\n\t\t\t\ttmp.convertors.push({ id: 'number', name: 'To number' });\n\t\t\t\ttmp.convertors.push({ id: 'string', name: 'To string' });\n\t\t\t\ttmp.convertors.push({ id: 'boolean', name: 'To boolean' });\n\t\t\t\ttmp.convertors.push({ id: 'date', name: 'To date' });\n\t\t\t\ttmp.convertors.push({ id: 'ascii', name: 'Remove diacritics' });\n\t\t\t\ttmp.convertors.push({ id: 'slug', name: 'To slug' });\n\t\t\t\ttmp.convertors.push({ id: 'md5', name: 'To MD5' });\n\t\t\t\ttmp.convertors.push({ id: 'sha1', name: 'To SHA1' });\n\t\t\t\ttmp.convertors.push({ id: 'sha256', name: 'To SHA256' });\n\t\t\t\ttmp.convertors.push({ id: 'sha512', name: 'To SHA512' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32', name: 'To CRC32' });\n\t\t\t\ttmp.convertors.push({ id: 'crc32unsigned', name: 'To CRC32 unsigned' });\n\t\t\t\ttmp.convertors.push({ id: 'tobase64', name: 'To BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'tohex', name: 'To Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'tojson', name: 'To JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'frombase64', name: 'From BASE64' });\n\t\t\t\ttmp.convertors.push({ id: 'fromhex', name: 'From Hex' });\n\t\t\t\ttmp.convertors.push({ id: 'fromjson', name: 'From JSON' });\n\t\t\t\ttmp.convertors.push({ id: 'uid', name: 'Generate UI' + 'D' });\n\t\t\t\ttmp.convertors.push({ id: 'guid', name: 'Generate GUI' + 'D' });\n\n\t\t\t\tThelpers.tmpreadconvert = function(val) {\n\t\t\t\t\treturn tmp.convertors.findValue('id', val, 'name', DEF.empty);\n\t\t\t\t};\n\n\t\t\t\tW.tmpread = tmp;\n\t\t\t}\n\t\t};\n\n\t});\n\n</script>",
			"switch": "<script total>\n\n\texports.id = 'switch';\n\texports.name = 'Switch';\n\texports.icon = 'ti ti-sitemap';\n\texports.group = 'Common';\n\texports.author = 'Total.js';\n\texports.version = '4';\n\texports.config = { conditions: [{ operator: 'eq', value: 'Hello world', type: 'string' }] };\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output1', name: 'Output #1' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar check, getValue1;\n\t\tvar COND = [];\n\n\t\tconst get = (obj, path) => path.split(\".\").reduce((r, k) => r?.[k], obj);\n\n\t\tvar getValue2 = (path, type, data, repo) => {\n\n\t\t\tvar source;\n\t\t\tswitch (type) {\n\t\t\t\tcase 'data':\n\t\t\t\t\tsource = data;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'repo':\n\t\t\t\t\tsource = repo;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables':\n\t\t\t\t\tsource = instance.main.variables;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'variables2':\n\t\t\t\t\tsource = instance.main.variables2;\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tif (!path)\n\t\t\t\treturn source;\n\n\t\t\tif (typeof source === 'object' && !Array.isArray(source) && source != null)\n\t\t\t\treturn get(source, path);\n\t\t};\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar data = getValue1($.data, $.repo, instance.main.variables, instance.main.variables2, get);\n\n\t\t\tvar sent = false;\n\t\t\tfor (let i = 0; i < COND.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tlet ok = COND[i](data, $.data, $.repo);\n\t\t\t\t\tif (ok) {\n\t\t\t\t\t\t$.send('output' + (i + 1), $.data);\n\t\t\t\t\t\tsent = true;\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t\tconsole.error('muj error', e);\n\t\t\t\t}\n\t\t\t}\n\t\t\t!sent && $.destroy();\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tif (!config.source || !config.conditions.length)\n\t\t\t\treturn;\n\n\t\t\tconst conditions = config.conditions;\n\t\t\tCOND = [];\n\n\t\t\tconditions.forEach(function eachCondition(cond, index){\n\t\t\t\tconst { operator, value, type } = cond;\n\n\t\t\t\tswitch (operator) {\n\t\t\t\t\tcase 'isnull':\n\t\t\t\t\t\tCOND[index] = (v) => v == null;\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'true':\n\t\t\t\t\tcase 'false':\n\t\t\t\t\t\tCOND[index] = (v) => v == operator.parseBoolean();\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'isempty':\n\t\t\t\t\t\tCOND[index] = (v) => typeof(v) == 'string' && v == '';\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'haskey':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (typeof v !== 'object' || Array.isArray(v) || v == null)\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\treturn v.hasOwnProperty(val);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'includes':\n\t\t\t\t\t\tif (type === 'number')\n\t\t\t\t\t\t\tvalue = +value;\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v => v.includes(value);\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\t\t\t\t\t\tCOND[index] = (v, data, repo) => {\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tvar result = fn(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\treturn result;\n\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\tconsole.log('invalid expresion', fn.toString());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tCOND[index] = (v) => {\n\t\t\t\t\t\t\tif (!(v instanceof Array) && typeof v !== 'string' && (type !== 'number' || type !== 'string'))\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\treturn v.indexOf(value) > -1;\n\t\t\t\t\t\t};\n\t\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tswitch (type) {\n\t\t\t\t\tcase 'number':\n\t\t\t\t\tcase 'string':\n\t\t\t\t\t\tCOND[index] = compile[type](operator, value);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'data':\n\t\t\t\t\tcase 'repo':\n\t\t\t\t\tcase 'variables':\n\t\t\t\t\tcase 'variables2':\n\t\t\t\t\tcase 'expression':\n\t\t\t\t\t\tvar fn, fnEx;\n\t\t\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\t\t\tfn = (data, val) => {\n\t\t\t\t\t\t\t\tconst [ v1, v2 ] = val.split(',').trim();\n\t\t\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t\t\t};\n\t\t\t\t\t\t} else if (ops.list.includes(operator)) {\n\t\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tfn = NOOP;\n\t\t\t\t\t\t\tconsole.log('Invalid operator', operator);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (type === 'expression')\n\t\t\t\t\t\t\tfnEx = new Function('data', 'repo', 'variables', 'variables2', value.indexOf('return') > -1 ? value : 'return ' + value + ';');\n\n\t\t\t\t\t\tCOND[index] = (val1, data, repo) => {\n\t\t\t\t\t\t\tvar val2;\n\t\t\t\t\t\t\tif (type === 'expression') {\n\t\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\t\tval2 = fnEx(data, repo, instance.main.variables, instance.main.variables2);\n\t\t\t\t\t\t\t\t} catch(e) {\n\t\t\t\t\t\t\t\t\tconsole.error('Invalid function or expresion', fn.toString());\n\t\t\t\t\t\t\t\t\tconsole.error(e);\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\tval2 = getValue2(value, type, data, repo, fnEx);\n\n\t\t\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t\t\t};\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tinstance.outputs = [];\n\n\t\t\tCOND.forEach((fn, i) => {\n\t\t\t\tinstance.outputs.push({ id: 'output' + (i + 1), name: conditions[i].name || 'Output #' + (i + 1) });\n\t\t\t\tif (typeof fn !== 'function')\n\t\t\t\t\tinstance.throw('Invalid settings for output: ' + (i + 1));\n\t\t\t});\n\n\t\t\tif (config.source === 'expression')\n\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', 'return ' + config.path + ';');\n\t\t\telse {\n\t\t\t\ttry {\n\t\t\t\t\tvar str = 'if ({2} && (typeof {0} !== \\'object\\' || {0} == null)) return; return {1};'.format(config.source, config.path ? 'get({0}, \\'{1}\\')'.format(config.source, config.path) : config.source, config.path ? 'true' : 'false');\n\t\t\t\t\tgetValue1 = new Function('data', 'repo', 'variables', 'variables2', 'get', str);\n\t\t\t\t} catch(e) {\n\t\t\t\t\tinstance.throw(e.stack);\n\t\t\t\t\tconsole.error(str);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tinstance.save();\n\t\t};\n\n\t\tconst ops = {};\n\t\tops.gt = (v1, v2) => v1 > v2;\n\t\tops.ge = (v1, v2) => v1 >= v2;\n\t\tops.lt = (v1, v2) => v1 < v2;\n\t\tops.le = (v1, v2) => v1 <= v2;\n\t\tops.eq = (v1, v2) => v1 == v2;\n\t\tops.seq = (v1, v2) => v1 === v2;\n\t\tops.neq = (v1, v2) => v1 != v2;\n\t\tops.sneq = (v1, v2) => v1 !== v2;\n\t\tops.between = (v1, v2, v3) => v2 > v1 && v2 < v3;\n\t\tops.notbetween = (v1, v2, v3) => v2 < v1 || v2 > v3;\n\t\tops.indexOf = (v1, v2) => v1.indexOf(v2) > -1;\n\n\t\tops.list = Object.keys(ops);\n\n\t\tconst compile = {\n\t\t\tnumber_ops: [ 'gt', 'lt', 'eq', 'seq', 'neq', 'sneq', 'ge', 'le', 'between', 'notbetween', 'indexOf' ],\n\t\t\tnumber: (operator, val2) => {\n\n\t\t\t\tif (!compile.number_ops.includes(operator))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar fn;\n\n\t\t\t\tif (operator === 'between' || operator === 'notbetween') {\n\t\t\t\t\tfn = (data) => {\n\t\t\t\t\t\tconst [ v1, v2 ] = val2.split(',').trim();\n\t\t\t\t\t\tif (!v1 || isNaN(v1) || !v2 || isNaN(v2))\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\treturn ops[operator](+v1, data, +v2);\n\t\t\t\t\t};\n\t\t\t\t} else {\n\t\t\t\t\tval2 = U.parseFloat(val2);\n\t\t\t\t\tif (isNaN(val2))\n\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\tfn = (val1) => ops[operator](val1, val2);\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'number')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1);\n\t\t\t\t};\n\n\t\t\t},\n\t\t\tstring: (operator, val2) => {\n\n\t\t\t\tvar fn;\n\n\t\t\t\tswitch(operator) {\n\t\t\t\t\tcase 'eq':\n\t\t\t\t\tcase 'neq':\n\t\t\t\t\tcase 'seq':\n\t\t\t\t\tcase 'sneq':\n\t\t\t\t\tcase 'indexOf':\n\t\t\t\t\t\tfn = ops[operator];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'startsWith':\n\t\t\t\t\tcase 'endsWith':\n\t\t\t\t\t\tfn = val1 => val1[operator](val2);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase 'regex':\n\t\t\t\t\t\tvar match = val2.match(new RegExp('^/(.*?)/([gimy]*)$'));\n\t\t\t\t\t\tif (!match || !match.length || match.length < 2)\n\t\t\t\t\t\t\treturn NOOP;\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tfn = val1 => new RegExp(match[1], match[2]).test(val1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\treturn function(val1) {\n\t\t\t\t\tif (typeof val1 !== 'string')\n\t\t\t\t\t\treturn false;\n\t\t\t\t\treturn fn(val1, val2);\n\t\t\t\t};\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\n## Source and Path\nUse the **Source** dropdown to select where to look for the value to use in the conditions check.\nSet a **Path** if the value is not the data itself. It supports dot notation: `position.longitude` or `sensor.0.value` for arrays, it does not support `sensor[0].value`.\n**Expression** supports javascript syntax. Should return a value which will be used in condition check as `data`. Available variables: data, repo, variables, variables2\n**Expressions example:**\n```js\ndata.value - variables.offset\n```\n\n## Conditions\nEach of the **Conditions** corresponds to an output in the exact same order. First condition -> First output.\n\n**Operator**\nNot all operators work on all data types. For example it is not possible to use `&gt;` or `&lt;` for strings, etc.\n*index of* only works for data of type array or string.\n**Expression operator**\nIn this case the **type** field is ignored and the expression in the **value** field must return `true` or `false`. Available variables: data, repo, variables, variables2.\nExpressions operator example:\n```js\ndata.value > variables.threshold;\n```\nor with a conditions\n```js\nif (typeof data.value !== 'number') return false; else return data.value > parseInt(variables.threshold);\n```\n\n**Expression type**\nThe expression in the **value** field must return a value which will be used in the given operation. Available variables: data, repo, variables, variables2.\nExpressions example:\n```js\ndata.value - variables.offset\n```\n\n**Between operator** only works with datatype number and the value must be two comma separated values. e.g.: `2,4` so the condition becomes `val &gt; 2 && val &lt; 4`\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t\t<label class=\"ui-input-label\">Source + Path to the value</label>\n\t\t<div class=\"switch-input-group wide m\">\n\t\t\t<ui-component name=\"input\" path=\"?.source\" config=\"dirsource:REPO.switch_datasources\" default=\"'data'\"></ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.path\"></ui-component>\n\t\t</div>\n\t\t<section class=\"switch-conditions m\">\n\t\t\t<label class=\"ui-input-label\">Switch conditions</label>\n\t\t\t<div class=\"switch-thead\">\n\t\t\t\t<div class=\"row\">\n\t\t\t\t\t<div class=\"col-md-1\">#</div>\n\t\t\t\t\t<div class=\"col-md-2\">Operator</div>\n\t\t\t\t\t<div class=\"col-md-6\">Type + Value</div>\n\t\t\t\t\t<div class=\"col-md-2\">Output name</div>\n\t\t\t\t\t<div class=\"col-md-1\">Action</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<ui-bind path=\"?.conditions\" config=\"template:.switch-condition -> data-index\" clas=\"block\">\n\t\t\t\t<ui-component name=\"movable\" path=\"?.conditions\" config=\"selector:.dragme;exec:FUNC.switch_condition_dragged\">\n\t\t\t\t\t<script type=\"text/html\">\n\t\t\t\t\t\t{{ foreach con in value }}\n\t\t\t\t\t\t<div class=\"switch-condition dragme\" data-index=\"{{ $index }}\" draggable=\"true\">\n\t\t\t\t\t\t\t<div class=\"row\">\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t\t{{ ($index + 1) }}.\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].operator\" config=\"dirsource:REPO.switch_operators\"></ui-component>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-6\">\n\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.conditions[{{ $index }}].operator\" config=\"hide:value == 'true' || value == 'false' || value == 'isnull' || value == 'isempty';.switch-input-group:value!=='expression'\" class=\"block\">\n\t\t\t\t\t\t\t\t\t\t<ui-bind path=\"?.conditions[{{ $index }}].operator\" config=\"hide:value==='expression'\">\n\t\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].type\" config=\"dirsource:REPO.switch_valuetypes\"></ui-component>\n\t\t\t\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].value\" config=\"placeholder:value\"></ui-component>\n\t\t\t\t\t\t\t\t\t</ui-bind>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-2\">\n\t\t\t\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.conditions[{{ $index }}].name\"></ui-component>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t\t<div class=\"col-md-1\">\n\t\t\t\t\t\t\t\t\t<i class=\"ti ti-trash red exec\" data-exec=\"FUNC.switch_remove_condition\"></i>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t{{ end }}\n\t\t\t\t\t</script>\n\t\t\t\t</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<div class=\"help m\">Each condition corresponds to an output index. First condition --> First output, etc.</div>\n\t\t\t<button class=\"button-add exec\" data-exec=\"FUNC.switch_add_condition\">ADD</button>\n\t\t</section>\n\t\t<button class=\"button exec\" style=\"width: 200px;\" data-exec=\"FUNC.switch_readme\"><i class=\"ti ti-info-circle blue\"></i>Show configuration info</button>\n\t</div>\n</settings>\n\n<script>\n\n\tFUNC.switch_readme = function() {\n\t\tEXEC('flow/readme', flow.info.selected.component);\n\t};\n\n\tFUNC.switch_add_condition = function(el) {\n\t\tvar scope = el.scope();\n\t\tPUSH(scope.path + '.conditions', { operator: '==', type: 'string', value: '' });\n\t};\n\n\tFUNC.switch_remove_condition = function(el) {\n\t\tvar path = el.scope().path;\n\t\tvar config = GET(path);\n\t\tvar index = el.closest('.switch-condition').attrd('index');\n\t\tconfig.conditions.splice(index, 1);\n\t\tSET(path, config);\n\t\tconsole.log(config);\n\t};\n\n\tFUNC.switch_condition_dragged = function(list, dragged, target) {\n\t\tdragged = $(dragged);\n\t\tvar dragged_index = dragged.attrd('index');\n\t\tvar target_index = $(target).attrd('index');\n\t\tvar path = dragged.scope().path;\n\t\tvar config = GET(path);\n\t\tvar dragged_item = config.conditions.splice(dragged_index, 1)[0];\n\t\tconfig.conditions.splice(target_index, 0, dragged_item);\n\t\tSET(path, config);\n\t};\n\n\tFUNC.switch_tooltip = function(el) {\n\t\tvar opt = {};\n\t\topt.element = el;\n\t\tvar id = el.attrd('id');\n\t\topt.html = REPO.switch_tooltips[id];\n\n\t\tSETTER('tooltip', 'show', opt);\n\t};\n\n\tREPO.switch_datasources = 'data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_valuetypes = 'number|Number,string|String,data|Message data,repo|Message repository,variables|Local variables,variables2|Global variables,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\tREPO.switch_operators = 'gt|>,lt|<,eq|==,seq|===,sneq|!==,ge|>=,le|<=,between|between,isnull|is null,isempty|is empty,indexOf|index of,startsWith|starts with,endsWith|ends with,regex|regular expression,true|is true,false|is false,includes|includes,haskey|has key,expression|Expression'.split(',').map(d => { const [ id, name ] = d.split('|'); return { id, name }; });\n\n</script>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n\n\t.button-add { height: 24px; font-size: 12px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #f0f0f0; margin: 0; padding: 2px 10px; }\n\t.button-add:hover { background-color: #F8F8F8; }\n\t.button-add:active { background-color: #E0E0E0; }\n\n\t.ui-dark .button-add { border-color: #404040; color: #FFF; background-color: #202020; }\n\t.ui-dark .button-add:hover { background-color: #303030; }\n\t.ui-dark .button-add:active { background-color: #404040; }\n\n\t.switch-input-group { clear: both; height: 36px; }\n\t.switch-input-group > ui-component:first-child .ui-input-control { border-right: none; border-bottom-right-radius: 0; border-top-right-radius: 0; width: 120px; float: left; background-color: #f0f0f0; }\n\t.switch-input-group > ui-component:last-child .ui-input-control { border-bottom-left-radius: 0; border-top-left-radius: 0; float: left; width: calc(100% - 120px); }\n\t.switch-input-group.wide > ui-component:first-child .ui-input-control { width: 200px; }\n\t.switch-input-group.wide > ui-component:last-child .ui-input-control { width: calc(100% - 200px); }\n\t.switch-conditions { border: 1px solid #e0e0e0; padding: 8px; border-radius: 3px; }\n\t.switch-condition { border: 1px solid #e0e0e0; border-radius: 3px; padding: 8px; margin-bottom:4px; }\n\t.switch-condition > .row > .col-md-1 { height: 36px; line-height: 36px; }\n\t.switch-help { background-color: #e7e7ff; border-radius: 3px; padding: 4px; }\n\t.switch-thead { padding: 8px; margin-bottom:4px; }\n\n\t.ui-dark .switch-conditions { border-color: #404040; }\n\t.ui-dark .switch-condition { border-color: #404040; }\n\t.ui-dark .switch-help { border-color: #404040; }\n\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n</body>",
			"postgresql": "<script total>\n\n\texports.id = 'postgresql';\n\texports.name = 'PostgreSQL';\n\texports.group = 'Databases';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '2';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.npm = ['pg'];\n\texports.POOLS = {};\n\n\texports.make = function(instance, config) {\n\n\t\tconst { Pool } = require('pg')\n\t\tvar PG;\n\n\t\tinstance.message = function($) {\n\t\t\tvar data = $.data;\n\n\t\t\tif (!PG || !PG.pool)\n\t\t\t\treturn $.send('output', { error: 'Postgre connection not configured' });\n\n\t\t\tPG.pool.query(data.query, (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\treturn $.send('output', { error: err.message });\n\t\t\t\t\t\n\t\t\t\tvar { command, rows, rowCount } = response;\n\t\t\t\t$.send('output', { command, rows, rowCount });\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\t// same connection, ignore\n\t\t\tif (!config.connection || (PG && PG.string === config.connection))\n\t\t\t\treturn;\n\n\t\t\tinstance.close();\n\n\t\t\t// already existing connection, use it\n\t\t\tif (exports.POOLS[config.connection]) {\n\t\t\t\tPG = exports.POOLS[config.connection];\n\t\t\t\tPG.count++;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tvar pool = new Pool({ connectionString: config.connection });\n\t\t\tPG = exports.POOLS[config.connection] = {\n\t\t\t\tpool,\n\t\t\t\tcount: 1,\n\t\t\t\tstring: config.connection\n\t\t\t};\n\n\t\t\tpool.on('error', (err, client) => {\n\t\t\t\tconsole.log('[PG] Unexpected error on idle client', err);\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\n\t\t\tpool.query('SELECT NOW() AS message;', (err, response) => {\n\t\t\t\tif (err)\n\t\t\t\t\tinstance.throw(err.message);\n\t\t\t});\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\tif (PG) {\n\t\t\t\tPG.count--;\n\t\t\t\tif (PG.count === 0) {// last component using this connection so destroy it\n\t\t\t\t\tPG.pool.end();\n\t\t\t\t\tdelete exports.POOLS[config.connection];\n\t\t\t\t}\n\t\t\t\tPG = null;\n\t\t\t}\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nPostgreSQL\n\n## Input\nExpected data:\n```javascript\n{\n\tquery: 'SELECT * FROM tblname;'\n}\n```\nOutput:\n```javascript\n{\n\tcommand: 'INSERT', // SELECT, etc.\n\trows: [], // \n\trowCount: 1\n}\n```\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row m\">\n\t\t\t<div class=\"col-md-12\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.connection\" config=\"required:1\">Connection string</ui-component>\n\t\t\t\t<div class=\"help\">e.g.: postgresql://user:password@localhost:5432/dbname</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<script>\n\n</script>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"STATUS.error\" config=\"text\" class=\"red\"></ui-bind>\n\t</footer>\n</body>",
			"tschema": "<script total>\n\n\texports.id = 'tschema';\n\texports.name = 'Data schema';\n\texports.icon = 'ti ti-check-circle';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { schema: '*name:String, *email:Email', partial: false, strerr: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar schema;\n\n\t\tinstance.message = function($) {\n\t\t\tvar output = schema.transform($.data, config.partial);\n\t\t\tif (output.error)\n\t\t\t\t$.send('error', config.strerr ? output.error.toString() : output.error);\n\t\t\telse\n\t\t\t\t$.send('output', output.response);\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tschema = config.schema.toJSONSchema();\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe component `Schema` can very quickly check incoming data according to the defined schema.\n\n__Supported types__:\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.schema\" config=\"placeholder:name\\:Name, *email\\:Email\">Schema</ui-component>\n\t\t<hr />\n\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"CONFIG.schema\" config=\"text\" class=\"block monospacce\"></ui-bind>\n\t</footer>\n</body>",
			"taction": "<script total>\n\n\texports.id = 'taction';\n\texports.name = 'Action';\n\texports.icon = 'ti ti-totaljs';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Total.js';\n\texports.config = { partial: false, name: 'Unknown', input: '', query: '', color: '#68B25B', params: '', user: 0, permissions: '', code: '// model\\n// $.query\\n// $.params\\n// $.headers\\n// $.user\\n\\n$.success();', strerr: false, path: 'response', autoresponse: false };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Response' }, { id: 'error', name: 'Error' }];\n\n\texports.install = function(com) {\n\n\t\tMAIN.flowtaction = {};\n\n\t\tconst ARGS = /\\{{1,2}[a-z0-9_.-\\s]+\\}{1,2}/gi;\n\t\tconst Options = function($, config) {\n\n\t\t\tvar t = this;\n\t\t\tvar data = $.data;\n\n\t\t\tif (!data || typeof(data) !== 'object')\n\t\t\t\tdata = {};\n\n\t\t\tt.id = config.name;\n\t\t\tt.error = new ErrorBuilder();\n\t\t\tt.controller = $.refs.controller;\n\t\t\tt.payload = data.payload || data.model || data.body;\n\n\t\t\tif (typeof(t.payload) !== 'object' || !t.payload)\n\t\t\t\tt.payload = {};\n\n\t\t\tt.message = $;\n\t\t\tt.config = config;\n\t\t\tt.user = data.user;\n\t\t\tt.query = data.query || {};\n\t\t\tt.params = data.params || {};\n\t\t\tt.url = data.url;\n\t\t\tt.language = data.language;\n\t\t\tt.headers = data.headers || {};\n\t\t\tt.files = data.files || [];\n\t\t\tt.cookies = data.cookies || {};\n\t\t\tt.ip = data.ip;\n\t\t\tt.ua = data.ua;\n\t\t\tt.request = data;\n\t\t};\n\n\t\tOptions.prototype = {\n\n\t\t\tget value() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tget model() {\n\t\t\t\treturn this.payload;\n\t\t\t},\n\n\t\t\tset value(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t},\n\n\t\t\tset model(value) {\n\t\t\t\tthis.payload = value;\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.audit = function(message, type) {\n\t\t\tF.audit(this, message ? this.variables(message) : '', type);\n\t\t};\n\n\t\tOptions.prototype.success = function(value) {\n\t\t\tvar self = this;\n\n\t\t\tself.request[self.config.path] = { success: true, value: value };\n\n\t\t\tif (self.config.autoresponse) {\n\t\t\t\tvar refs = self.message.refs;\n\t\t\t\tif (refs) {\n\t\t\t\t\trefs.controller.json(self.request[self.config.path]);\n\t\t\t\t\trefs.controller = null;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tself.message.send('output', self.request);\n\t\t};\n\n\t\tOptions.prototype.cancel = function() {\n\t\t\tvar self = this;\n\t\t\tself.message.destroy();\n\t\t};\n\n\t\tOptions.prototype.successful = function(callback) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, a, b, c) {\n\t\t\t\tif (err)\n\t\t\t\t\tself.invalid(err);\n\t\t\t\telse\n\t\t\t\t\tcallback.call(self, a, b, c);\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.send = Options.prototype.callback = function(value) {\n\n\t\t\tvar self = this;\n\n\t\t\tif (arguments.length == 0) {\n\t\t\t\treturn function(err, response) {\n\t\t\t\t\terr && self.error.push(err);\n\t\t\t\t\tself.callback(response);\n\t\t\t\t};\n\t\t\t}\n\n\t\t\tlet msg = self.message;\n\t\t\tlet refs = msg.refs;\n\t\t\tlet cfg = self.config;\n\n\t\t\tif (self.error.items.length) {\n\t\t\t\tself.request[cfg.path] = cfg.strerr ? self.error.toString() : self.error.output();\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.invalid(self.error);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('error', self.request);\n\n\t\t\t} else {\n\n\t\t\t\tself.request[cfg.path] = value;\n\n\t\t\t\tif (cfg.autoresponse) {\n\t\t\t\t\tif (refs.controller) {\n\t\t\t\t\t\trefs.controller.json(value);\n\t\t\t\t\t\trefs.controller = null;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tmsg.send('output', self.request);\n\t\t\t}\n\t\t};\n\n\t\tOptions.prototype.done = function(arg) {\n\t\t\tvar self = this;\n\t\t\treturn function(err, response) {\n\t\t\t\tif (err) {\n\t\t\t\t\tself.error.push(err);\n\t\t\t\t\tself.callback(null);\n\t\t\t\t} else\n\t\t\t\t\tself.callback({ success: true, value: arg === true ? response : arg });\n\t\t\t};\n\t\t};\n\n\t\tOptions.prototype.invalid = function(error, path, index) {\n\t\t\tvar self = this;\n\t\t\tself.error.push(error, path, index);\n\t\t\tself.callback(null);\n\t\t};\n\n\t\tOptions.prototype.cookie = function(name, value, expire, options) {\n\t\t\tvar self = this;\n\t\t\tif (value === undefined)\n\t\t\t\treturn self.cookies[name];\n\n\t\t\tif (value === null)\n\t\t\t\texpire = '-1 day';\n\n\t\t\tif (self.controller) {\n\t\t\t\tself.controller.cookie(name, value, expire, options);\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t};\n\n\t\tOptions.prototype.variables = function(str, data) {\n\n\t\t\tif (str.indexOf('{') === -1)\n\t\t\t\treturn str;\n\n\t\t\tvar $ = this;\n\n\t\t\treturn str.replace(ARGS, function(text) {\n\t\t\t\tvar l = text[1] === '{' ? 2 : 1;\n\t\t\t\tvar key = text.substring(l, text.length - l).trim();\n\t\t\t\tvar val = null;\n\t\t\t\tvar five = key.substring(0, 5);\n\t\t\t\tif (five === 'user.') {\n\t\t\t\t\tif ($.user) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.user[key] : U.get($.user, key);\n\t\t\t\t\t}\n\t\t\t\t} else if (five === 'data.') {\n\t\t\t\t\tif (data) {\n\t\t\t\t\t\tkey = key.substring(5);\n\t\t\t\t\t\tval = key.indexOf('.') === -1 ? data[key] : U.get(data, key);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tvar six = key.substring(0, 6);\n\t\t\t\t\tif (six === 'model.' || six === 'value.') {\n\t\t\t\t\t\tif ($.model) {\n\t\t\t\t\t\t\tkey = key.substring(6);\n\t\t\t\t\t\t\tval = key.indexOf('.') === -1 ? $.model[key] : U.get($.model, key);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (six === 'query.')\n\t\t\t\t\t\tval = $.query[key.substring(6)];\n\t\t\t\t\telse if (key.substring(0, 7) === 'params.')\n\t\t\t\t\t\tval = $.params[key.substring(7)];\n\t\t\t\t}\n\t\t\t\treturn val == null ? text : val;\n\t\t\t});\n\n\t\t};\n\n\t\tMAIN.flowtaction.Options = Options;\n\t\tMAIN.flowtaction.AsyncFunction = Object.getPrototypeOf(async function(){}).constructor;\n\t};\n\n\texports.uninstall = function() {\n\t\tdelete MAIN.flowtaction;\n\t};\n\n\texports.make = function(instance, config) {\n\n\t\tvar cfg = {};\n\t\tvar fn;\n\n\t\tinstance.message = function($) {\n\n\t\t\tvar opt = new MAIN.flowtaction.Options($, cfg);\n\t\t\tif (fn) {\n\n\t\t\t\t// check user\n\t\t\t\tif (cfg.user || cfg.permissions) {\n\n\t\t\t\t\tif ((cfg.user === 2 && opt.user) || (cfg.user === 1 && !opt.user)) {\n\t\t\t\t\t\topt.invalid(401);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (cfg.user === 1 && cfg.permissions) {\n\t\t\t\t\t\tlet permissions = cfg.permissions.slice(0);\n\t\t\t\t\t\tpermissions.unshift(opt);\n\t\t\t\t\t\tif (UNAUTHORIZED.apply(global, permissions))\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// check data\n\t\t\t\tlet tmp;\n\n\t\t\t\tif (cfg.input) {\n\t\t\t\t\ttmp = cfg.input.transform(opt.payload, cfg.partial, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.payload = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.query) {\n\t\t\t\t\topt.error.prefix = 'query.';\n\t\t\t\t\ttmp = cfg.query.transform(opt.query, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.query = tmp.response;\n\t\t\t\t}\n\n\t\t\t\tif (cfg.params) {\n\t\t\t\t\topt.error.prefix = 'params.';\n\t\t\t\t\ttmp = cfg.params.transform(opt.params, false, opt.error);\n\t\t\t\t\tif (tmp.error) {\n\t\t\t\t\t\topt.callback(null);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t\topt.params = tmp.response;\n\t\t\t\t}\n\n\t\t\t\topt.error.prefix = '';\n\n\t\t\t\ttry {\n\t\t\t\t\tfn(opt, opt.payload);\n\t\t\t\t} catch (e) {\n\t\t\t\t\topt.invalid(e);\n\t\t\t\t\tinstance.throw(e);\n\t\t\t\t}\n\t\t\t} else\n\t\t\t\topt.invalid(501);\n\t\t};\n\n\t\tinstance.configure = function() {\n\n\t\t\tfn = config.code.includes('await ') ? new MAIN.flowtaction.AsyncFunction('$', 'model', 'data', 'value', config.code) : new Function('$', 'model', 'data', 'value', config.code);\n\n\t\t\tcfg = {};\n\t\t\tfor (var key in config) {\n\t\t\t\tif (key !== 'code')\n\t\t\t\t\tcfg[key] = config[key];\n\t\t\t}\n\n\t\t\tcfg = instance.replace(cfg);\n\t\t\tcfg.input = cfg.input ? cfg.input.toJSONSchema() : null;\n\t\t\tcfg.query = cfg.query ? cfg.query.toJSONSchema() : null;\n\t\t\tcfg.params = cfg.params ? cfg.params.toJSONSchema() : null;\n\t\t\tcfg.permissions = cfg.permissions ? cfg.permissions.split(',').trim() : null;\n\n\t\t\tif (cfg.permissions && !cfg.permissions.length)\n\t\t\t\tcfg.permissions = null;\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThis component creates similar functionality as Total.js Actions.\n\n## Payload\n\n```js\n{\n\tip: String, // optional, IP address\n\turl: String, // optional\n\tlanguage: String, // optional\n\tua: String, // optional, parsed user-agent\n\tuser: Object, // optional\n\theaders: { key: String }, // optional, request headers\n\tcookies: { key: String }, // optional, cookies\n\tpayload: {}, // optional, request payload\n\tquery: { key: String }, // optional\n\tparams: { key: String }, // optional\n\tfiles: [{ type: String, filename: String, path: String, ext: String, size: Number, width: Number, height: Number }] // optional\n}\n```\n\n## Custom scripting\n\n- supports `await`\n- supports Total.js global functions\n\n__Properties__:\n\n- `$.model {Object}` or `model` parsed payload\n- `$.query {Object}` parsed URL query arguments\n- `$.params {Object}` parsed URL params\n- `$.cookies {Object}` parsed cookies\n- `$.files [Object]` uploaded files\n- `$.user {Object}` user session (optional)\n- `$.headers {Object}` request headers\n- `$.ip {String}` IP address (optional)\n- `$.language {String}` optional\n- `$.ua {String}` parsed user agent (optional)\n- `$.url {String}` URL endpoint\n- `$.message {Object}` Flow message instance\n- `$.request {Object}` Flow message payload data\n\n__Methods__:\n\n- `$.invalid(error)` responds with an error and ends the action\n- `$.success([value])` responds with `{ success: true, value }` object and ends the action\n- `$.send(value)` responds with `value` object and ends the action\n- `$.cancel()` ends the action without response\n- `$.audit(message, [type])` writes audit\n\n## Supported types\n\n- `string`\n- `number`\n- `boolean`\n- `date`\n- `object`\n- `email`\n- `phone`\n- `zip`\n- `base64`\n- `url`\n- `datauri`\n- `json`\n- `lower`\n- `upper`\n- `capitalize` all words\n- `capitalize2` only first word\n- `name` makes a name (capitalizes words and remove special characters)\n- `zip`\n- `uid`\n- `guid`\n- `color`\n- `icon`\n- `search` prepares string to a search string\n- `safestring` checks XSS and SQL Injections\n- `smallint`\n- `tinyint`\n- `{A|B|C}` enum type\n- `[type]` means array\n- `{ name:String, age:Number }` means nested object\n- `[ name:String, age:Number ]` means array with an object\n- `*something:type` is `required` field\n</readme>\n\n<settings>\n\t<div class=\"CLASS-settings\">\n\t\t<div class=\"padding\" style=\"padding-bottom:5px\">\n\t\t\t<div class=\"row\">\n\t\t\t\t<div class=\"col-md-9 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.name\" config=\"required:1\">Action name</ui-component>\n\t\t\t\t</div>\n\t\t\t\t<div class=\"col-md-3 m\">\n\t\t\t\t\t<ui-component name=\"input\" path=\"?.color\" config=\"required:1;type:color\">Color</ui-component>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<div class=\"padding bg-smoke\">\n\t\t\t<div class=\"pull-left\">\n\t\t\t\t<div class=\"ui-input-label\">Allow only:</div>\n\t\t\t\t<ui-component name=\"choose\" path=\"?.user\" config=\"selector:div;type:number\" class=\"iconmenu m\">\n\t\t\t\t\t<div data-id=\"1\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-lock\"></i>\n\t\t\t\t\t\t<span>Authorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"2\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-unlock\"></i>\n\t\t\t\t\t\t<span>Unauthorized</span>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div data-id=\"0\" style=\"width:90px\">\n\t\t\t\t\t\t<i class=\"ti ti-door-open\"></i>\n\t\t\t\t\t\t<span>Both</span>\n\t\t\t\t\t</div>\n\t\t\t\t</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"pull-left\" style=\"margin-left:20px\">\n\t\t\t\t<div style=\"height:25px\"></div>\n\t\t\t\t<ui-component name=\"input\" path=\"?.autoresponse\" config=\"type:checkbox\">Auto HTTP response</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.partial\" config=\"type:checkbox\">Allow partial data</ui-component>\n\t\t\t\t<ui-component name=\"input\" path=\"?.strerr\" config=\"type:checkbox\">Convert errors to a string</ui-component>\n\t\t\t</div>\n\t\t\t<div class=\"clearfix\"></div>\n\t\t</div>\n\t\t<div class=\"padding\">\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.input\" config=\"monospace:1;maxlength:100000;placeholder:name\\:Name, *email\\:Email\">Payload schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.query\" config=\"monospace:1;maxlength:100000;placeholder:page\\:Number\">Query arguments schema</ui-component>\n\t\t\t</div>\n\n\t\t\t<div class=\"padding bg-smoke radius npb\">\n\t\t\t\t<div class=\"grid-3\">\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.params\" config=\"monospace:1;maxlength:100000;placeholder:*id\\:String\">Params schema</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.permissions\" config=\"monospace:1;maxlength:100000;placeholder:admin, director\">Permissions</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"m\">\n\t\t\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"monospace:1;required:1;placeholder:response\">Path for storing a response</ui-component>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS .content { min-width: 200px; }\n\t.CLASS header { color: #FFF; padding: 5px; }\n\t.CLASS header div { border-radius: var(--radius); padding: 3px 5px; }\n\t.CLASS .ti { color: #999; }\n\t.CLASS footer > div { padding: 10px 10px 0; }\n\t.CLASS-code .CodeMirror { border: 0; border-left: 1px solid #E0E0E0; border-radius: none; }\n\t.CLASS-code-editor { margin-left: 200px; }\n\t.CLASS-code-info { float: left; width: 200px; padding: 12px; font-size: 12px; }\n\t.CLASS-code-info code { overflow-wrap: break-word; white-space: pre-wrap; display: block; padding: 0 3px; }\n\t.CLASS-code-button { padding: 10px; border-top: 1px solid #E0E0E0; }\n\t.CLASS-code-button button { font-size: 14px; height: 36px; font-weight: bold; }\n\t.CLASS-settings .iconmenu { height: 80px; }\n\t.CLASS-settings .iconmenu > div { height: 76px; }\n\t.CLASS-settings .iconmenu span { padding-top: 8px; }\n\t.CLASS-settings .iconmenu i { padding-top: 16px; }\n\t.ui-dark .CLASS-code .CodeMirror { border-left-color: #404040; }\n\t.ui-dark .CLASS-code-button { border-top-color: #404040; }\n</style>\n\n<body>\n\t<header>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t<div style=\"background-color:{{ value.color }}\">{{ value.name }}</div>\n\t\t\t</script>\n\t\t</ui-bind>\n\t</header>\n\t<footer>\n\t\t<div><button class=\"button exec\" data-exec=\"=sourcecode\"><i class=\"ti ti-js\"></i>Script</button></div>\n\t\t<ui-bind path=\"$CONFIG\" config=\"template\" class=\"block fs11\" style=\"padding:10px\">\n\t\t\t<script type=\"text/html\">\n\t\t\t\t{{ if value.autoresponse }}<div class=\"b\"><i class=\"ti ti-check-square green mr5\"></i>Auto HTTP response</div>{{ fi }}\n\t\t\t\t<div><i class=\"ti ti-check-square mr5\"></i>{{ if value.user === 1 }}Authorized only{{ else if value.user === 2 }}Unauthorized only{{ else }}All allowed{{ fi }}</div>\n\t\t\t\t{{ if value.partial }}<div><i class=\"ti ti-check-square green mr5\"></i>Partial data</div>{{ fi }}\n\t\t\t\t{{ if value.input }}<div><i class=\"ti ti-check-square green mr5\"></i>Payload</div>{{ fi }}\n\t\t\t\t{{ if value.query }}<div><i class=\"ti ti-check-square green mr5\"></i>URL Query arguments</div>{{ fi }}\n\t\t\t\t{{ if value.params }}<div><i class=\"ti ti-check-square green mr5\"></i>Params</div>{{ fi }}\n\t\t\t\t{{ if value.permissions }}<div><i class=\"ti ti-check-square green mr5\"></i>Permissions</div>{{ fi }}\n\t\t\t</script>\n\t\t</ui-bind>\n\t</footer>\n</body>\n\n\n<script>\n\tTOUCH(function(exports, reinit) {\n\n\t\tif (!common.codeactions) {\n\t\t\tcommon.codeactions = {};\n\t\t\tW.codeactionssubmit = function(el) {\n\n\t\t\t\tif (BLOCKED('codeaction', 1000))\n\t\t\t\t\treturn;\n\n\t\t\t\tvar winid = ATTRD(el);\n\t\t\t\tvar id = winid.substring(4);\n\t\t\t\tvar code = common.codeactions[winid];\n\t\t\t\tvar instance = flowinstances.instances[id];\n\t\t\t\tvar config = instance.config;\n\t\t\t\tconfig.code = code;\n\t\t\t\tinstance.reconfigure(config);\n\t\t\t};\n\t\t\tW.codeactionsinit = function(com) {\n\t\t\t\tvar save = () => W.codeactionssubmit(com.element);\n\t\t\t\tvar map = { 'Cmd-S': save, 'Ctrl-S': save };\n\t\t\t\tcom.editor.addKeyMap(map);\n\t\t\t};\n\t\t}\n\n\t\texports.renderschema = function() {\n\n\t\t\tvar builder = [];\n\t\t\tvar config = exports.config;\n\n\t\t\tvar write = function(name, label) {\n\t\t\t\tif (config[name]) {\n\t\t\t\t\tbuilder.push('<div class=\"b badge badge-gray\" style=\"display:block\">{0}</div>'.format(label));\n\t\t\t\t\tvar val = config[name].replace(/\\,/g, '\\n');\n\t\t\t\t\tbuilder.push('<div class=\"m mt5\"><code>{0}</code></div>'.format(val));\n\t\t\t\t}\n\t\t\t};\n\n\t\t\twrite('params', 'Dynamic parameters');\n\t\t\twrite('query', 'URL query arguments');\n\t\t\twrite('input', 'Payload');\n\n\t\t\treturn builder.join('');\n\t\t};\n\n\t\texports.configure = function() {\n\t\t\tvar key = 'code' + exports.id;\n\t\t\tvar win = common.windows.findItem('id', key);\n\t\t\tif (win) {\n\t\t\t\tvar path = '*codeactions.' + key;\n\t\t\t\tvar prev = GET(path);\n\t\t\t\tif (prev !== exports.config.code)\n\t\t\t\t\tSET(path, exports.config.code);\n\t\t\t\twin.element.find('.CLASS-code-info').html(exports.renderschema());\n\t\t\t}\n\t\t};\n\n\t\texports.sourcecode = function() {\n\n\t\t\tvar config = exports.config;\n\t\t\tvar path = '*codeactions.code' + exports.id;\n\t\t\tvar winid = 'code' + exports.id;\n\n\t\t\tif (common.windows.findItem('id', winid)) {\n\t\t\t\tSETTER('windows/focus', winid);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tSET(path, config.code);\n\n\t\t\tPUSH('common.windows', { id: winid, cachekey: 'codeaction', cache: 'readme', html: '<div class=\"CLASS-code invisible\"><div class=\"CLASS-code-info noscrollbar\">{1}</div><div class=\"CLASS-code-editor\"><ui-component name=\"codemirror\" path=\"{0}\" config=\"type:javascript;parent:auto;margin:60;$init:codeactionsinit\"></ui-component></div><div class=\"CLASS-code-button\"><button class=\"button exec\" data-exec=\"codeactionssubmit\">Apply</button></div></div>'.format(path, exports.renderschema()), title: 'Action script: ' + config.name, actions: { move: true, autosave: true, close: true, maximize: true, minimize: false }, offset: { x: ((WW / 2) - 275) >> 0, y: ((WH / 2) - 250) >> 0, width: 750, height: 500, minwidth: 200, minheight: 300, maxwidth: 1200, maxheight: 1200 }, make: function(el) {\n\t\t\t\tel.closest('.ui-windows-item').css('z-index', 50);\n\t\t\t\tel.find('.CLASS-code').rclass('invisible', 500);\n\t\t\t}});\n\t\t};\n\n\t});\n\n</script>",
			"trigger": "<script total>\n\n\texports.id = 'trigger';\n\texports.name = 'Trigger';\n\texports.group = 'Triggers';\n\texports.version = '4';\n\texports.icon = 'ti ti-start';\n\texports.author = 'Total.js';\n\texports.config = { random: true, type: 'string', data: '', restart: false, prompt: false };\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\texports.kind = 'trigger';\n\n\texports.make = function(instance, config) {\n\n\t\tvar regprompt = /\\{prompt\\}/g;\n\n\t\tinstance.trigger = function(msg) {\n\n\t\t\tvar random = !config.prompt && config.random;\n\t\t\tvar val = config.data;\n\t\t\tvar prompt = msg.value || '';\n\n\t\t\tswitch (config.type) {\n\t\t\t\tcase 'number':\n\t\t\t\t\tval = random ? U.random() : val.replace(regprompt, prompt).parseFloat();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'buffer':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? Buffer.from(U.random_string()) : Buffer.from(val.replace(regprompt, prompt), 'base64');\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'date':\n\t\t\t\t\tval = random ? NOW.add('-' + U.random(500, 10) + ' seconds') : val.replace(regprompt, prompt).parseDate();\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'object':\n\t\t\t\t\ttry {\n\t\t\t\t\t\tval = random ? {} : (new Function('return ' + val.replace(regprompt, prompt)))();\n\t\t\t\t\t} catch (e) {\n\t\t\t\t\t\tinstance.throw(e);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'boolean':\n\t\t\t\t\tvar tmp = random ? '' : val.replace(regprompt, prompt);\n\t\t\t\t\tval = random ? U.random() % 2 === 0 : tmp === 'true' || tmp === 'on' || tmp === '1';\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tval = random ? U.random_string(20) : val.replace(regprompt, prompt);\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tinstance.send('output', val);\n\t\t};\n\n\t\tconfig.restart && setTimeout(() => instance.trigger(), 5000);\n\t};\n\n</script>\n\n<style>\n\t.CLASS .padding { padding: 0 10px 10px; }\n\t.CLASS button { width: 100%; height: 24px; border: 1px solid #E0E0E0; border-radius: var(--radius); color: #000; background-color: #F0F0F0; margin: 0; }\n\t.CLASS button:hover { background-color: #F8F8F8; }\n\t.CLASS button:active { background-color: #E0E0E0; }\n\t.ui-dark .CLASS button { border-color: #404040; color: #FFF; background-color: #222; }\n\t.ui-dark .CLASS button:hover { background-color: #303030; }\n\t.ui-dark .CLASS button:active { background-color: #404040; }\n</style>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<ui-component name=\"input\" path=\"?.type\" config=\"dirsource:string|String,number|Number,boolean|Boolean,date|Date,object|Object,buffer|Buffer as Base64;required:1\">Type</ui-component>\n\t\t<div class=\"mt10 m\">\n\t\t\t<ui-component name=\"input\" path=\"?.restart\" config=\"type:checkbox\">Trigger 5s after initialization.</ui-component>\n\t\t\t<ui-component name=\"input\" path=\"?.prompt\" config=\"type:checkbox\">Prompt</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"disabled\" class=\"block\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.random\" config=\"type:checkbox\">Random data</ui-component>\n\t\t\t</ui-bind>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"block hidden m mt10\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.promptlabel\" config=\"placeholder:Enter a value\"><b>Prompt label</b></ui-component>\n\t\t\t</ui-bind>\n\t\t</div>\n\t\t<ui-bind path=\"?\" config=\"hide:value.hide && !value.prompt\" class=\"hidden\">\n\t\t\t<hr />\n\t\t\t<ui-component name=\"input\" path=\"?.data\" config=\"required:1;height:250;type:multiline;maxlength:100000;monospace:1\">Data</ui-component>\n\t\t\t<ui-bind path=\"?.prompt\" config=\"show\" class=\"help hidden\">The prompt value will be assigned to the <code>{prompt}</code> keyword in the code.</ui-bind>\n\t\t</ui-bind>\n\t</div>\n</settings>\n\n<readme>\nThe component triggers data into the Flow.\n</readme>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<div class=\"padding\">\n\t\t<button name=\"run\">Run</button>\n\t</div>\n</body>\n\n<script>\n\tTOUCH(function(exports) {\n\t\texports.click = function(el) {\n\t\t\tif (exports.config.prompt) {\n\t\t\t\tvar opt = {};\n\t\t\t\topt.name = exports.config.promptlabel || 'Enter a value';\n\t\t\t\topt.value = '';\n\t\t\t\topt.callback = function(val) {\n\t\t\t\t\texports.trigger({ value: val });\n\t\t\t\t};\n\t\t\t\tSETTER('prompt/show', opt);\n\t\t\t} else\n\t\t\t\texports.trigger();\n\t\t};\n\t});\n</script>",
			"feedtodelay": "<script total>\n\n\texports.id = 'feedtodelay';\n\texports.name = 'Feed to delay';\n\texports.icon = 'ti ti-clock';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Common';\n\texports.config = {};\n\texports.inputs = [{ id: 'input', name: 'Input' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }];\n\n\texports.make = function(instance, config) {\n\n\t\tvar ready = false;\n\t\tvar timeout;\n\t\tvar lastdata = null;\n\n\t\tvar timer = () => {\n\t\t\ttimeout = setTimeout(function(){\n\t\t\t\tinstance.send('output', lastdata);\n\t\t\t\ttimeout = null;\n\t\t\t\tconfig.resend && timer();\n\t\t\t}, +config.timeout * 1000);\n\t\t};\n\n\t\tinstance.message = function($) {\n\t\t\tlastdata = CLONE($.data);\n\n\t\t\t$.destroy();\n\t\t\tif (timeout)\n\t\t\t\tclearTimeout(timeout);\n\n\t\t\ttimer();\n\t\t};\n\n\t\tinstance.configure = function() {\n\t\t\tif (timeout)\n\t\t\t\tclearTimeout(timeout);\n\t\t\tif (!config.timeout || isNaN(config.timeout))\n\t\t\t\tinstance.status('Invalid timeout');\n\t\t\telse {\n\t\t\t\ttimer();\n\t\t\t\tinstance.status(+config.timeout);\n\t\t\t}\n\t\t};\n\n\t\tinstance.close = function() {\n\t\t\ttimeout && clearTimeout(timeout);\n\t\t};\n\n\t\tinstance.configure();\n\n\t};\n\n</script>\n\n<readme>\nThe incomming message will only be forwarded after the timeout. Only the last message is forwarded, so any previously received messages are lost.\nIf messages are comming in within the given timeout period this component will never forward any message.\nThe timeout is activated by the first message.\nThe maximum timeout is 2147483 seconds, which is about 24.8 days.\nExample usage:\n\t- A sensor is supposed to send data every minute, use this component to notify you that there is a problem with receiving message.\n\t- HTTP request comes in and it takes too much time to respond? Use this component to notify you about it.\n</readme>\n\n<script>\n\tThelpers.feedtodelay_format = function feedtodelay_format(val) {\n\t\tif (typeof val === 'string')\n\t\t\treturn val;\n\t\tif (val < 60) // less than a minute\n\t\t\treturn val + 's';\n\t\telse if (val < 3600) { // less than an hour\n\t\t\tvar secs = val % 60;\n\t\t\tvar mins = Math.floor(val / 60);\n\t\t\treturn '{0}m {1}s'.format(mins, secs);\n\t\t} else {// more than an hour\n\t\t\tvar secs = val % 60;\n\t\t\tvar mins = Math.floor(val / 60);\n\t\t\tvar hours = Math.floor(mins / 60);\n\t\t\tmins = mins % 60;\n\t\t\treturn '{0}h {1}m {2}s'.format(hours, mins, secs);\n\t\t}\n\t};\n</script>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4 m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.timeout\" config=\"type:number;maxvalue:2147483;format:\" default=\"60\">Timeout in seconds</ui-component>\n\t\t\t\t<div class=\"help m\">Maximum timeout is 2147483 seconds(24.8 days)</div>\n\t\t\t\t<div>Current value: <b><ui-bind path=\"?.timeout\" config=\"text;helper:feedtodelay_format\"></ui-bind></b></div>\n\t\t\t </div>\n\t\t</div>\n\t\t<div class=\"row\">\n\t\t\t<div class=\"col-md-4\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.resend\" config=\"type:checkbox\">Keep resending</ui-component>\n\t\t\t\t<div class=\"help\">By default it only forwards message once after the timeout even if no more messages is received.</div>\n\t\t\t </div>\n\t\t</div>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"ICON\"></i>NAME\n\t</header>\n\t<footer><ui-bind path=\"!STATUS\" config=\"show;text;helper:feedtodelay_format\"></ui-bind></footer>\n</body>",
			"cqw5j8be93": "<script total>\n\n\texports.id = \"mssqlconn\"\n\texports.name = 'SQL Server Connection';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1.4';\n\texports.group = 'databases';\n\texports.config = { envFile: '.env', name: '', pooling: 0 };\n\n\tconst dotenv = require('dotenv');\n\tconst mssql = require('mssql');\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\tconst envPath = PATH.root(config.envFile);\n\t\t\tconst envConfig = dotenv.config({ path: envPath });\n\n\t\t\tif (envConfig.error) {\n\t\t\t\tconsole.error('Failed to read .env file:', envConfig.error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst { DB_SERVER, DB_NAME, DB_PORT, DB_USER, DB_PASSWORD } = envConfig.parsed;\n\n\t\t\tconst connectionConfig = {\n\t\t\t\tserver: DB_SERVER,\n\t\t\t\tdatabase: DB_NAME,\n\t\t\t\tport: DB_PORT,\n\t\t\t\tuser: DB_USER,\n\t\t\t\tpassword: DB_PASSWORD,\n\t\t\t\toptions: {\n\t\t\t\t\tencrypt: true,\n\t\t\t\t\ttrustServerCertificate: true,\n\t\t\t\t\ttrustedConnection: true\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tmssql.connect(connectionConfig, err => {\n\t\t\t\tif (err) {\n\t\t\t\t\tconsole.error('Error connecting to SQL Server:', err);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tconsole.log(\"Connection Successful!\");\n\n\t\t\t\t// const query = \"SELECT * FROM tasks\";\n\t\t\t\t// const request = new mssql.Request();\n\t\t\t\t// request.query(query, (err, result) => {\n\t\t\t\t\t// if(err){\n\t\t\t\t\t\t// console.log('error cikk querynya', err);\n\t\t\t\t\t// } else{\n\t\t\t\t\t\t// console.log('Haslinya lhoo yaaa: ', result);\n\t\t\t\t\t// }\n\t\t\t\t// });\n\t\t\t});\n\n\t\t\tconst poolPromise = new mssql.ConnectionPool(connectionConfig)\n\t\t\t\t.connect()\n\t\t\t\t.then(pool => {\n\t\t\t\t\tconsole.log('Connected to MSSQL')\n\t\t\t\t\treturn pool\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\tconsole.error('Error establishing connection pool:', err);\n\t\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component reads the SQL Server connection details from a specified `.env` file in the root directory and uses them to establish a connection to an SQL Server database using SQL Server Authentication.\n\nMicrosoft SQL Server\n\n## Configuration to SQL Server in .env root project\n```javascript\nDB_SERVER=servername\\instancename\nDB_NAME=dbname\nDB_PORT=dbport\nDB_USER=dbuser\nDB_PASSWORD=dbpassword\n```\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"$ICON\" style=\"font-size:50px;color:#5C1DC4\"></i>\n\t\t<div class=\"fs12 mt10\">$NAME</div>\n\t</div>\n</body>\n",
			"tsqlquery": "<script total>\n\n\texports.id = 'tsqlquery';\n\texports.name = 'SQL query';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.group = 'Total.js';\n\texports.version = '1';\n\texports.config = { id: 'default', sql: 'SELECT 1', first: false, path: '', dbtype: '' };\n\texports.inputs = [{ id: 'input', name: 'Payload' }];\n\texports.outputs = [{ id: 'output', name: 'Output' }, { id: 'error', name: 'Error' }];\n\n\tconst mssql = require('mssql');\n\tconst { Pool: pgPool } = require('pg');\n\tconst mysql = require('mysql');\n\n\texports.make = function(instance, config) {\n\t\tinstance.message = function($) {\n\n\t\t\t// var id = $.variables(config.id, true);\n\t\t\t// var sql = $.variables(config.sql, true, val => typeof(val) === 'string' && val[0] === '!' ? val.substring(1) : PG_ESCAPE(val));\n\n\t\t\t// DATA.query(id, sql).callback(function(err, response) {\n\t\t\t\t// if (err) {\n\t\t\t\t\t// $.send('error', err);\n\t\t\t\t// } else {\n\n\t\t\t\t\t// if (config.first)\n\t\t\t\t\t\t// response = response[0];\n\n\t\t\t\t\t// if (config.path) {\n\t\t\t\t\t\t// U.set($.data, config.path, response);\n\t\t\t\t\t\t// response = $.data;\n\t\t\t\t\t// }\n\n\t\t\t\t\t// $.send('output', response);\n\t\t\t\t// }\n\t\t\t// });\n\n\t\t\tconst sqlQuery = $.variables(config.sql, true);\n\n\t\t\tswitch (config.dbtype) {\n\t\t\t\tcase 'mssql':\n\t\t\t\t\tmssql.connect(global.connectionConfig).then(pool => {\n\t\t\t\t\t\treturn pool.request().query(sqlQuery);\n\t\t\t\t\t}).then(result => {\n\t\t\t\t\t\tprocessResult(result.recordset);\n\t\t\t\t\t}).catch(err => {\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'postgresql':\n\t\t\t\t\t// Koneksi ke PostgreSQL\n\t\t\t\t\t// const pgPoolInstance = new pgPool(global.connectionConfig);\n\t\t\t\t\t// pgPoolInstance.query(sqlQuery).then(result => {\n\t\t\t\t\t\t// processResult(result.rows);\n\t\t\t\t\t// }).catch(err => {\n\t\t\t\t\t\t// $.send('error', err);\n\t\t\t\t\t// }).finally(() => {\n\t\t\t\t\t\t// pgPoolInstance.end();\n\t\t\t\t\t// });\n\n\t\t\t\t\tvar id = $.variables(config.id, true);\n\t\t\t\t\tvar sql = $.variables(config.sql, true, val => typeof(val) === 'string' && val[0] === '!' ? val.substring(1) : PG_ESCAPE(val));\n\n\t\t\t\t\tDATA.query(id, sql).callback(function(err, response) {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif (config.first)\n\t\t\t\t\t\t\t\tresponse = response[0];\n\n\t\t\t\t\t\t\tif (config.path) {\n\t\t\t\t\t\t\t\tU.set($.data, config.path, response);\n\t\t\t\t\t\t\t\tresponse = $.data;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$.send('output', response);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 'mysql':\n\t\t\t\t\t// Koneksi ke MySQL\n\t\t\t\t\tmysql.createConnection(global.connectionConfig).then(connection => {\n\t\t\t\t\t\treturn connection.execute(sqlQuery).then(([rows]) => {\n\t\t\t\t\t\t\tprocessResult(rows);\n\t\t\t\t\t\t\treturn connection.end();\n\t\t\t\t\t\t});\n\t\t\t\t\t}).catch(err => {\n\t\t\t\t\t\t$.send('error', err);\n\t\t\t\t\t});\n\t\t\t\t\tbreak;\n\n\t\t\t\tdefault:\n\t\t\t\t\t$.send('error', 'Unsupported database type');\n\t\t\t}\n\n\t\t\tfunction processResult(response) {\n\t\t\t\tif (config.first) {\n\t\t\t\t\tresponse = response[0];\n\t\t\t\t}\n\n\t\t\t\tif (config.path) {\n\t\t\t\t\tU.set($.data, config.path, response);\n\t\t\t\t\tresponse = $.data;\n\t\t\t\t}\n\n\t\t\t\t$.send('output', response);\n\t\t\t}\n\n\t\t};\n\t};\n\n</script>\n\n<readme>\nThe component executes SQL commands on a specified connection. This component supports multiple databases, including SQL Server and PostgreSQL. Configure the 'dbtype' setting to specify which database type to use.\n</readme>\n\n<settings>\n\t<div class=\"padding\">\n\t\t<div class=\"message message-alert\">Connection and SQL query support dynamic variables in the form <code class=\"b\">{key}</code> or <code class=\"b\">{data.key}</code>. Variables are read from global Variables <code class=\"b\">{key}</code> and from the message data <code class=\"b\">{data.key}</code>. The component encodes all SQL values with except <code class=\"b red\">{!key}</code>.</div>\n\t\t<div class=\"grid-2\">\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.id\" config=\"required:1;innerlabel:1\">Connection</ui-component>\n\t\t\t\t<div class=\"help\">A connection name/identifier</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.dbtype\" config=\"required:1;innerlabel:1;options:mssql|postgresql\">Database Type</ui-component>\n\t\t\t\t<div class=\"help\">Specify the database type (mssql, postgresql)</div>\n\t\t\t</div>\n\t\t\t<div class=\"m\">\n\t\t\t\t<ui-component name=\"input\" path=\"?.path\" config=\"innerlabel:1;placeholder:response\">Assign data according to the path</ui-component>\n\t\t\t\t<div class=\"help\">Otherwise, the response will replace the entire message data.</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<ui-component name=\"input\" path=\"?.first\" config=\"type:checkbox\">Return only the first row</ui-component>\n\t\t<hr />\n\t\t<div class=\"ui-input-label\">SQL query:</div>\n\t\t<ui-component name=\"codemirror\" path=\"?.sql\" config=\"type:sql;minheight:300;parent:auto;margin:290;tabs:true;trim:true\"></ui-component>\n\t</div>\n</settings>\n\n<style>\n\t.CLASS footer { padding: 10px; font-size: 12px; }\n</style>\n\n<body>\n\t<header>\n\t\t<i class=\"$ICON\"></i>$NAME\n\t</header>\n\t<footer>\n\t\t<ui-bind path=\"$CONFIG.id\" config=\"text span;empty\">\n\t\t\tDatabase: <span class=\"b\"></span>\n\t\t</ui-bind>\n\t</footer>\n</body>",
			"cvhoc54dda": "<script total>\n\n\texports.name = 'PostgreSQL Connection from .env';\n\texports.icon = 'ti ti-database';\n\texports.author = 'Total.js';\n\texports.version = '1';\n\texports.group = 'Databases';\n\texports.config = { envFile: '.env', name: '', pooling: 0, database: 'querybuilderpg' };\n\n\tconst dotenv = require('dotenv');\n\n\texports.make = function(instance, config) {\n\n\t\tinstance.configure = function() {\n\t\t\tconst envPath = PATH.root(config.envFile);\n\t\t\tconst envConfig = dotenv.config({ path: envPath });\n\n\t\t\tif (envConfig.error) {\n\t\t\t\tconsole.error('Failed to read .env file:', envConfig.error);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst connectionString = `postgres://${envConfig.parsed.DB_USER}:${envConfig.parsed.DB_PASSWORD}` +\n\t\t\t\t`@${envConfig.parsed.DB_HOST}:${envConfig.parsed.DB_PORT}/${envConfig.parsed.DB_NAME}`;\n\n\t\t\tNPMINSTALL(config.database, function() {\n\t\t\t\trequire(config.database).init(config.name || 'default', connectionString, config.pooling || null);\n\t\t\t\tconsole.log('Sukses koneksiin ke PostgreSQL lewat .env');\n\t\t\t});\n\t\t};\n\n\t\tinstance.configure();\n\t};\n\n</script>\n\n<readme>\nThis component reads the PostgreSQL connection details from a specified `.env` file in the root directory and uses them to establish a connection to a PostgreSQL database via QueryBuilder. The database library is automatically installed if not already present.\n</readme>\n\n<body>\n\t<div class=\"padding center\">\n\t\t<i class=\"$ICON\" style=\"font-size:50px;color:#5C1DC4\"></i>\n\t\t<div class=\"fs12 mt10\">$NAME</div>\n\t</div>\n</body>\n"
		},
		"design": {
			"im0yx3drv": {
				"id": "im0yx3drv",
				"config": {
					"id": "default",
					"sql": "select * from tasks;",
					"first": false,
					"path": "",
					"dbtype": "postgresql"
				},
				"x": 506,
				"y": 208,
				"component": "tsqlquery",
				"connections": {
					"output": [
						{
							"id": "im0yx3ora",
							"index": "input"
						}
					],
					"error": [
						{
							"id": "im0yx3pnf",
							"index": "input"
						}
					]
				}
			},
			"im0yx3ngl": {
				"id": "im0yx3ngl",
				"config": {
					"random": true,
					"type": "string",
					"data": "",
					"restart": false,
					"prompt": false
				},
				"x": 295,
				"y": 227,
				"component": "trigger",
				"connections": {
					"output": [
						{
							"id": "im0yx3drv",
							"index": "input"
						}
					]
				}
			},
			"im0yx3ora": {
				"id": "im0yx3ora",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 823,
				"y": 67,
				"component": "print",
				"connections": {}
			},
			"im0yx3pnf": {
				"id": "im0yx3pnf",
				"config": {
					"repo": false,
					"data": true
				},
				"x": 823,
				"y": 423,
				"component": "print",
				"connections": {}
			},
			"im0z4acxr": {
				"id": "im0z4acxr",
				"config": {
					"envFile": ".env",
					"name": "",
					"pooling": 0,
					"database": "querybuilderpg"
				},
				"x": 17,
				"y": 671,
				"component": "cvhoc54dda",
				"connections": {}
			},
			"im0za1lf5": {
				"id": "im0za1lf5",
				"config": {
					"envFile": ".env",
					"name": "",
					"pooling": 0
				},
				"x": 163,
				"y": 49,
				"component": "cqw5j8be93",
				"connections": {}
			},
			"im100c3uv": {
				"id": "im100c3uv",
				"config": {},
				"x": 270,
				"y": 406,
				"component": "postgresql",
				"connections": {}
			}
		},
		"sources": {},
		"size": 105502
	}
}